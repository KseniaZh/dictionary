{"ast":null,"code":"import { SHOW_LOADER, COUNTER_PAGES_TABLE, COUNT_ROW_TABLE, GET_DATA_LIST_TABLE, CHANGE_NUMBER_LIST_TABLE } from \"../types\";\nexport const loadingShow = data => {\n  return {\n    type: SHOW_LOADER,\n    payload: data\n  };\n};\nexport const getCounterPagesTable = (dataFromServer, countRowTable) => {\n  let sumRow = dataFromServer.length + 1;\n  console.log('dataFromServer.length ', dataFromServer.length);\n  let i = 0;\n\n  while (sumRow >= countRowTable) {\n    sumRow = sumRow - countRowTable;\n    i++;\n    console.log('sumRow ', sumRow + ' ' + i);\n  }\n\n  if (sumRow <= 0) {\n    console.log('sumRow <= 0', sumRow + ' ' + i);\n    return {\n      type: COUNTER_PAGES_TABLE,\n      payload: i\n    };\n  } else {\n    i++;\n    console.log('sumRow >0 ', sumRow + ' ' + i);\n    return {\n      type: COUNTER_PAGES_TABLE,\n      payload: i\n    };\n  }\n};\nexport const changeCountRowTable = data => {\n  return {\n    type: COUNT_ROW_TABLE,\n    payload: data\n  };\n};\nexport const getDataPageRowTable = (dataFromServer, countRow, num) => {\n  let activeRowMin = countRow * (num - 1) + 1;\n  let activeRowMax = countRow * num;\n  let dataList = [];\n  dataFromServer.map((obj, index) => {\n    let number = index + 1;\n\n    if (number >= activeRowMin && number <= activeRowMax) {\n      dataList.push(obj);\n    }\n\n    ;\n  });\n  return {\n    type: GET_DATA_LIST_TABLE,\n    payload: dataList\n  };\n};\nexport const changeNumberList = number => {\n  return {\n    type: CHANGE_NUMBER_LIST_TABLE,\n    payload: number\n  };\n};","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/store/EltypeClass/actions/actionsFlagsEltypeClass.js"],"names":["SHOW_LOADER","COUNTER_PAGES_TABLE","COUNT_ROW_TABLE","GET_DATA_LIST_TABLE","CHANGE_NUMBER_LIST_TABLE","loadingShow","data","type","payload","getCounterPagesTable","dataFromServer","countRowTable","sumRow","length","console","log","i","changeCountRowTable","getDataPageRowTable","countRow","num","activeRowMin","activeRowMax","dataList","map","obj","index","number","push","changeNumberList"],"mappings":"AAAA,SACIA,WADJ,EAEIC,mBAFJ,EAGIC,eAHJ,EAIIC,mBAJJ,EAKIC,wBALJ,QAM2B,UAN3B;AAQA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AAEjC,SAAO;AACHC,IAAAA,IAAI,EAAEP,WADH;AAEHQ,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CANM;AAQP,OAAO,MAAMG,oBAAoB,GAAG,CAACC,cAAD,EAAiBC,aAAjB,KAAmC;AAEnE,MAAIC,MAAM,GAAGF,cAAc,CAACG,MAAf,GAAwB,CAArC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCL,cAAc,CAACG,MAArD;AACA,MAAIG,CAAC,GAAG,CAAR;;AAEA,SAAOJ,MAAM,IAAID,aAAjB,EAAgC;AAC5BC,IAAAA,MAAM,GAAGA,MAAM,GAAGD,aAAlB;AACAK,IAAAA,CAAC;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAM,GAAG,GAAT,GAAeI,CAAtC;AACH;;AAED,MAAIJ,MAAM,IAAI,CAAd,EAAiB;AACbE,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,MAAM,GAAG,GAAT,GAAeI,CAA1C;AACA,WAAO;AACHT,MAAAA,IAAI,EAAEN,mBADH;AAEHO,MAAAA,OAAO,EAAEQ;AAFN,KAAP;AAIH,GAND,MAMO;AACHA,IAAAA,CAAC;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,MAAM,GAAG,GAAT,GAAeI,CAAzC;AACA,WAAO;AACHT,MAAAA,IAAI,EAAEN,mBADH;AAEHO,MAAAA,OAAO,EAAEQ;AAFN,KAAP;AAIH;AACJ,CA1BM;AA6BP,OAAO,MAAMC,mBAAmB,GAAIX,IAAD,IAAU;AAEzC,SAAO;AACHC,IAAAA,IAAI,EAAEL,eADH;AAEHM,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CANM;AAQP,OAAO,MAAMY,mBAAmB,GAAG,CAACR,cAAD,EAAiBS,QAAjB,EAA2BC,GAA3B,KAAmC;AAElE,MAAIC,YAAY,GAAGF,QAAQ,IAAIC,GAAG,GAAG,CAAV,CAAR,GAAuB,CAA1C;AACA,MAAIE,YAAY,GAAGH,QAAQ,GAAGC,GAA9B;AAEA,MAAIG,QAAQ,GAAG,EAAf;AAEAb,EAAAA,cAAc,CAACc,GAAf,CAAmB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC/B,QAAIC,MAAM,GAAGD,KAAK,GAAG,CAArB;;AACA,QAAIC,MAAM,IAAIN,YAAV,IAA0BM,MAAM,IAAIL,YAAxC,EAAsD;AAClDC,MAAAA,QAAQ,CAACK,IAAT,CAAcH,GAAd;AACH;;AAAA;AACJ,GALD;AAMA,SAAO;AACHlB,IAAAA,IAAI,EAAEJ,mBADH;AAEHK,IAAAA,OAAO,EAAEe;AAFN,GAAP;AAIH,CAjBM;AAmBP,OAAO,MAAMM,gBAAgB,GAAIF,MAAD,IAAY;AACxC,SAAO;AACHpB,IAAAA,IAAI,EAAEH,wBADH;AAEHI,IAAAA,OAAO,EAAEmB;AAFN,GAAP;AAIH,CALM","sourcesContent":["import {\r\n    SHOW_LOADER,\r\n    COUNTER_PAGES_TABLE,\r\n    COUNT_ROW_TABLE,\r\n    GET_DATA_LIST_TABLE,\r\n    CHANGE_NUMBER_LIST_TABLE\r\n                    } from \"../types\";\r\n\r\nexport const loadingShow = (data) => {\r\n\r\n    return {\r\n        type: SHOW_LOADER,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const getCounterPagesTable = (dataFromServer, countRowTable) => {\r\n\r\n    let sumRow = dataFromServer.length + 1;\r\n    console.log('dataFromServer.length ', dataFromServer.length)\r\n    let i = 0;\r\n\r\n    while (sumRow >= countRowTable) {\r\n        sumRow = sumRow - countRowTable;\r\n        i++;\r\n        console.log('sumRow ', sumRow + ' ' + i)\r\n    }\r\n\r\n    if (sumRow <= 0) {\r\n        console.log('sumRow <= 0', sumRow + ' ' + i)\r\n        return {\r\n            type: COUNTER_PAGES_TABLE,\r\n            payload: i\r\n        }\r\n    } else {\r\n        i++;\r\n        console.log('sumRow >0 ', sumRow + ' ' + i)\r\n        return {\r\n            type: COUNTER_PAGES_TABLE,\r\n            payload: i\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const changeCountRowTable = (data) => {\r\n\r\n    return {\r\n        type: COUNT_ROW_TABLE,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const getDataPageRowTable = (dataFromServer, countRow, num) => {\r\n\r\n    let activeRowMin = countRow * (num - 1) + 1;\r\n    let activeRowMax = countRow * num;\r\n\r\n    let dataList = [];\r\n\r\n    dataFromServer.map((obj, index) => {\r\n        let number = index + 1;\r\n        if (number >= activeRowMin && number <= activeRowMax) {\r\n            dataList.push(obj);\r\n        };\r\n    })\r\n    return {\r\n        type: GET_DATA_LIST_TABLE,\r\n        payload: dataList\r\n    }\r\n}\r\n\r\nexport const changeNumberList = (number) => {\r\n    return {\r\n        type: CHANGE_NUMBER_LIST_TABLE,\r\n        payload: number\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}