{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\User\\\\User.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\nimport TableList from '../../components/Table/TableListUser';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport HeaderCompare from '../../components/Header/HeaderCompare';\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\nimport ButtonLinkSmallNotMouse from '../../UserInterface/Buttons/Button/ButtonLinkSmallNotMouse';\nimport { startUser_GET_RequestServer } from '../../store/User/actions/actionUser';\nimport { saveDataStore } from '../../store/BasisReport/actions/actionFocusData';\nimport { saveTypeRequest, saveNameWindow } from '../../store/User/actions/actionEditWindowUser';\nimport { changeNumberList, getDataPageRowTable } from '../../store/BasisReport/actions/actionsFlagsBasisReport';\nimport { clearCompareArr, deleteDataCompareArr } from '../../store/User/actions/actionsCompareUser';\nimport { addDescription } from \"../../store/Description/actionsDescription\";\nimport { tablebodyBackgroundClear } from '../../functions/tablebodyBackgroundClear';\nimport { changeAdressOpenTable } from '../../store/User/actions/actionsLinksUser';\nimport { addDataCompareArr } from '../../store/User/actions/actionsCompareUser';\nimport { rowFocus_Coffee } from '../../styles/const_color';\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\n\nfunction User(props) {\n  const dispatch = useDispatch();\n  const stateLoading = useSelector(state => state.stateFlagsBasisReport.loading);\n  const stateTable = useSelector(state => state.stateBasisReport); //ВСЯ база\n\n  const dataTable = useSelector(state => state.stateFlagsBasisReport.dataListTable); // отображаемый лист\n\n  const visibleNameСolumns = useSelector(state => state.stateInputEditWindowUser.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\n\n  const typeDataColumns = useSelector(state => state.stateInputEditWindowUser.typeData); // тип данных значений, заполняющих колонки\n\n  const countRow = useSelector(state => state.stateFlagsBasisReport.countRowTable); // количество строк на отображаемой странице\n\n  const numberList = useSelector(state => state.stateFlagsBasisReport.numberList); //номер отображаемого листа\n\n  const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\n\n  const compareArr = useSelector(state => state.stateCompareUser); // массив строк, избранных для сравнения\n\n  const links = useSelector(state => state.stateLinksUser); //список ссылок для переходов между окнами\n\n  const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll); // разрешен ли пользователем показ подсказок\n\n  const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга)\n\n  const [flagOpenCompareWindow, setFlagOpenCompareWindow] = useState(false);\n\n  const focusNull = () => {\n    tablebodyBackgroundClear();\n    dispatch(saveDataStore({\n      \"uid\": \"\",\n      \"login\": \"\",\n      \"name\": \"\",\n      \"password\": \"\",\n      \"isDeleted\": false,\n      \"isSuperUser\": false,\n      \"docInfo\": [],\n      \"projectAuthorU\": [],\n      \"projectUpdaterU\": [],\n      \"userProjects\": []\n    }));\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const hendlerDeleteContext = () => {\n    dispatch(deleteDataCompareArr(focusData, compareArr)); // удалить из массива сравнений\n    //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\n\n    focusNull();\n  };\n\n  const hendlerAddCompareData = () => {\n    dispatch(addDataCompareArr(focusData, compareArr));\n    console.log('добавлено в сравнение ', focusData);\n  };\n\n  const hendlerOpenCompareWindow = () => {\n    dispatch(addDataCompareArr(focusData, compareArr)); //добавить выделенную строку в сравнение\n\n    focusNull();\n    dispatch(changeAdressOpenTable(links.linkCompare)); // !!!!!!!\n\n    setFlagOpenCompareWindow(true); //!!!!!\n\n    setStateConsoleButton(stateConsoleButtonCompare); //!!!!!!!\n\n    setStateHeader(stateHeaderCompare); //!!!!!\n  };\n\n  const hendlerClearCompareArr = () => {\n    dispatch(clearCompareArr());\n    focusNull(); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase)); //!!!!!!\n\n    setFlagOpenCompareWindow(false); //!!!!!\n\n    setStateConsoleButton(stateConsoleButtonBase); //!!!!!!!\n\n    setStateHeader(stateHeaderBase); //!!!!!\n  };\n\n  const hendlerCloseCompareWindow = () => {\n    //закрываем окно и поэтому обнуляем хранение фокуса:\n    focusNull(); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase)); //!!!!!!\n\n    setFlagOpenCompareWindow(false); //!!!!!\n\n    setStateConsoleButton(stateConsoleButtonBase); //!!!!!!!\n\n    setStateHeader(stateHeaderBase); //!!!!!\n  };\n\n  const hendlerSearchBase = event => {\n    event.preventDefault();\n\n    if (event.target.value === '') {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    let num; // номер выбранного объекта в массиве\n\n    let numRowOnPage; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\n\n    stateTable.map((obj, index) => {\n      if (obj.name === event.target.value) {\n        num = index + 1;\n        numRowOnPage = index + 1;\n        dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\n      }\n    }); //поиск номера страницы\n\n    let i = countRow;\n    let numList = 1;\n\n    if (num === undefined) {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    while (i < num) {\n      i = i + countRow;\n      numRowOnPage = numRowOnPage - countRow;\n      numList++;\n    }\n\n    dispatch(changeNumberList(numList)); //сохраняем номер\n\n    dispatch(getDataPageRowTable(stateTable, countRow, numList)); // загружаем выбранный лист\n\n    tablebodyBackgroundClear();\n    let tablebody = document.querySelector('tbody');\n    tablebody.children[numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\n\n    tablebody.children[numRowOnPage - 1].children[1].focus();\n  };\n\n  const hendlerClearSearchInput = event => {\n    const SearchBaseName = document.getElementById('SearchBaseName');\n\n    if (event.target.tagName !== \"INPUT\") {\n      SearchBaseName.value = '';\n    }\n  };\n\n  const stateConsoleButtonBase = [{\n    text: \"Обновить\",\n    name: 'update',\n    icon: \"fa fa-download fa-lg\",\n    onclick: () => {\n      dispatch(startUser_GET_RequestServer());\n    },\n    link: links.linkBase\n  }, {\n    text: \"Добавить новые данные\",\n    name: 'add',\n    icon: \"fa fa-plus fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Внести изменения\",\n    name: 'edit',\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить\",\n    name: 'delete',\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Сравнить\",\n    name: 'compare',\n    icon: \"fa fa-balance-scale\",\n    onclick: hendlerOpenCompareWindow,\n    link: links.linkBase\n  }, {\n    text: \"Добавить к сравнению\",\n    name: 'addCompare',\n    icon: \"fa fa-filter fa-lg\",\n    onclick: () => hendlerAddCompareData(),\n    link: links.linkBase\n  }];\n  const stateConsoleButtonCompare = [{\n    text: \"Внести изменения\",\n    name: 'edit',\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить из базы данных\",\n    name: 'delete',\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Убрать из сравнения\",\n    name: 'deleteList',\n    icon: \"fa fa-times-circle\",\n    onclick: hendlerDeleteContext,\n    data: focusData,\n    link: links.linkBase\n  }, {\n    text: \"Очистить список сравнений\",\n    name: 'clear',\n    icon: \"fa fa-minus-square-o\",\n    onclick: hendlerClearCompareArr,\n    link: links.linkBase\n  }, {\n    text: \"Назад\",\n    name: 'back',\n    icon: \"fa fa-share\",\n    onclick: hendlerCloseCompareWindow,\n    link: links.linkBase\n  }];\n  const stateHeaderBase = {\n    nameHeader: \"Список пользователей\",\n    stateTable: stateTable\n  };\n  const stateHeaderCompare = {\n    nameHeader: \"Сравнить избранное\",\n    stateTable: compareArr\n  };\n  const [stateConsoleButton, setStateConsoleButton] = useState(stateConsoleButtonBase);\n  const [stateHeader, setStateHeader] = useState(stateHeaderBase);\n\n  const haveDescription = dataStateConsoleButton => {\n    //добавляем подсказки на кнопки консоли\n    if (flagEmployDescription === true) {\n      let aboutDescription = {};\n      dataStateConsoleButton.map(obj => {\n        aboutDescription[obj.name] = [obj.text];\n      });\n      dispatch(addDescription(aboutDescription, arrDescription));\n    }\n\n    ;\n  }; //логика добавления контекстного меню через hoc\n\n\n  const TableListWithContextMenu = withContextMenuWindow(TableList, ContextMenuWindow, stateConsoleButton, \"ContextMenuWindow\");\n  useEffect(() => {\n    dispatch(startUser_GET_RequestServer());\n    document.addEventListener('click', hendlerClearSearchInput);\n    haveDescription(stateConsoleButton);\n    return () => {\n      document.removeEventListener('click', hendlerClearSearchInput);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__header__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButton, {\n    classnameWrapper: \"DataBase__header__console\",\n    stateConsoleButton: stateConsoleButton,\n    classnameDescription: \"DescriptionButton\",\n    tabindex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(HeaderDictionary, Object.assign({\n    classname: \"DataBase__header__header\",\n    onchangeSearch: event => hendlerSearchBase(event)\n  }, stateHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 25\n    }\n  })), flagOpenCompareWindow ? /*#__PURE__*/React.createElement(ButtonLinkSmallNotMouse, {\n    to: links.linkBase,\n    icon: \"fa fa-share\",\n    onclick: hendlerCloseCompareWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 29\n    }\n  }) : null), stateLoading ? /*#__PURE__*/React.createElement(AwaitLoading, {\n    classname: \"Loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(TableListWithContextMenu, {\n    classname: \"DataBase__table__container\",\n    classnameConsoleCountRow: \"ConsoleCountRow\",\n    classnameButtonConsoleCountPow: \"PersonalizeButton\",\n    stateTable: stateTable,\n    dataTable: dataTable,\n    visibleNameСolumns: visibleNameСolumns,\n    typeDataColumns: typeDataColumns,\n    func: focusNull,\n    CountRow: countRow,\n    focusUid: focusData.uid,\n    numberActivList: numberList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 23\n    }\n  }));\n}\n\nexport default connect()(User);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/User/User.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","ConsoleButton","TableList","HeaderDictionary","HeaderCompare","ContextMenuWindow","AwaitLoading","ButtonLinkSmallNotMouse","startUser_GET_RequestServer","saveDataStore","saveTypeRequest","saveNameWindow","changeNumberList","getDataPageRowTable","clearCompareArr","deleteDataCompareArr","addDescription","tablebodyBackgroundClear","changeAdressOpenTable","addDataCompareArr","rowFocus_Coffee","withContextMenuWindow","User","props","dispatch","stateLoading","state","stateFlagsBasisReport","loading","stateTable","stateBasisReport","dataTable","dataListTable","visibleNameСolumns","stateInputEditWindowUser","nameСolumnsTableList","typeDataColumns","typeData","countRow","countRowTable","numberList","focusData","compareArr","stateCompareUser","links","stateLinksUser","flagEmployDescription","stateFlagsAll","employDescriptionAll","arrDescription","stateDescription","flagOpenCompareWindow","setFlagOpenCompareWindow","focusNull","hendlerOpenWindow","nameWindow","typeRequest","hendlerDeleteContext","hendlerAddCompareData","console","log","hendlerOpenCompareWindow","linkCompare","setStateConsoleButton","stateConsoleButtonCompare","setStateHeader","stateHeaderCompare","hendlerClearCompareArr","linkBase","stateConsoleButtonBase","stateHeaderBase","hendlerCloseCompareWindow","hendlerSearchBase","event","preventDefault","target","value","num","numRowOnPage","map","obj","index","name","i","numList","undefined","tablebody","document","querySelector","children","style","background","focus","hendlerClearSearchInput","SearchBaseName","getElementById","tagName","text","icon","onclick","link","linkEditWindow","linkWindowConfirmDeleting","data","nameHeader","stateConsoleButton","stateHeader","haveDescription","dataStateConsoleButton","aboutDescription","TableListWithContextMenu","addEventListener","removeEventListener","uid"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\r\nimport TableList from '../../components/Table/TableListUser';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport HeaderCompare from '../../components/Header/HeaderCompare';\r\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\r\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\r\nimport ButtonLinkSmallNotMouse from '../../UserInterface/Buttons/Button/ButtonLinkSmallNotMouse';\r\n\r\n\r\nimport {\r\n    startUser_GET_RequestServer,\r\n} from '../../store/User/actions/actionUser';\r\nimport {\r\n    saveDataStore\r\n} from '../../store/BasisReport/actions/actionFocusData';\r\nimport {\r\n    saveTypeRequest,\r\n    saveNameWindow\r\n} from '../../store/User/actions/actionEditWindowUser';\r\nimport {\r\n    changeNumberList,\r\n    getDataPageRowTable\r\n} from '../../store/BasisReport/actions/actionsFlagsBasisReport';\r\nimport {\r\n    clearCompareArr,\r\n    deleteDataCompareArr\r\n} from '../../store/User/actions/actionsCompareUser';\r\n\r\nimport { addDescription } from \"../../store/Description/actionsDescription\";\r\n\r\nimport { tablebodyBackgroundClear } from '../../functions/tablebodyBackgroundClear';\r\n\r\nimport { changeAdressOpenTable } from '../../store/User/actions/actionsLinksUser';\r\n\r\nimport { addDataCompareArr } from '../../store/User/actions/actionsCompareUser';\r\n\r\nimport { rowFocus_Coffee } from '../../styles/const_color';\r\n\r\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\r\n\r\n\r\nfunction User(props) {\r\n\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const stateLoading = useSelector(state => state.stateFlagsBasisReport.loading);\r\n\r\n    const stateTable = useSelector(state => state.stateBasisReport); //ВСЯ база\r\n\r\n    const dataTable = useSelector(state => state.stateFlagsBasisReport.dataListTable); // отображаемый лист\r\n\r\n    const visibleNameСolumns = useSelector(state => state.stateInputEditWindowUser.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\r\n\r\n    const typeDataColumns = useSelector(state => state.stateInputEditWindowUser.typeData); // тип данных значений, заполняющих колонки\r\n  \r\n    const countRow = useSelector(state => state.stateFlagsBasisReport.countRowTable); // количество строк на отображаемой странице\r\n\r\n    const numberList = useSelector(state => state.stateFlagsBasisReport.numberList); //номер отображаемого листа\r\n\r\n    const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\r\n\r\n    const compareArr = useSelector(state => state.stateCompareUser); // массив строк, избранных для сравнения\r\n\r\n    const links = useSelector(state => state.stateLinksUser); //список ссылок для переходов между окнами\r\n\r\n    const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll) // разрешен ли пользователем показ подсказок\r\n\r\n    const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга)\r\n\r\n    const [flagOpenCompareWindow, setFlagOpenCompareWindow] = useState(false);\r\n\r\n    const focusNull = () => {\r\n        tablebodyBackgroundClear();\r\n        dispatch(saveDataStore({\r\n                                    \"uid\": \"\",\r\n                                    \"login\": \"\",\r\n                                    \"name\": \"\",\r\n                                    \"password\": \"\",\r\n                                    \"isDeleted\": false,\r\n                                    \"isSuperUser\": false,\r\n                                    \"docInfo\": [],\r\n                                    \"projectAuthorU\": [],\r\n                                    \"projectUpdaterU\": [],\r\n                                    \"userProjects\": []\r\n                            }));\r\n    }\r\n\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n\r\n    const hendlerDeleteContext = () => {\r\n        dispatch(deleteDataCompareArr(focusData, compareArr)); // удалить из массива сравнений\r\n        //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\r\n        focusNull();\r\n    }\r\n    const hendlerAddCompareData = () => {\r\n        dispatch(addDataCompareArr(focusData, compareArr));\r\n        console.log('добавлено в сравнение ', focusData)\r\n    }\r\n\r\n    const hendlerOpenCompareWindow = () => {\r\n        dispatch(addDataCompareArr(focusData, compareArr)); //добавить выделенную строку в сравнение\r\n        focusNull();\r\n        dispatch(changeAdressOpenTable(links.linkCompare)); // !!!!!!!\r\n        setFlagOpenCompareWindow(true); //!!!!!\r\n        setStateConsoleButton(stateConsoleButtonCompare); //!!!!!!!\r\n        setStateHeader(stateHeaderCompare); //!!!!!\r\n    }\r\n    const hendlerClearCompareArr = () => {\r\n        dispatch(clearCompareArr());\r\n        focusNull();\r\n        // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n        dispatch(changeAdressOpenTable(links.linkBase)); //!!!!!!\r\n        setFlagOpenCompareWindow(false); //!!!!!\r\n        setStateConsoleButton(stateConsoleButtonBase); //!!!!!!!\r\n        setStateHeader(stateHeaderBase); //!!!!!\r\n    }\r\n    const hendlerCloseCompareWindow = () => {\r\n        //закрываем окно и поэтому обнуляем хранение фокуса:\r\n        focusNull();\r\n        // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n        dispatch(changeAdressOpenTable(links.linkBase)); //!!!!!!\r\n        setFlagOpenCompareWindow(false); //!!!!!\r\n        setStateConsoleButton(stateConsoleButtonBase); //!!!!!!!\r\n        setStateHeader(stateHeaderBase); //!!!!!\r\n    }\r\n\r\n    const hendlerSearchBase = (event) => {\r\n        event.preventDefault();\r\n        if (event.target.value === '') { return }; //если пусто, выходим\r\n\r\n        let num; // номер выбранного объекта в массиве\r\n        let numRowOnPage; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\r\n    \r\n        stateTable.map((obj, index) => {\r\n\r\n            if (obj.name === event.target.value) {\r\n                num = index + 1;\r\n                numRowOnPage = index +1;\r\n                dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\r\n            }\r\n        });\r\n            //поиск номера страницы\r\n            let i = countRow;\r\n            let numList = 1;\r\n            if (num === undefined) { return }; //если пусто, выходим\r\n\r\n            while (i < num) {\r\n                i = i + countRow;\r\n                numRowOnPage = numRowOnPage - countRow;\r\n                numList++;\r\n        }\r\n\r\n        dispatch(changeNumberList(numList)); //сохраняем номер\r\n        dispatch(getDataPageRowTable(stateTable, countRow, numList));// загружаем выбранный лист\r\n\r\n        tablebodyBackgroundClear();\r\n\r\n        let tablebody = document.querySelector('tbody');\r\n        tablebody.children[numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\r\n        tablebody.children[numRowOnPage - 1].children[1].focus();\r\n    }\r\n\r\n\r\n    const hendlerClearSearchInput = event => {\r\n        const SearchBaseName = document.getElementById('SearchBaseName');\r\n        if (event.target.tagName !== \"INPUT\") {\r\n             SearchBaseName.value = '';\r\n         }\r\n    }\r\n\r\n\r\n    const stateConsoleButtonBase = [\r\n        {\r\n            text: \"Обновить\",\r\n            name: 'update',\r\n            icon: \"fa fa-download fa-lg\",\r\n            onclick: () => { dispatch(startUser_GET_RequestServer()) },\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Добавить новые данные\",\r\n            name: 'add',\r\n            icon: \"fa fa-plus fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Внести изменения\",\r\n            name: 'edit',\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Удалить\",\r\n            name: 'delete',\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Сравнить\",\r\n            name: 'compare',\r\n            icon: \"fa fa-balance-scale\",\r\n            onclick: hendlerOpenCompareWindow,\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Добавить к сравнению\",\r\n            name: 'addCompare',\r\n            icon: \"fa fa-filter fa-lg\",\r\n            onclick: () => hendlerAddCompareData(),\r\n            link: links.linkBase\r\n        }\r\n    ];  \r\n\r\n    const stateConsoleButtonCompare = [\r\n\r\n        {\r\n            text: \"Внести изменения\",\r\n            name: 'edit',\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Удалить из базы данных\",\r\n            name: 'delete',\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Убрать из сравнения\",\r\n            name: 'deleteList',\r\n            icon: \"fa fa-times-circle\",\r\n            onclick: hendlerDeleteContext,\r\n            data: focusData,\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Очистить список сравнений\",\r\n            name: 'clear',\r\n            icon: \"fa fa-minus-square-o\",\r\n            onclick: hendlerClearCompareArr,\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Назад\",\r\n            name: 'back',\r\n            icon: \"fa fa-share\",\r\n            onclick: hendlerCloseCompareWindow,\r\n            link: links.linkBase\r\n        }\r\n    ];\r\n\r\n    const stateHeaderBase = {\r\n        nameHeader: \"Список пользователей\",\r\n        stateTable: stateTable\r\n    }\r\n    const stateHeaderCompare = {\r\n        nameHeader: \"Сравнить избранное\",\r\n        stateTable: compareArr\r\n    }\r\n\r\n    const [stateConsoleButton, setStateConsoleButton] = useState(stateConsoleButtonBase);\r\n    const [stateHeader, setStateHeader] = useState(stateHeaderBase);\r\n\r\n    const haveDescription = (dataStateConsoleButton) => {\r\n        //добавляем подсказки на кнопки консоли\r\n        if (flagEmployDescription === true) {\r\n            let aboutDescription = {};\r\n            dataStateConsoleButton.map((obj) => {\r\n                aboutDescription[obj.name] = [obj.text];\r\n            });\r\n            dispatch(addDescription(aboutDescription, arrDescription));\r\n        };\r\n    }\r\n\r\n    //логика добавления контекстного меню через hoc\r\n    const TableListWithContextMenu = withContextMenuWindow(TableList, ContextMenuWindow, stateConsoleButton, \"ContextMenuWindow\");\r\n\r\n    useEffect(() => {\r\n\r\n     dispatch(startUser_GET_RequestServer());\r\n\r\n     document.addEventListener('click', hendlerClearSearchInput);\r\n\r\n     haveDescription(stateConsoleButton);\r\n\r\n     return () => {\r\n         document.removeEventListener('click', hendlerClearSearchInput);\r\n     }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"DataBase__container\">\r\n \r\n                <div className=\"DataBase__header__container\">\r\n                        <ConsoleButton\r\n                            classnameWrapper=\"DataBase__header__console\"\r\n                            stateConsoleButton={stateConsoleButton}\r\n                            classnameDescription='DescriptionButton'\r\n                            tabindex=\"-1\"\r\n                            />\r\n\r\n                        <HeaderDictionary\r\n                                classname=\"DataBase__header__header\"\r\n                                onchangeSearch={(event) => hendlerSearchBase(event)}\r\n                                {...stateHeader}\r\n \r\n                            />\r\n\r\n                    {\r\n                        flagOpenCompareWindow ?\r\n                            <ButtonLinkSmallNotMouse\r\n                                to={links.linkBase}\r\n                                icon=\"fa fa-share\"\r\n                                onclick={hendlerCloseCompareWindow}\r\n                            />\r\n                            : null\r\n                    }\r\n                    \r\n                </div>\r\n            {\r\n                stateLoading ?\r\n                    <AwaitLoading\r\n                        classname=\"Loading\"\r\n                    />\r\n                    : <TableListWithContextMenu\r\n                                classname=\"DataBase__table__container\"\r\n                                classnameConsoleCountRow='ConsoleCountRow'\r\n                                classnameButtonConsoleCountPow=\"PersonalizeButton\"\r\n                                stateTable={stateTable}\r\n                                dataTable={dataTable}\r\n                                visibleNameСolumns={visibleNameСolumns}\r\n                                typeDataColumns={typeDataColumns}\r\n\r\n                                func={focusNull}\r\n\r\n                                CountRow={countRow}\r\n                                focusUid={focusData.uid}\r\n                                numberActivList={numberList}\r\n                        /> \r\n                }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default connect()(User)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}