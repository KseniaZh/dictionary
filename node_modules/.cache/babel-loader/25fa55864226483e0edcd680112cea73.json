{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\Basis\\\\Basis.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport TableList from '../../components/Table/TableList';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\nimport { saveDataStore } from '../../store/BasisReport/actions/actionFocusData';\nimport { changeNumberList, getDataPageRowTable, sortingList, changeFlagOpenInputFilter, changeCountRowTable, changeActivArrNumberPagesFooterTable } from '../../store/BasisReport/actions/actionsFlagsBasisReport';\nimport { addDescription } from \"../../store/Description/actionsDescription\";\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\n\nfunction Basis(props) {\n  const dispatch = useDispatch();\n  const stateLoading = useSelector(state => state.stateFlagsBasisReport.loading);\n  const stateTable = useSelector(state => state.stateBasisReport); //ВСЯ база\n\n  const dataTable = useSelector(state => state.stateFlagsBasisReport.dataListTable); // отображаемый лист\n\n  const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\n\n  const countRow = useSelector(state => state.stateFlagsBasisReport.countRowTable); // количество строк на отображаемой странице\n\n  const numberList = useSelector(state => state.stateFlagsBasisReport.numberList); //номер отображаемого листа\n\n  const flagOpenFilter = useSelector(state => state.stateFlagsBasisReport.flagOpenFilter); //открыть окно фильтра данных таблицы\n\n  const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll); // разрешен ли пользователем показ подсказок\n\n  const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга\n  //переключение цветового решения приложения\n\n  const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\n  const staleSelect = useSelector(state => state.stateStyle.styleSelect);\n\n  const hendlerSearchBase = event => {\n    event.preventDefault();\n\n    if (event.target.value === '') {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    let num; // номер выбранного объекта в массиве\n\n    stateTable.map((obj, index) => {\n      if (obj[props.searchKey] === event.target.value) {\n        num = index + 1;\n        dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\n      }\n    }); //поиск номера страницы\n\n    let i = Number(countRow);\n    let numList = 1;\n\n    if (num === undefined) {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    while (i < num) {\n      i = i + Number(countRow);\n      numList++;\n    }\n\n    dispatch(changeNumberList(numList)); //сохраняем номер\n\n    dispatch(getDataPageRowTable(stateTable, countRow, numList)); // загружаем выбранный лист\n  };\n\n  const hendlerOpenFilter = () => {\n    dispatch(changeFlagOpenInputFilter(true));\n    props.funcStartGetRequestServer();\n    dispatch(changeCountRowTable(stateTable.length));\n  };\n\n  const hendlerCloseFilter = () => {\n    dispatch(changeFlagOpenInputFilter(false));\n    props.funcStartGetRequestServer();\n  };\n\n  const [valueFilterBase, setValueFilterBase] = useState('');\n\n  const hendlerFilterBase = event => {\n    event.preventDefault();\n\n    if (event.target.value === '') {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    setValueFilterBase(event.target.value); //текст в input\n\n    const stateTableFilter = stateTable.filter(obj => {\n      let a = obj[props.searchKey].toUpperCase(); // имя из state\n\n      let b = event.target.value.toUpperCase(); // значение input\n\n      return a.indexOf(b) == 0;\n    });\n    console.log('result filter ', stateTableFilter);\n    dispatch(sortingList(stateTableFilter)); //dispatch(changeActivArrNumberPagesFooterTable(1, stateTableFilter.length, dataTable, stateTableFilter));\n  };\n\n  const hendlerClearSearchInput = event => {\n    const SearchBaseName = document.getElementById('SearchBaseName');\n\n    if (event.target.tagName !== \"INPUT\") {\n      SearchBaseName.value = '';\n    }\n  };\n\n  const haveDescription = dataStateConsoleButton => {\n    //добавляем подсказки на кнопки консоли\n    if (flagEmployDescription === true) {\n      let aboutDescription = {};\n      dataStateConsoleButton.map(obj => {\n        aboutDescription[obj.name] = [obj.text];\n      });\n      dispatch(addDescription(aboutDescription, arrDescription));\n    }\n\n    ;\n  }; //логика добавления контекстного меню через hoc\n\n\n  const TableListWithContextMenu = withContextMenuWindow(TableList, ContextMenuWindow, props.stateConsoleButton, stateStylesAll[staleSelect].contextMenuWindow);\n  useEffect(() => {\n    props.funcStartGetRequestServer();\n    document.addEventListener('click', hendlerClearSearchInput);\n    haveDescription(props.stateConsoleButton);\n    return () => {\n      document.removeEventListener('click', hendlerClearSearchInput);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: stateStylesAll[staleSelect].dataBaseContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classnameHeaderConsole: stateStylesAll[staleSelect].dataBaseHeaderConsole,\n    classnameSearchDatalis: stateStylesAll[staleSelect].searchInputDatalisHeaderDataBase,\n    classnameDescription: stateStylesAll[staleSelect].descriptionButton,\n    stateConsoleButton: props.stateConsoleButton,\n    onchangeSearch: event => hendlerSearchBase(event),\n    onchangeFilterBase: hendlerFilterBase,\n    onclickOpenFilter: hendlerOpenFilter,\n    onclickCloseFilter: hendlerCloseFilter,\n    valueFilterBase: valueFilterBase,\n    nameHeader: props.nameHeader,\n    stateTable: stateTable,\n    searchKey: props.searchKey,\n    flagOpenFilter: flagOpenFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }), stateLoading ? /*#__PURE__*/React.createElement(AwaitLoading, {\n    classname: stateStylesAll[staleSelect].loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(TableListWithContextMenu, {\n    classnameConsoleCountRow: stateStylesAll[staleSelect].consoleCountRow,\n    classnameButtonConsoleCountPow: stateStylesAll[staleSelect].personalizeButton,\n    classnameRowTable: stateStylesAll[staleSelect].userRowTable,\n    classnameCheckbox: stateStylesAll[staleSelect].beautifulCheckboxTable,\n    classnameDescription: stateStylesAll[staleSelect].descriptionButton,\n    colorRowTableBackground: stateStylesAll[staleSelect].rowTableBackground,\n    colorFocusRowBackground: stateStylesAll[staleSelect].focusRowBackground,\n    stateTable: stateTable,\n    dataTable: dataTable,\n    visibleNameСolumns: props.visibleNameСolumns,\n    searchСolumnsName: props.searchСolumnsName,\n    sortСolumns: props.sortСolumns,\n    typeDataColumns: props.typeDataColumns,\n    flagOpenCompareWindow: props.flagOpenCompareWindow,\n    flagOpenFilter: flagOpenFilter,\n    compareArrUid: props.compareArrUid,\n    focusNull: props.focusNull,\n    onclickButtonRowClickAddCompareData: props.onclickButtonRowClickAddCompareData,\n    onclickDelete: props.hendlerButtonRowClickDeleteCompareData,\n    CountRow: countRow,\n    focusData: focusData,\n    numberActivList: numberList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 23\n    }\n  }));\n}\n\nexport default connect()(Basis);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/Basis/Basis.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","TableList","HeaderDictionary","ContextMenuWindow","AwaitLoading","saveDataStore","changeNumberList","getDataPageRowTable","sortingList","changeFlagOpenInputFilter","changeCountRowTable","changeActivArrNumberPagesFooterTable","addDescription","withContextMenuWindow","Basis","props","dispatch","stateLoading","state","stateFlagsBasisReport","loading","stateTable","stateBasisReport","dataTable","dataListTable","focusData","countRow","countRowTable","numberList","flagOpenFilter","flagEmployDescription","stateFlagsAll","employDescriptionAll","arrDescription","stateDescription","stateStylesAll","stateStyle","stylesAll","staleSelect","styleSelect","hendlerSearchBase","event","preventDefault","target","value","num","map","obj","index","searchKey","i","Number","numList","undefined","hendlerOpenFilter","funcStartGetRequestServer","length","hendlerCloseFilter","valueFilterBase","setValueFilterBase","hendlerFilterBase","stateTableFilter","filter","a","toUpperCase","b","indexOf","console","log","hendlerClearSearchInput","SearchBaseName","document","getElementById","tagName","haveDescription","dataStateConsoleButton","aboutDescription","name","text","TableListWithContextMenu","stateConsoleButton","contextMenuWindow","addEventListener","removeEventListener","dataBaseContainer","dataBaseHeaderConsole","searchInputDatalisHeaderDataBase","descriptionButton","nameHeader","consoleCountRow","personalizeButton","userRowTable","beautifulCheckboxTable","rowTableBackground","focusRowBackground","visibleNameСolumns","searchСolumnsName","sortСolumns","typeDataColumns","flagOpenCompareWindow","compareArrUid","focusNull","onclickButtonRowClickAddCompareData","hendlerButtonRowClickDeleteCompareData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport TableList from '../../components/Table/TableList';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\r\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\r\n\r\nimport { saveDataStore } from '../../store/BasisReport/actions/actionFocusData';\r\nimport {\r\n    changeNumberList,\r\n    getDataPageRowTable,\r\n    sortingList,\r\n    changeFlagOpenInputFilter,\r\n    changeCountRowTable,\r\n    changeActivArrNumberPagesFooterTable\r\n} from '../../store/BasisReport/actions/actionsFlagsBasisReport';\r\nimport { addDescription } from \"../../store/Description/actionsDescription\";\r\n\r\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\r\n\r\n\r\nfunction Basis(props) {\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const stateLoading = useSelector(state => state.stateFlagsBasisReport.loading);\r\n\r\n    const stateTable = useSelector(state => state.stateBasisReport); //ВСЯ база\r\n\r\n    const dataTable = useSelector(state => state.stateFlagsBasisReport.dataListTable); // отображаемый лист\r\n\r\n    const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\r\n  \r\n    const countRow = useSelector(state => state.stateFlagsBasisReport.countRowTable); // количество строк на отображаемой странице\r\n\r\n    const numberList = useSelector(state => state.stateFlagsBasisReport.numberList); //номер отображаемого листа\r\n\r\n    const flagOpenFilter = useSelector(state => state.stateFlagsBasisReport.flagOpenFilter); //открыть окно фильтра данных таблицы\r\n\r\n    const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll) // разрешен ли пользователем показ подсказок\r\n\r\n    const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга\r\n\r\n    //переключение цветового решения приложения\r\n    const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\r\n    const staleSelect = useSelector(state => state.stateStyle.styleSelect);\r\n\r\n\r\n    const hendlerSearchBase = (event) => {\r\n        event.preventDefault();\r\n        if (event.target.value === '') { return }; //если пусто, выходим\r\n\r\n        let num; // номер выбранного объекта в массиве\r\n    \r\n        stateTable.map((obj, index) => {\r\n\r\n            if (obj[props.searchKey] === event.target.value) {\r\n                num = index + 1;\r\n                dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\r\n            }\r\n        });\r\n            //поиск номера страницы\r\n            let i = Number(countRow);\r\n            let numList = 1;\r\n            if (num === undefined) { return }; //если пусто, выходим\r\n\r\n            while (i < num) {\r\n                i = i + Number(countRow);\r\n                numList++;\r\n        }\r\n\r\n        dispatch(changeNumberList(numList)); //сохраняем номер\r\n        dispatch(getDataPageRowTable(stateTable, countRow, numList));// загружаем выбранный лист\r\n    }\r\n\r\n    const hendlerOpenFilter = () => {\r\n        dispatch(changeFlagOpenInputFilter(true));\r\n        props.funcStartGetRequestServer();\r\n        dispatch(changeCountRowTable(stateTable.length));\r\n    };\r\n\r\n    const hendlerCloseFilter = () => {\r\n        dispatch(changeFlagOpenInputFilter(false));\r\n        props.funcStartGetRequestServer();\r\n    };\r\n\r\n    const [valueFilterBase, setValueFilterBase] = useState('');\r\n\r\n    const hendlerFilterBase = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (event.target.value === '') { return }; //если пусто, выходим\r\n        setValueFilterBase(event.target.value); //текст в input\r\n\r\n        const stateTableFilter = stateTable.filter(obj => {\r\n            let a = obj[props.searchKey].toUpperCase(); // имя из state\r\n            let b = event.target.value.toUpperCase(); // значение input\r\n           return a.indexOf(b) == 0\r\n        })\r\n\r\n        console.log('result filter ', stateTableFilter);\r\n        dispatch(sortingList(stateTableFilter));\r\n        //dispatch(changeActivArrNumberPagesFooterTable(1, stateTableFilter.length, dataTable, stateTableFilter));\r\n    }\r\n\r\n    const hendlerClearSearchInput = event => {\r\n        const SearchBaseName = document.getElementById('SearchBaseName');\r\n        if (event.target.tagName !== \"INPUT\") {\r\n            SearchBaseName.value = '';\r\n        }\r\n    }\r\n\r\n    const haveDescription = (dataStateConsoleButton) => {\r\n        //добавляем подсказки на кнопки консоли\r\n        if (flagEmployDescription === true) {\r\n            let aboutDescription = {};\r\n            dataStateConsoleButton.map((obj) => {\r\n                aboutDescription[obj.name] = [obj.text];\r\n            });\r\n            dispatch(addDescription(aboutDescription, arrDescription));\r\n        };\r\n    }\r\n\r\n    //логика добавления контекстного меню через hoc\r\n    const TableListWithContextMenu = withContextMenuWindow(TableList, ContextMenuWindow, props.stateConsoleButton, stateStylesAll[staleSelect].contextMenuWindow);\r\n\r\n    useEffect(() => {\r\n\r\n    props.funcStartGetRequestServer();\r\n\r\n     document.addEventListener('click', hendlerClearSearchInput);\r\n\r\n     haveDescription(props.stateConsoleButton);\r\n\r\n     return () => {\r\n         document.removeEventListener('click', hendlerClearSearchInput);\r\n     }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={stateStylesAll[staleSelect].dataBaseContainer}>\r\n \r\n            <HeaderDictionary\r\n                    classnameHeaderConsole={stateStylesAll[staleSelect].dataBaseHeaderConsole}\r\n                    classnameSearchDatalis={stateStylesAll[staleSelect].searchInputDatalisHeaderDataBase}\r\n                    classnameDescription={stateStylesAll[staleSelect].descriptionButton}\r\n                    stateConsoleButton={props.stateConsoleButton}\r\n                    onchangeSearch={(event) => hendlerSearchBase(event)}\r\n                    onchangeFilterBase={hendlerFilterBase}\r\n                    onclickOpenFilter={hendlerOpenFilter}\r\n                    onclickCloseFilter={hendlerCloseFilter}\r\n                    valueFilterBase={valueFilterBase}\r\n                    nameHeader={props.nameHeader}\r\n                    stateTable={stateTable}\r\n                    searchKey={props.searchKey}\r\n                    flagOpenFilter={flagOpenFilter}\r\n                />    \r\n                    \r\n            {\r\n                stateLoading ?\r\n                    <AwaitLoading\r\n                        classname={stateStylesAll[staleSelect].loading}\r\n                    />\r\n                    : <TableListWithContextMenu\r\n                            classnameConsoleCountRow={stateStylesAll[staleSelect].consoleCountRow}\r\n                            classnameButtonConsoleCountPow={stateStylesAll[staleSelect].personalizeButton}\r\n                            classnameRowTable={stateStylesAll[staleSelect].userRowTable}\r\n                            classnameCheckbox={stateStylesAll[staleSelect].beautifulCheckboxTable}\r\n                            classnameDescription={stateStylesAll[staleSelect].descriptionButton}\r\n                            colorRowTableBackground={stateStylesAll[staleSelect].rowTableBackground}\r\n                            colorFocusRowBackground={stateStylesAll[staleSelect].focusRowBackground}\r\n\r\n                            stateTable={stateTable}\r\n                            dataTable={dataTable}\r\n                            visibleNameСolumns={props.visibleNameСolumns}\r\n                            searchСolumnsName={props.searchСolumnsName}\r\n                            sortСolumns={props.sortСolumns}\r\n                            typeDataColumns={props.typeDataColumns}\r\n                            flagOpenCompareWindow={props.flagOpenCompareWindow}\r\n                            flagOpenFilter={flagOpenFilter}\r\n                            compareArrUid={props.compareArrUid}\r\n\r\n                            focusNull={props.focusNull}\r\n                            onclickButtonRowClickAddCompareData={props.onclickButtonRowClickAddCompareData}\r\n                            onclickDelete={props.hendlerButtonRowClickDeleteCompareData}\r\n\r\n                            CountRow={countRow}\r\n                            focusData={focusData}\r\n                            numberActivList={numberList}\r\n                        /> \r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(Basis)"]},"metadata":{},"sourceType":"module"}