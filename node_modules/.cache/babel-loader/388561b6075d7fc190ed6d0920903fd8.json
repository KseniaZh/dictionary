{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\EltypeClass.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport \"../../styles/colorCoffee/const_color_Coffee.scss\";\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\nimport TableList from '../../components/Table/TableListEltypeClass';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\nimport { startGetRequestServerEltypeClass, saveDataStore, saveTypeRequest, saveNameWindow } from '../../store/EltypeClass/actions/actionEltypeClass';\nimport { changeCountRowTable, getCounterPagesTable, changeNumberList, getDataPageRowTable } from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\nimport { linkEditWindowEltypeClass } from '../Navigation/Main';\nimport { linkWindowConfirmDeleting } from '../Navigation/Main';\n\nfunction EltypeClass(props) {\n  const linkAddressWindowEdit = linkEditWindowEltypeClass;\n  const linkAddressWindowDelete = linkWindowConfirmDeleting;\n  const dispatch = useDispatch();\n  const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\n  const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\n\n  const dataTable = useSelector(state => state.stateFlagsEltypeClass.dataListTable); // отображаемый лист\n\n  const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // общее количество листов в таблице\n\n  const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\n\n  const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\n\n  const focusData = useSelector(state => state.createDataEltypeClass.stateData); // запомнить данные выбранной строки\n\n  const tablebodyBackgroundClear = () => {\n    let tablebody = document.getElementById('tablebody');\n\n    for (let child of tablebody.children) {\n      child.style.background = '$table-background'; //убираем цвет ранее выбранной строки\n    }\n\n    ;\n  };\n\n  const focusNull = () => {\n    tablebodyBackgroundClear();\n    dispatch(saveDataStore({\n      uid: \"\",\n      name: \"\",\n      isDeleted: false,\n      isTemplate: false\n    }));\n  };\n\n  const handlerTableRowUID = (event, data) => {\n    //фокус на строку\n    event.preventDefault();\n    let tr = event.target.parentElement; //строка выбранной ячейки\n\n    tr.children[1].focus();\n    tablebodyBackgroundClear();\n    tr.style.background = 'blue';\n    stateTable.map((obj, index) => {\n      if (obj.uid === data) {\n        dispatch(saveDataStore(obj)); // сохранить в хранилище\n      }\n    });\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const HendlerOnMouseover = () => {};\n\n  const HendlerOnMouseLeave = () => {};\n\n  const [flagCountRow, setFlagCoutnRow] = useState(false);\n\n  const hendlerInputOpen = () => {\n    setFlagCoutnRow(true);\n  };\n\n  const hendlerChangeCountRow = event => {\n    event.preventDefault();\n    dispatch(changeCountRowTable(event.target.value));\n    dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\n\n    if (numberList != 1) {\n      focusNull();\n    }\n\n    ; // при  на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\n  };\n\n  const hendlerInputSave = () => {\n    setFlagCoutnRow(false);\n    dispatch(getCounterPagesTable(stateTable, countRow));\n    dispatch(getDataPageRowTable(stateTable, countRow, numberList));\n  }; //после выбора страницы приходит ее номер\n  // в хранилище собираем новую страницу\n  // в хранилище сохраняем номер страницы\n\n\n  const hendlerOpenPagesTable = num => {\n    dispatch(getDataPageRowTable(stateTable, countRow, num));\n    dispatch(changeNumberList(num));\n    focusNull(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\n  };\n\n  useEffect(() => {\n    dispatch(startGetRequestServerEltypeClass());\n  }, []);\n  const stateConsoleButton = [{\n    text: \"Обновить\",\n    icon: \"fa fa-download fa-lg\",\n    onclick: () => {\n      dispatch(startGetRequestServerEltypeClass());\n    }\n  }, {\n    text: \"Добавить новые данные\",\n    icon: \"fa fa-plus fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\")\n  }, {\n    text: \"Внести изменения\",\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\")\n  }, {\n    text: \"Удалить\",\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {}\n  }, {\n    text: \"Показать только активные\",\n    icon: \"fa fa-filter fa-lg\",\n    onclick: () => console.log('click')\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__header__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButton, {\n    classnameWrapper: \"DataBase__header__console\",\n    linkWindowEdit: linkAddressWindowEdit,\n    linkWindowConfirmDeleting: linkAddressWindowDelete,\n    stateConsoleButton: stateConsoleButton,\n    onmouseover: HendlerOnMouseover,\n    onmouseleave: HendlerOnMouseLeave,\n    tabindex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classname: \"DataBase__header__header\",\n    nameHeader: \"\\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 21\n    }\n  })), stateLoading ? /*#__PURE__*/React.createElement(AwaitLoading, {\n    classname: \"Loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(TableList, {\n    classname: \"DataBase__table__container\",\n    classnameConsoleCountRow: \"ConsoleCountRow\",\n    classnameButtonConsoleCountPow: \"PersonalizeButton\",\n    columnName: Object.keys(stateTable[0]),\n    dataTable: dataTable,\n    onclick: (event, data) => handlerTableRowUID(event, data),\n    onclickInputOpen: hendlerInputOpen,\n    onclickInputSave: hendlerInputSave,\n    onclickOpenPagesTable: numButton => hendlerOpenPagesTable(numButton),\n    flagCountRow: flagCountRow,\n    onchange: event => hendlerChangeCountRow(event),\n    CountRow: countRow,\n    counterPages: counterPages,\n    focusUid: focusData.uid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 25\n    }\n  }));\n}\n\nexport default connect()(EltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/EltypeClass.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","ConsoleButton","TableList","HeaderDictionary","AwaitLoading","startGetRequestServerEltypeClass","saveDataStore","saveTypeRequest","saveNameWindow","changeCountRowTable","getCounterPagesTable","changeNumberList","getDataPageRowTable","linkEditWindowEltypeClass","linkWindowConfirmDeleting","EltypeClass","props","linkAddressWindowEdit","linkAddressWindowDelete","dispatch","stateLoading","state","stateFlagsEltypeClass","loading","stateTable","stateTableEltypeClass","dataTable","dataListTable","counterPages","counterPagesTable","countRow","countRowTable","numberList","focusData","createDataEltypeClass","stateData","tablebodyBackgroundClear","tablebody","document","getElementById","child","children","style","background","focusNull","uid","name","isDeleted","isTemplate","handlerTableRowUID","event","data","preventDefault","tr","target","parentElement","focus","map","obj","index","hendlerOpenWindow","nameWindow","typeRequest","HendlerOnMouseover","HendlerOnMouseLeave","flagCountRow","setFlagCoutnRow","hendlerInputOpen","hendlerChangeCountRow","value","hendlerInputSave","hendlerOpenPagesTable","num","stateConsoleButton","text","icon","onclick","console","log","Object","keys","numButton"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport \"../../styles/colorCoffee/const_color_Coffee.scss\";\r\n\r\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\r\nimport TableList from '../../components/Table/TableListEltypeClass';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\r\n\r\nimport {\r\n        startGetRequestServerEltypeClass,\r\n        saveDataStore,\r\n        saveTypeRequest,\r\n        saveNameWindow,\r\n } from '../../store/EltypeClass/actions/actionEltypeClass';\r\n\r\nimport {\r\n    changeCountRowTable,\r\n    getCounterPagesTable,\r\n    changeNumberList,\r\n    getDataPageRowTable\r\n} from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\n\r\nimport { linkEditWindowEltypeClass } from '../Navigation/Main';\r\nimport { linkWindowConfirmDeleting } from '../Navigation/Main';\r\n\r\n\r\n\r\nfunction EltypeClass(props) {\r\n\r\n    const linkAddressWindowEdit = linkEditWindowEltypeClass;\r\n    const linkAddressWindowDelete = linkWindowConfirmDeleting;\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\r\n\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\r\n\r\n    const dataTable = useSelector(state => state.stateFlagsEltypeClass.dataListTable); // отображаемый лист\r\n\r\n    const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // общее количество листов в таблице\r\n\r\n    const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\r\n\r\n    const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\r\n\r\n    const focusData = useSelector(state => state.createDataEltypeClass.stateData); // запомнить данные выбранной строки\r\n\r\n\r\n    const tablebodyBackgroundClear = () => {\r\n        let tablebody = document.getElementById('tablebody');\r\n        for (let child of tablebody.children) {\r\n            child.style.background = '$table-background';//убираем цвет ранее выбранной строки\r\n        };\r\n    }\r\n    const focusNull = () => {\r\n        tablebodyBackgroundClear();\r\n        dispatch(saveDataStore({\r\n                                uid: \"\",\r\n                                name: \"\",\r\n                                isDeleted: false,\r\n                                isTemplate: false\r\n                            }));\r\n    }\r\n\r\n    const handlerTableRowUID = (event, data)=>{ //фокус на строку\r\n        event.preventDefault();\r\n\r\n        let tr = event.target.parentElement; //строка выбранной ячейки\r\n        tr.children[1].focus();\r\n        tablebodyBackgroundClear();\r\n        tr.style.background = 'blue';\r\n\r\n        stateTable.map( (obj, index) => {\r\n            if (obj.uid === data){\r\n                dispatch(saveDataStore(obj)); // сохранить в хранилище\r\n            }\r\n        })\r\n    }\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n    const HendlerOnMouseover = () => {\r\n\r\n    }\r\n    const HendlerOnMouseLeave = () => {\r\n\r\n    }\r\n\r\n    const [flagCountRow, setFlagCoutnRow] = useState(false);\r\n\r\n\r\n    const hendlerInputOpen = () => {\r\n        setFlagCoutnRow(true);\r\n    }\r\n\r\n    const hendlerChangeCountRow = (event) => {\r\n            event.preventDefault();\r\n            dispatch(changeCountRowTable(event.target.value));\r\n            dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\r\n        if (numberList != 1) {\r\n                  focusNull();\r\n              };\r\n         // при  на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\r\n    }\r\n\r\n    const hendlerInputSave = () => {\r\n\r\n        setFlagCoutnRow(false);\r\n        dispatch(getCounterPagesTable(stateTable, countRow));\r\n        dispatch(getDataPageRowTable(stateTable, countRow, numberList));\r\n    }\r\n    //после выбора страницы приходит ее номер\r\n    // в хранилище собираем новую страницу\r\n    // в хранилище сохраняем номер страницы\r\n    const hendlerOpenPagesTable = (num) => {\r\n\r\n        dispatch(getDataPageRowTable(stateTable, countRow, num));\r\n        dispatch(changeNumberList(num));\r\n        focusNull(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\r\n    }\r\n\r\n\r\n useEffect(() => {\r\n     dispatch(startGetRequestServerEltypeClass());\r\n\r\n    }, [])\r\n\r\n\r\n    const stateConsoleButton = [\r\n        {\r\n            text: \"Обновить\",\r\n            icon: \"fa fa-download fa-lg\",\r\n            onclick: () => { dispatch(startGetRequestServerEltypeClass()) }\r\n            },\r\n        {\r\n            text: \"Добавить новые данные\",\r\n            icon: \"fa fa-plus fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\")\r\n            },\r\n        {\r\n            text: \"Внести изменения\",\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\")\r\n            },\r\n        {\r\n            text: \"Удалить\",\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => {}\r\n            },\r\n        {\r\n            text: \"Показать только активные\",\r\n            icon: \"fa fa-filter fa-lg\",\r\n            onclick: () => console.log('click')\r\n            }\r\n    ];\r\n    \r\n    return (\r\n        <div className=\"DataBase__container\">\r\n \r\n                <div className=\"DataBase__header__container\">\r\n                    <ConsoleButton\r\n                            classnameWrapper=\"DataBase__header__console\"\r\n\r\n                            linkWindowEdit={linkAddressWindowEdit}\r\n                            linkWindowConfirmDeleting={linkAddressWindowDelete}\r\n        \r\n                            stateConsoleButton = {stateConsoleButton}\r\n\r\n                            onmouseover={HendlerOnMouseover}\r\n                            onmouseleave={HendlerOnMouseLeave}\r\n\r\n                            tabindex=\"-1\"\r\n\r\n                            />\r\n\r\n                    <HeaderDictionary\r\n                            classname=\"DataBase__header__header\"\r\n                            nameHeader=\"Классы для Типов связей и Типов сущностей\"\r\n                        />\r\n                </div>\r\n                {\r\n                    stateLoading?\r\n                        <AwaitLoading\r\n                                classname=\"Loading\"\r\n                        />\r\n                       :<TableList\r\n                                classname=\"DataBase__table__container\"\r\n                                classnameConsoleCountRow='ConsoleCountRow'\r\n                                classnameButtonConsoleCountPow=\"PersonalizeButton\"\r\n                                columnName={Object.keys(stateTable[0])}\r\n                                dataTable={dataTable}\r\n                                onclick={(event, data) => handlerTableRowUID(event, data)}\r\n                                onclickInputOpen={hendlerInputOpen}\r\n                                onclickInputSave={hendlerInputSave}\r\n                                onclickOpenPagesTable={(numButton) => hendlerOpenPagesTable(numButton)}\r\n                                flagCountRow={flagCountRow}\r\n                                onchange={(event) => hendlerChangeCountRow(event)}\r\n                                CountRow={countRow}\r\n                                counterPages={counterPages}\r\n                                focusUid={focusData.uid}\r\n                        /> \r\n                }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default connect()(EltypeClass)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}