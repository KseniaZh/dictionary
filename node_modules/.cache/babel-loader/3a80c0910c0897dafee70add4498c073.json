{"ast":null,"code":"import { SHOW_LOADER, COUNTER_PAGES_TABLE, COUNT_ROW_TABLE, GET_DATA_LIST_TABLE, CHANGE_NUMBER_LIST_TABLE, SORTING_LIST_TABLE, CHANGE_ACTIV_ARR_NUMBER_PAGES, FLAG_CONTEXT_MENU } from \"../types\";\nexport const loadingShow = data => {\n  return {\n    type: SHOW_LOADER,\n    payload: data\n  };\n};\nexport const changeDataOpenContextMenu = data => {\n  return {\n    type: FLAG_CONTEXT_MENU,\n    payload: data\n  };\n};\nexport const getCounterPagesTable = (dataFromServer, countRowTable) => {\n  // общее количество листов в таблице\n  let sumRow = dataFromServer.length;\n  let i = 0;\n\n  while (sumRow >= countRowTable) {\n    sumRow = sumRow - countRowTable;\n    i++;\n  }\n\n  if (sumRow <= 0) {\n    return {\n      type: COUNTER_PAGES_TABLE,\n      payload: i\n    };\n  } else {\n    i++;\n    return {\n      type: COUNTER_PAGES_TABLE,\n      payload: i\n    };\n  }\n};\nexport const changeCountRowTable = data => {\n  //  количество строк на странице\n  return {\n    type: COUNT_ROW_TABLE,\n    payload: data\n  };\n};\nexport const getDataPageRowTable = (dataFromServer, countRow, num) => {\n  //данные для загрузки выбранного листа\n  let activeRowMin = countRow * (num - 1) + 1;\n  let activeRowMax = countRow * num;\n  let dataList = [];\n  dataFromServer.map((obj, index) => {\n    let number = index + 1;\n\n    if (number >= activeRowMin && number <= activeRowMax) {\n      dataList.push(obj);\n    }\n\n    ;\n  });\n  console.log('после выборки строк сохраняем данные для загрузки выбранного листа');\n  return {\n    type: GET_DATA_LIST_TABLE,\n    payload: dataList\n  };\n};\nexport const changeNumberList = number => {\n  //номер выбранного листа\n  return {\n    type: CHANGE_NUMBER_LIST_TABLE,\n    payload: number\n  };\n};\nexport const sortingList = data => {\n  //сотрируем только открытый лист, база остается несортированной\n  return {\n    type: SORTING_LIST_TABLE,\n    payload: data\n  };\n};\nexport const changeActivArrNumberPagesFooterTable = (numberClickButton, counterPages, oldArr) => {\n  let activArrNumberPages = [];\n\n  if (numberClickButton == 1) {\n    activArrNumberPages = [1, 2, 3];\n  } else if (numberClickButton == counterPages) {\n    activArrNumberPages = [counterPages - 2, counterPages - 1, counterPages];\n  } else if (numberClickButton == 'left') {\n    activArrNumberPages = oldArr.map(num => num - 1);\n  } else if (numberClickButton == 'right') {\n    activArrNumberPages = oldArr.map(num => num + 1);\n  } else {\n    let fullArrNumberPages = [];\n\n    for (let i = 0; i < counterPages; i++) {\n      fullArrNumberPages[i] = i + 1;\n    }\n\n    ;\n    activArrNumberPages = fullArrNumberPages.filter(num => num == numberClickButton || num == numberClickButton - 1 || num == numberClickButton + 1);\n  }\n\n  return {\n    type: CHANGE_ACTIV_ARR_NUMBER_PAGES,\n    payload: activArrNumberPages\n  };\n};","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/store/EltypeClass/actions/actionsFlagsEltypeClass.js"],"names":["SHOW_LOADER","COUNTER_PAGES_TABLE","COUNT_ROW_TABLE","GET_DATA_LIST_TABLE","CHANGE_NUMBER_LIST_TABLE","SORTING_LIST_TABLE","CHANGE_ACTIV_ARR_NUMBER_PAGES","FLAG_CONTEXT_MENU","loadingShow","data","type","payload","changeDataOpenContextMenu","getCounterPagesTable","dataFromServer","countRowTable","sumRow","length","i","changeCountRowTable","getDataPageRowTable","countRow","num","activeRowMin","activeRowMax","dataList","map","obj","index","number","push","console","log","changeNumberList","sortingList","changeActivArrNumberPagesFooterTable","numberClickButton","counterPages","oldArr","activArrNumberPages","fullArrNumberPages","filter"],"mappings":"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","sourcesContent":["import {\r\n    SHOW_LOADER,\r\n    COUNTER_PAGES_TABLE,\r\n    COUNT_ROW_TABLE,\r\n    GET_DATA_LIST_TABLE,\r\n    CHANGE_NUMBER_LIST_TABLE,\r\n    SORTING_LIST_TABLE,\r\n    CHANGE_ACTIV_ARR_NUMBER_PAGES,\r\n    FLAG_CONTEXT_MENU\r\n} from \"../types\";\r\n\r\nexport const loadingShow = (data) => {\r\n\r\n    return {\r\n        type: SHOW_LOADER,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const changeDataOpenContextMenu = (data) => {\r\n\r\n    return {\r\n        type: FLAG_CONTEXT_MENU,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const getCounterPagesTable = (dataFromServer, countRowTable) => {\r\n// общее количество листов в таблице\r\n\r\n    let sumRow = dataFromServer.length;\r\n    let i = 0;\r\n\r\n    while (sumRow >= countRowTable) {\r\n        sumRow = sumRow - countRowTable;\r\n        i++;\r\n    }\r\n\r\n    if (sumRow <= 0) {\r\n        return {\r\n            type: COUNTER_PAGES_TABLE,\r\n            payload: i\r\n        }\r\n    } else {\r\n        i++;\r\n        return {\r\n            type: COUNTER_PAGES_TABLE,\r\n            payload: i\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const changeCountRowTable = (data) => {\r\n//  количество строк на странице\r\n    return {\r\n        type: COUNT_ROW_TABLE,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const getDataPageRowTable = (dataFromServer, countRow, num) => {\r\n//данные для загрузки выбранного листа\r\n\r\n    let activeRowMin = countRow * (num - 1) + 1;\r\n    let activeRowMax = countRow * num;\r\n\r\n    let dataList = [];\r\n\r\n    dataFromServer.map((obj, index) => {\r\n        let number = index + 1;\r\n        if (number >= activeRowMin && number <= activeRowMax) {\r\n            dataList.push(obj);\r\n        };\r\n    })\r\n    console.log('после выборки строк сохраняем данные для загрузки выбранного листа')\r\n    return {\r\n        type: GET_DATA_LIST_TABLE,\r\n        payload: dataList\r\n    }\r\n}\r\n\r\nexport const changeNumberList = (number) => {\r\n//номер выбранного листа\r\n\r\n    return {\r\n        type: CHANGE_NUMBER_LIST_TABLE,\r\n        payload: number\r\n    }\r\n}\r\n\r\nexport const sortingList = (data) => {\r\n//сотрируем только открытый лист, база остается несортированной\r\n\r\n    return {\r\n        type: SORTING_LIST_TABLE,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const changeActivArrNumberPagesFooterTable = (numberClickButton, counterPages, oldArr) => {\r\n\r\n    let activArrNumberPages = [];\r\n\r\n    if (numberClickButton == 1) {\r\n        activArrNumberPages = [1, 2, 3];\r\n    } else if (numberClickButton == counterPages) {\r\n        activArrNumberPages = [counterPages - 2, counterPages - 1, counterPages];\r\n    } else if (numberClickButton == 'left') {\r\n        activArrNumberPages = oldArr.map(num => num - 1);\r\n    } else if (numberClickButton == 'right') {\r\n        activArrNumberPages = oldArr.map(num => num + 1);\r\n    } else {\r\n        let fullArrNumberPages = [];\r\n        for (let i = 0; i < counterPages; i++) {\r\n            fullArrNumberPages[i] = i + 1;\r\n        };\r\n        activArrNumberPages = fullArrNumberPages.filter(num => (num == numberClickButton || num == (numberClickButton - 1) || num == (numberClickButton + 1)));\r\n    }\r\n\r\n    return {\r\n        type: CHANGE_ACTIV_ARR_NUMBER_PAGES,\r\n        payload: activArrNumberPages\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}