{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\components\\\\Table\\\\TableList.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport TableBody from './TableBody';\nimport ButtonSmall from '../../UserInterface/Buttons/Button/ButtonSmall';\nimport withHoverDescription from '../../hoc/withHoverDescription';\nimport withClickSaveFocus from '../../hoc/withClickSaveFocus';\nimport withSort from '../../hoc/withSort';\nimport withSearchTypeSelect from '../../hoc/withSearchTypeSelect';\nimport DescriptionButton from '../../components/Description/DescriptionButton';\nimport FooterTable from '../../containers/FooterTable/FooterTable';\n\nfunction TableList(props) {\n  const haveDescription = true; // логика сортировка в hoc\n\n  const ButtonSortBase = withSort(ButtonSmall, props.stateTable, \"SortAll\");\n  const ButtonSortList = withSort(ButtonSmall, props.dataTable, \"SortActivList\");\n  const ButtonSortCompare = withSort(ButtonSmall, props.dataTable, \"SortCompareTable\", props.funcSorting);\n  const ButtonSearchTypeSelect = withSearchTypeSelect(ButtonSmall); // логика всплывающей подсказки в hoc, обертка кнопки в доп div с подсказкой\n\n  const ButtonSortBaseDescription = withHoverDescription(ButtonSortBase, DescriptionButton);\n  const ButtonSortListDescription = withHoverDescription(ButtonSortList, DescriptionButton);\n  const ButtonSearchTypeSelectDescription = withHoverDescription(ButtonSearchTypeSelect, DescriptionButton); //логика выделения фокуса в hoc\n\n  const TableBodyWithSaveFocus = withClickSaveFocus(TableBody, props.dataTable);\n\n  const flagHaveButtonSortBaseDescription = (flag, dataColumnName, typeButton) => {\n    if (flag === true) {\n      if (typeButton === 'ButtonSortBase') {\n        return /*#__PURE__*/React.createElement(ButtonSortBaseDescription, {\n          icon: \"fa fa-arrow-down\",\n          data: dataColumnName,\n          name: \"SortBase\",\n          classnameDescription: props.classnameDescription,\n          haveDescription: haveDescription,\n          positionDescription: \"top\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 24\n          }\n        });\n      }\n\n      ;\n\n      if (typeButton === 'ButtonSortList') {\n        return /*#__PURE__*/React.createElement(ButtonSortListDescription, {\n          icon: \"fa fa-indent\",\n          data: dataColumnName,\n          name: \"SortList\",\n          classnameDescription: props.classnameDescription,\n          haveDescription: haveDescription,\n          positionDescription: \"top\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 24\n          }\n        });\n      }\n\n      ;\n\n      if (typeButton === 'ButtonSortCompare') {\n        return /*#__PURE__*/React.createElement(ButtonSortCompare, {\n          icon: \"fa fa-arrow-down\",\n          data: dataColumnName,\n          name: \"SortBase\",\n          classnameDescription: props.classnameDescription,\n          haveDescription: haveDescription,\n          positionDescription: \"top\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 24\n          }\n        });\n      }\n    } else {\n      return null;\n    }\n\n    ;\n  };\n\n  const flagHaveButtonSearch = (flag, dataColumnName) => {\n    if (flag === true) {\n      return /*#__PURE__*/React.createElement(ButtonSearchTypeSelectDescription, {\n        icon: \"fa fa-search\",\n        data: dataColumnName,\n        name: \"SearchTypeSelect\",\n        classnameDescription: props.classnameDescription,\n        haveDescription: haveDescription,\n        positionDescription: \"top\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 20\n        }\n      });\n    } else {\n      return null;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"tableListBaseWrapper\",\n    className: props.classname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    className: props.classnameRowTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }, \" \"), props.visibleNameСolumns.map((name, index) => {\n    return /*#__PURE__*/React.createElement(\"th\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 36\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 41\n      }\n    }, name), props.flagOpenCompareWindow ? flagHaveButtonSortBaseDescription(props.sortСolumns[name], name, 'ButtonSortCompare') : flagHaveButtonSortBaseDescription(props.sortСolumns[name], name, 'ButtonSortBase'), props.flagOpenCompareWindow ? null : flagHaveButtonSortBaseDescription(props.sortСolumns[name], name, 'ButtonSortList'), props.flagOpenCompareWindow ? null : flagHaveButtonSearch(props.searchСolumnsName[name], name));\n  }))), /*#__PURE__*/React.createElement(TableBodyWithSaveFocus, {\n    dataTable: props.dataTable,\n    onclickDelete: props.onclickDelete,\n    onclickButtonRowClickAddCompareData: props.onclickButtonRowClickAddCompareData,\n    CountRow: props.CountRow,\n    visibleNameСolumns: props.visibleNameСolumns,\n    typeDataColumns: props.typeDataColumns,\n    flagOpenCompareWindow: props.flagOpenCompareWindow,\n    focusData: props.focusData,\n    compareArrUid: props.compareArrUid,\n    classnameRowTable: props.classnameRowTable,\n    classnameCheckbox: props.classnameCheckbox,\n    classnameDescription: props.classnameDescription,\n    colorRowTableBackground: props.colorRowTableBackground,\n    colorFocusRowBackground: props.colorFocusRowBackground,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }\n  })), props.flagOpenCompareWindow || props.flagOpenFilter ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, props.textFooter) : /*#__PURE__*/React.createElement(FooterTable, {\n    classname: props.classnameConsoleCountRow,\n    classnameButtonConsoleCountRow: props.classnameButtonConsoleCountPow,\n    classnameDescription: props.classnameDescription,\n    focusNull: props.focusNull,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 22\n    }\n  }));\n}\n\nexport default connect()(TableList);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/components/Table/TableList.js"],"names":["React","connect","TableBody","ButtonSmall","withHoverDescription","withClickSaveFocus","withSort","withSearchTypeSelect","DescriptionButton","FooterTable","TableList","props","haveDescription","ButtonSortBase","stateTable","ButtonSortList","dataTable","ButtonSortCompare","funcSorting","ButtonSearchTypeSelect","ButtonSortBaseDescription","ButtonSortListDescription","ButtonSearchTypeSelectDescription","TableBodyWithSaveFocus","flagHaveButtonSortBaseDescription","flag","dataColumnName","typeButton","classnameDescription","flagHaveButtonSearch","classname","classnameRowTable","visibleNameСolumns","map","name","index","flagOpenCompareWindow","sortСolumns","searchСolumnsName","onclickDelete","onclickButtonRowClickAddCompareData","CountRow","typeDataColumns","focusData","compareArrUid","classnameCheckbox","colorRowTableBackground","colorFocusRowBackground","flagOpenFilter","textFooter","classnameConsoleCountRow","classnameButtonConsoleCountPow","focusNull"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport TableBody from './TableBody';\r\nimport ButtonSmall from '../../UserInterface/Buttons/Button/ButtonSmall';\r\nimport withHoverDescription from '../../hoc/withHoverDescription';\r\nimport withClickSaveFocus from '../../hoc/withClickSaveFocus';\r\nimport withSort from '../../hoc/withSort';\r\nimport withSearchTypeSelect from '../../hoc/withSearchTypeSelect';\r\nimport DescriptionButton from '../../components/Description/DescriptionButton';\r\nimport FooterTable from '../../containers/FooterTable/FooterTable';\r\n\r\n\r\nfunction TableList(props) {\r\n\r\n    const haveDescription = true;\r\n\r\n    // логика сортировка в hoc\r\n    const ButtonSortBase = withSort(ButtonSmall, props.stateTable, \"SortAll\");\r\n    const ButtonSortList = withSort(ButtonSmall, props.dataTable, \"SortActivList\");\r\n    const ButtonSortCompare = withSort(ButtonSmall, props.dataTable, \"SortCompareTable\", props.funcSorting);\r\n    const ButtonSearchTypeSelect = withSearchTypeSelect(ButtonSmall);\r\n\r\n    // логика всплывающей подсказки в hoc, обертка кнопки в доп div с подсказкой\r\n    const ButtonSortBaseDescription = withHoverDescription(ButtonSortBase, DescriptionButton);\r\n    const ButtonSortListDescription = withHoverDescription(ButtonSortList, DescriptionButton);\r\n    const ButtonSearchTypeSelectDescription = withHoverDescription(ButtonSearchTypeSelect, DescriptionButton);\r\n\r\n    //логика выделения фокуса в hoc\r\n    const TableBodyWithSaveFocus = withClickSaveFocus(TableBody, props.dataTable);\r\n\r\n    const flagHaveButtonSortBaseDescription = (flag, dataColumnName, typeButton) => {\r\n        if (flag === true) {\r\n\r\n            if(typeButton === 'ButtonSortBase') {\r\n                return <ButtonSortBaseDescription\r\n                            icon=\"fa fa-arrow-down\"\r\n                            data={dataColumnName}\r\n                            name=\"SortBase\"\r\n                            classnameDescription={props.classnameDescription}\r\n                            haveDescription={haveDescription}\r\n                            positionDescription=\"top\"\r\n                        />\r\n            };\r\n\r\n            if (typeButton === 'ButtonSortList') {\r\n                return <ButtonSortListDescription\r\n                            icon=\"fa fa-indent\"\r\n                            data={dataColumnName}\r\n                            name=\"SortList\"\r\n                            classnameDescription={props.classnameDescription}\r\n                            haveDescription={haveDescription}\r\n                            positionDescription=\"top\"\r\n                        />\r\n            };\r\n\r\n            if (typeButton === 'ButtonSortCompare') {\r\n                return <ButtonSortCompare\r\n                            icon=\"fa fa-arrow-down\"\r\n                            data={dataColumnName}\r\n                            name=\"SortBase\"\r\n                            classnameDescription={props.classnameDescription}\r\n                            haveDescription={haveDescription}\r\n                            positionDescription=\"top\"\r\n                        />\r\n            } \r\n        }else{\r\n                return null\r\n            };\r\n\r\n    }\r\n\r\n    const flagHaveButtonSearch = (flag, dataColumnName) => {\r\n        if ( flag === true) {\r\n            return <ButtonSearchTypeSelectDescription\r\n                        icon=\"fa fa-search\"\r\n                        data={dataColumnName}\r\n                        name=\"SearchTypeSelect\"\r\n                        classnameDescription={props.classnameDescription}\r\n                        haveDescription={haveDescription}\r\n                        positionDescription=\"top\"\r\n                    />\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div id='tableListBaseWrapper' className={props.classname}>\r\n            <table>\r\n                  <thead>\r\n                    <tr className={props.classnameRowTable}>\r\n                        <th> </th>\r\n\r\n                    {\r\n                        props.visibleNameСolumns.map((name, index) => {\r\n                            return <th\r\n                                        key={index}\r\n                                    >\r\n                                        <div>{name}</div>\r\n                                        {\r\n                                            props.flagOpenCompareWindow ?\r\n                                                flagHaveButtonSortBaseDescription(props.sortСolumns[name], name, 'ButtonSortCompare')\r\n                                            : flagHaveButtonSortBaseDescription(props.sortСolumns[name], name, 'ButtonSortBase')\r\n                                        }\r\n                                        {\r\n                                            props.flagOpenCompareWindow ?\r\n                                                null\r\n                                            : flagHaveButtonSortBaseDescription(props.sortСolumns[name], name, 'ButtonSortList')\r\n                                        }\r\n                                        {\r\n                                            props.flagOpenCompareWindow ?\r\n                                                null\r\n                                            : flagHaveButtonSearch(props.searchСolumnsName[name], name)\r\n                                        }\r\n                                            \r\n                                    </th>\r\n                        })\r\n                    }\r\n                    </tr>\r\n                  </thead>\r\n\r\n                  <TableBodyWithSaveFocus\r\n                        dataTable={props.dataTable}\r\n                        onclickDelete={props.onclickDelete}\r\n                        onclickButtonRowClickAddCompareData={props.onclickButtonRowClickAddCompareData}\r\n                        CountRow={props.CountRow}\r\n                        visibleNameСolumns={props.visibleNameСolumns}\r\n                        typeDataColumns={props.typeDataColumns}\r\n                        flagOpenCompareWindow={props.flagOpenCompareWindow}\r\n                        focusData={props.focusData}\r\n                        compareArrUid={props.compareArrUid}\r\n                        classnameRowTable={props.classnameRowTable}\r\n                        classnameCheckbox={props.classnameCheckbox}\r\n                        classnameDescription={props.classnameDescription}\r\n                        colorRowTableBackground={props.colorRowTableBackground}\r\n                        colorFocusRowBackground={props.colorFocusRowBackground}\r\n                    />\r\n                   \r\n            </table>\r\n            {\r\n                props.flagOpenCompareWindow || props.flagOpenFilter?\r\n                    <p>{props.textFooter}</p>\r\n                    :<FooterTable\r\n                        classname={props.classnameConsoleCountRow}\r\n                        classnameButtonConsoleCountRow={props.classnameButtonConsoleCountPow}\r\n                        classnameDescription={props.classnameDescription}\r\n                        focusNull={props.focusNull}\r\n                    />\r\n            }\r\n            \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default connect()(TableList)"]},"metadata":{},"sourceType":"module"}