{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\components\\\\FooterTable\\\\FooterTable.js\";\nimport React from 'react';\nimport { connect, useDispatch, useState } from \"react-redux\";\nimport CountRowForPage from './CountRowForPage';\nimport ConsoleOpenActivList from './ConsoleOpenActivList';\nimport { changeCountRowTable, getCounterPagesTable, changeNumberList, getDataPageRowTable, changeActivArrNumberPagesFooterTable } from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\n\nfunction FooterTable(props) {\n  const dispatch = useDispatch();\n  const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\n\n  const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\n\n  const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // количество листов в таблице всего\n\n  const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\n\n  const activArrNumberPages = useSelector(state => state.stateFlagsEltypeClass.activArrNumberPagesFooterTable); //предлагаемый на выбор массив из 3х кнопок в консоли переключения отображаемых листов таблицы\n\n  const [dataButtonOpenInput, setDataButtonOpenInput] = useState({\n    flag: false,\n    icon: \"fa fa-pencil\",\n    name: \"OpenInputChangeCountRow\"\n  }); //кнопка открытия и сохранения инпута\n\n  const [inputValue, setInputValue] = useState(countRow); // значение в интуре\n\n  const hendlerButtonInputOpen = () => {\n    if (dataButtonOpenInput.flag === false) {\n      setDataButtonOpenInput({\n        flag: true,\n        icon: \"fa fa-floppy-o\",\n        name: \"SaveChangeCountRow\"\n      });\n    }\n\n    ;\n\n    if (dataButtonOpenInput.flag === true) {\n      setDataButtonOpenInput({\n        flag: false,\n        icon: \"fa fa-pencil\",\n        name: \"OpenInputChangeCountRow\"\n      });\n      dispatch(changeCountRowTable(inputValue)); // количество строк на странице\n\n      dispatch(getCounterPagesTable(stateTable, inputValue)); // количество листов в таблице всего\n\n      dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\n\n      dispatch(getDataPageRowTable(stateTable, inputValue, numberList)); // из stateTable выбираем строки для загрузки листа\n\n      dispatch(changeActivArrNumberPagesFooterTable(1, counterPages)); //измениям консоль выбора активной страницы в футере\n\n      if (numberList !== 1) {\n        props.func(); // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные focus\n      }\n\n      ;\n    }\n  };\n\n  const hendlerChangeInputValue = event => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n  }; //после выбора страницы приходит ее номер, в хранилище собираем новую страницу, в хранилище сохраняем номер страницы\n\n\n  const hendlerOpenPagesTable = num => {\n    dispatch(getDataPageRowTable(stateTable, countRow, num)); // из stateTable выбираем строки для загрузки листа\n\n    dispatch(changeNumberList(num)); // сохраняем номер выбранного листа\n\n    props.func(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\n    // dispatch(getCounterPagesTable(stateTable, countRow)); //измениям  общее количество листов в таблице\n\n    dispatch(changeActivArrNumberPagesFooterTable(num, counterPages)); //измениям консоль выбора активной страницы в футере\n  };\n\n  const hendlerChangeButtonConsole = num => {\n    dispatch(changeActivArrNumberPagesFooterTable(num, counterPages, activArrNumberPages)); //переключение стрелками консоли выбора активной страницы в футере\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: props.classname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleOpenActivList, {\n    func: props.func,\n    counterPages: counterPages,\n    activArrNumberPages: activArrNumberPages,\n    numberActivList: numberList,\n    onclickOpenPagesTable: hendlerOpenPagesTable,\n    onclickChangeButtonConsole: hendlerChangeButtonConsole,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CountRowForPage, {\n    func: props.func,\n    classname: props.classnameButtonConsoleCountRow,\n    CountRow: countRow,\n    length: stateTable.length,\n    dataButtonOpenInput: dataButtonOpenInput,\n    onclickButtonInputOpen: hendlerButtonInputOpen,\n    inputValue: inputValue,\n    onchangeInputValue: hendlerChangeInputValue,\n    classname: props.classname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default connect()(FooterTable);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/components/FooterTable/FooterTable.js"],"names":["React","connect","useDispatch","useState","CountRowForPage","ConsoleOpenActivList","changeCountRowTable","getCounterPagesTable","changeNumberList","getDataPageRowTable","changeActivArrNumberPagesFooterTable","FooterTable","props","dispatch","stateTable","useSelector","state","stateTableEltypeClass","countRow","stateFlagsEltypeClass","countRowTable","counterPages","counterPagesTable","numberList","activArrNumberPages","activArrNumberPagesFooterTable","dataButtonOpenInput","setDataButtonOpenInput","flag","icon","name","inputValue","setInputValue","hendlerButtonInputOpen","func","hendlerChangeInputValue","event","preventDefault","target","value","hendlerOpenPagesTable","num","hendlerChangeButtonConsole","classname","classnameButtonConsoleCountRow","length"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect, useDispatch, useState } from \"react-redux\";\r\n\r\nimport CountRowForPage from './CountRowForPage';\r\nimport ConsoleOpenActivList from './ConsoleOpenActivList';\r\n\r\nimport {\r\n    changeCountRowTable,\r\n    getCounterPagesTable,\r\n    changeNumberList,\r\n    getDataPageRowTable,\r\n    changeActivArrNumberPagesFooterTable\r\n} from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\n\r\n\r\nfunction FooterTable(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\r\n    const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\r\n    const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // количество листов в таблице всего\r\n    const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\r\n    const activArrNumberPages = useSelector(state => state.stateFlagsEltypeClass.activArrNumberPagesFooterTable); //предлагаемый на выбор массив из 3х кнопок в консоли переключения отображаемых листов таблицы\r\n\r\n    const [dataButtonOpenInput, setDataButtonOpenInput] = useState({\r\n        flag: false,\r\n        icon: \"fa fa-pencil\",\r\n        name: \"OpenInputChangeCountRow\"\r\n    }); //кнопка открытия и сохранения инпута\r\n\r\n\r\n    const [inputValue, setInputValue] = useState(countRow); // значение в интуре\r\n\r\n    const hendlerButtonInputOpen = () => {\r\n\r\n        if (dataButtonOpenInput.flag === false) {\r\n            setDataButtonOpenInput({\r\n                flag: true,\r\n                icon: \"fa fa-floppy-o\",\r\n                name: \"SaveChangeCountRow\"\r\n            });\r\n        };\r\n        if (dataButtonOpenInput.flag === true) {\r\n            setDataButtonOpenInput({\r\n                flag: false,\r\n                icon: \"fa fa-pencil\",\r\n                name: \"OpenInputChangeCountRow\"\r\n            });\r\n            dispatch(changeCountRowTable(inputValue)); // количество строк на странице\r\n            dispatch(getCounterPagesTable(stateTable, inputValue)); // количество листов в таблице всего\r\n            dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\r\n            dispatch(getDataPageRowTable(stateTable, inputValue, numberList)); // из stateTable выбираем строки для загрузки листа\r\n            dispatch(changeActivArrNumberPagesFooterTable(1, counterPages)); //измениям консоль выбора активной страницы в футере\r\n            if (numberList !== 1) {\r\n                props.func();  // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные focus\r\n            };\r\n\r\n        }\r\n\r\n    }\r\n    const hendlerChangeInputValue = (event) => {\r\n        event.preventDefault();\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    //после выбора страницы приходит ее номер, в хранилище собираем новую страницу, в хранилище сохраняем номер страницы\r\n    const hendlerOpenPagesTable = (num) => {\r\n\r\n        dispatch(getDataPageRowTable(stateTable, countRow, num)); // из stateTable выбираем строки для загрузки листа\r\n        dispatch(changeNumberList(num)); // сохраняем номер выбранного листа\r\n        props.func(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\r\n        // dispatch(getCounterPagesTable(stateTable, countRow)); //измениям  общее количество листов в таблице\r\n        dispatch(changeActivArrNumberPagesFooterTable(num, counterPages)); //измениям консоль выбора активной страницы в футере\r\n    }\r\n\r\n    const hendlerChangeButtonConsole = (num) => {\r\n        dispatch(changeActivArrNumberPagesFooterTable(num, counterPages, activArrNumberPages)); //переключение стрелками консоли выбора активной страницы в футере\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={props.classname}>\r\n\r\n            <ConsoleOpenActivList\r\n                func={props.func}\r\n                counterPages={counterPages}\r\n                activArrNumberPages={activArrNumberPages}\r\n                numberActivList={numberList}\r\n                onclickOpenPagesTable={hendlerOpenPagesTable}\r\n                onclickChangeButtonConsole={hendlerChangeButtonConsole}\r\n            />\r\n               \r\n            <CountRowForPage\r\n                func={props.func}\r\n                classname={props.classnameButtonConsoleCountRow}\r\n                CountRow={countRow}\r\n                length={stateTable.length}\r\n                dataButtonOpenInput={dataButtonOpenInput}\r\n                onclickButtonInputOpen={hendlerButtonInputOpen}\r\n                inputValue={inputValue}\r\n                onchangeInputValue={hendlerChangeInputValue}\r\n                classname={props.classname}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(FooterTable)"]},"metadata":{},"sourceType":"module"}