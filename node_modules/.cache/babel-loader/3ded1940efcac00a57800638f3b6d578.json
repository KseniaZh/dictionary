{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\Basis\\\\Basis.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport TableList from '../../components/Table/TableList';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\nimport { saveDataStore } from '../../store/BasisReport/actions/actionFocusData';\nimport { changeNumberList, getDataPageRowTable } from '../../store/BasisReport/actions/actionsFlagsBasisReport';\nimport { addDescription } from \"../../store/Description/actionsDescription\";\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\n\nfunction Basis(props) {\n  const dispatch = useDispatch();\n  const stateLoading = useSelector(state => state.stateFlagsBasisReport.loading);\n  const stateTable = useSelector(state => state.stateBasisReport); //ВСЯ база\n\n  const dataTable = useSelector(state => state.stateFlagsBasisReport.dataListTable); // отображаемый лист\n\n  const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\n\n  const countRow = useSelector(state => state.stateFlagsBasisReport.countRowTable); // количество строк на отображаемой странице\n\n  const numberList = useSelector(state => state.stateFlagsBasisReport.numberList); //номер отображаемого листа\n\n  const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll); // разрешен ли пользователем показ подсказок\n\n  const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга\n  //переключение цветового решения приложения\n\n  const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\n  const staleSelect = useSelector(state => state.stateStyle.styleSelect);\n\n  const hendlerSearchBase = event => {\n    event.preventDefault();\n\n    if (event.target.value === '') {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    let num; // номер выбранного объекта в массиве\n\n    stateTable.map((obj, index) => {\n      if (obj[props.searchKey] === event.target.value) {\n        num = index + 1;\n        dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\n      }\n    }); //поиск номера страницы\n\n    let i = Number(countRow);\n    let numList = 1;\n\n    if (num === undefined) {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    while (i < num) {\n      i = i + Number(countRow);\n      numList++;\n    }\n\n    dispatch(changeNumberList(numList)); //сохраняем номер\n\n    dispatch(getDataPageRowTable(stateTable, countRow, numList)); // загружаем выбранный лист\n  };\n\n  const [valueFilterBase, setValueFilterBase] = useState('');\n\n  const hendlerFilterBase = (event, dataSearchKey) => {\n    event.preventDefault();\n\n    if (event.target.value === '') {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    setValueFilterBase(event.target.value); //текст в input\n\n    console.log('text filter INPUT ', event.target.value);\n    const stateTableFilter = stateTable.filter(obj => {\n      let a = obj[props.searchKey].split(); // имя из state\n\n      let b = event.target.value.toUpperCase().split(); // значение input\n\n      const c = a.map((aa, index) => {\n        if (aa.indexOf(b) > -1) {\n          return aa;\n        } else {\n          return '';\n        }\n      });\n      console.log('aaa ', c);\n      return a !== '';\n    });\n    console.log('result filter ', stateTableFilter);\n  };\n\n  const hendlerClearSearchInput = event => {\n    const SearchBaseName = document.getElementById('SearchBaseName');\n    const FilterBaseName = document.getElementById('filterBase');\n\n    if (event.target.tagName !== \"INPUT\") {\n      SearchBaseName.value = '';\n      FilterBaseName.value = '';\n    }\n  };\n\n  const haveDescription = dataStateConsoleButton => {\n    //добавляем подсказки на кнопки консоли\n    if (flagEmployDescription === true) {\n      let aboutDescription = {};\n      dataStateConsoleButton.map(obj => {\n        aboutDescription[obj.name] = [obj.text];\n      });\n      dispatch(addDescription(aboutDescription, arrDescription));\n    }\n\n    ;\n  }; //логика добавления контекстного меню через hoc\n\n\n  const TableListWithContextMenu = withContextMenuWindow(TableList, ContextMenuWindow, props.stateConsoleButton, stateStylesAll[staleSelect].contextMenuWindow);\n  useEffect(() => {\n    props.funcStartGetRequestServer();\n    document.addEventListener('click', hendlerClearSearchInput);\n    haveDescription(props.stateConsoleButton);\n    return () => {\n      document.removeEventListener('click', hendlerClearSearchInput);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: stateStylesAll[staleSelect].dataBaseContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classnameHeaderConsole: stateStylesAll[staleSelect].dataBaseHeaderConsole,\n    classnameSearchDatalis: stateStylesAll[staleSelect].searchInputDatalisHeaderDataBase,\n    classnameDescription: stateStylesAll[staleSelect].descriptionButton,\n    stateConsoleButton: props.stateConsoleButton,\n    onchangeSearch: event => hendlerSearchBase(event),\n    onchangeFilterBase: hendlerFilterBase,\n    valueFilterBase: valueFilterBase,\n    nameHeader: props.nameHeader,\n    stateTable: stateTable,\n    searchKey: props.searchKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }), stateLoading ? /*#__PURE__*/React.createElement(AwaitLoading, {\n    classname: stateStylesAll[staleSelect].loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(TableListWithContextMenu, {\n    classnameConsoleCountRow: stateStylesAll[staleSelect].consoleCountRow,\n    classnameButtonConsoleCountPow: stateStylesAll[staleSelect].personalizeButton,\n    classnameRowTable: stateStylesAll[staleSelect].userRowTable,\n    classnameCheckbox: stateStylesAll[staleSelect].beautifulCheckboxTable,\n    classnameDescription: stateStylesAll[staleSelect].descriptionButton,\n    colorRowTableBackground: stateStylesAll[staleSelect].rowTableBackground,\n    colorFocusRowBackground: stateStylesAll[staleSelect].focusRowBackground,\n    stateTable: stateTable,\n    dataTable: dataTable,\n    visibleNameСolumns: props.visibleNameСolumns,\n    searchСolumnsName: props.searchСolumnsName,\n    sortСolumns: props.sortСolumns,\n    typeDataColumns: props.typeDataColumns,\n    flagOpenCompareWindow: props.flagOpenCompareWindow,\n    compareArrUid: props.compareArrUid,\n    focusNull: props.focusNull,\n    onclickButtonRowClickAddCompareData: props.onclickButtonRowClickAddCompareData,\n    onclickDelete: props.hendlerButtonRowClickDeleteCompareData,\n    CountRow: countRow,\n    focusData: focusData,\n    numberActivList: numberList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 23\n    }\n  }));\n}\n\nexport default connect()(Basis);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/Basis/Basis.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","TableList","HeaderDictionary","ContextMenuWindow","AwaitLoading","saveDataStore","changeNumberList","getDataPageRowTable","addDescription","withContextMenuWindow","Basis","props","dispatch","stateLoading","state","stateFlagsBasisReport","loading","stateTable","stateBasisReport","dataTable","dataListTable","focusData","countRow","countRowTable","numberList","flagEmployDescription","stateFlagsAll","employDescriptionAll","arrDescription","stateDescription","stateStylesAll","stateStyle","stylesAll","staleSelect","styleSelect","hendlerSearchBase","event","preventDefault","target","value","num","map","obj","index","searchKey","i","Number","numList","undefined","valueFilterBase","setValueFilterBase","hendlerFilterBase","dataSearchKey","console","log","stateTableFilter","filter","a","split","b","toUpperCase","c","aa","indexOf","hendlerClearSearchInput","SearchBaseName","document","getElementById","FilterBaseName","tagName","haveDescription","dataStateConsoleButton","aboutDescription","name","text","TableListWithContextMenu","stateConsoleButton","contextMenuWindow","funcStartGetRequestServer","addEventListener","removeEventListener","dataBaseContainer","dataBaseHeaderConsole","searchInputDatalisHeaderDataBase","descriptionButton","nameHeader","consoleCountRow","personalizeButton","userRowTable","beautifulCheckboxTable","rowTableBackground","focusRowBackground","visibleNameСolumns","searchСolumnsName","sortСolumns","typeDataColumns","flagOpenCompareWindow","compareArrUid","focusNull","onclickButtonRowClickAddCompareData","hendlerButtonRowClickDeleteCompareData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport TableList from '../../components/Table/TableList';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\r\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\r\n\r\nimport { saveDataStore } from '../../store/BasisReport/actions/actionFocusData';\r\nimport {\r\n    changeNumberList,\r\n    getDataPageRowTable\r\n} from '../../store/BasisReport/actions/actionsFlagsBasisReport';\r\nimport { addDescription } from \"../../store/Description/actionsDescription\";\r\n\r\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\r\n\r\n\r\nfunction Basis(props) {\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const stateLoading = useSelector(state => state.stateFlagsBasisReport.loading);\r\n\r\n    const stateTable = useSelector(state => state.stateBasisReport); //ВСЯ база\r\n\r\n    const dataTable = useSelector(state => state.stateFlagsBasisReport.dataListTable); // отображаемый лист\r\n\r\n    const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\r\n  \r\n    const countRow = useSelector(state => state.stateFlagsBasisReport.countRowTable); // количество строк на отображаемой странице\r\n\r\n    const numberList = useSelector(state => state.stateFlagsBasisReport.numberList); //номер отображаемого листа\r\n\r\n    const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll) // разрешен ли пользователем показ подсказок\r\n\r\n    const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга\r\n\r\n    //переключение цветового решения приложения\r\n    const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\r\n    const staleSelect = useSelector(state => state.stateStyle.styleSelect);\r\n\r\n\r\n    const hendlerSearchBase = (event) => {\r\n        event.preventDefault();\r\n        if (event.target.value === '') { return }; //если пусто, выходим\r\n\r\n        let num; // номер выбранного объекта в массиве\r\n    \r\n        stateTable.map((obj, index) => {\r\n\r\n            if (obj[props.searchKey] === event.target.value) {\r\n                num = index + 1;\r\n                dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\r\n            }\r\n        });\r\n            //поиск номера страницы\r\n            let i = Number(countRow);\r\n            let numList = 1;\r\n            if (num === undefined) { return }; //если пусто, выходим\r\n\r\n            while (i < num) {\r\n                i = i + Number(countRow);\r\n                numList++;\r\n        }\r\n\r\n        dispatch(changeNumberList(numList)); //сохраняем номер\r\n        dispatch(getDataPageRowTable(stateTable, countRow, numList));// загружаем выбранный лист\r\n    }\r\n\r\n\r\n    const [valueFilterBase, setValueFilterBase] = useState('');\r\n\r\n    const hendlerFilterBase = (event, dataSearchKey) => {\r\n        event.preventDefault();\r\n        if (event.target.value === '') { return }; //если пусто, выходим\r\n        setValueFilterBase(event.target.value); //текст в input\r\n        console.log('text filter INPUT ', event.target.value);\r\n        const stateTableFilter = stateTable.filter(obj => {\r\n            let a = obj[props.searchKey].split(); // имя из state\r\n            let b = event.target.value.toUpperCase().split(); // значение input\r\n\r\n         const c = a.map((aa, index) => {\r\n                if (aa.indexOf(b) > -1) {\r\n                    return aa\r\n                } else {\r\n                    return ''\r\n                }\r\n            })\r\n            console.log('aaa ', c)\r\n                return a!==''\r\n        })\r\n            console.log('result filter ', stateTableFilter);\r\n\r\n    }\r\n\r\n    const hendlerClearSearchInput = event => {\r\n        const SearchBaseName = document.getElementById('SearchBaseName');\r\n        const FilterBaseName = document.getElementById('filterBase');\r\n        if (event.target.tagName !== \"INPUT\") {\r\n            SearchBaseName.value = '';\r\n            FilterBaseName.value = '';\r\n        }\r\n    }\r\n\r\n    const haveDescription = (dataStateConsoleButton) => {\r\n        //добавляем подсказки на кнопки консоли\r\n        if (flagEmployDescription === true) {\r\n            let aboutDescription = {};\r\n            dataStateConsoleButton.map((obj) => {\r\n                aboutDescription[obj.name] = [obj.text];\r\n            });\r\n            dispatch(addDescription(aboutDescription, arrDescription));\r\n        };\r\n    }\r\n\r\n    //логика добавления контекстного меню через hoc\r\n    const TableListWithContextMenu = withContextMenuWindow(TableList, ContextMenuWindow, props.stateConsoleButton, stateStylesAll[staleSelect].contextMenuWindow);\r\n\r\n    useEffect(() => {\r\n\r\n    props.funcStartGetRequestServer();\r\n\r\n     document.addEventListener('click', hendlerClearSearchInput);\r\n\r\n     haveDescription(props.stateConsoleButton);\r\n\r\n     return () => {\r\n         document.removeEventListener('click', hendlerClearSearchInput);\r\n     }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={stateStylesAll[staleSelect].dataBaseContainer}>\r\n \r\n            <HeaderDictionary\r\n                    classnameHeaderConsole={stateStylesAll[staleSelect].dataBaseHeaderConsole}\r\n                    classnameSearchDatalis={stateStylesAll[staleSelect].searchInputDatalisHeaderDataBase}\r\n                    classnameDescription={stateStylesAll[staleSelect].descriptionButton}\r\n                    stateConsoleButton={props.stateConsoleButton}\r\n                    onchangeSearch={(event) => hendlerSearchBase(event)}\r\n                onchangeFilterBase={hendlerFilterBase}\r\n                valueFilterBase={valueFilterBase}\r\n                    nameHeader={props.nameHeader}\r\n                    stateTable={stateTable}\r\n                    searchKey={props.searchKey}\r\n                />    \r\n                    \r\n            {\r\n                stateLoading ?\r\n                    <AwaitLoading\r\n                        classname={stateStylesAll[staleSelect].loading}\r\n                    />\r\n                    : <TableListWithContextMenu\r\n                            classnameConsoleCountRow={stateStylesAll[staleSelect].consoleCountRow}\r\n                            classnameButtonConsoleCountPow={stateStylesAll[staleSelect].personalizeButton}\r\n                            classnameRowTable={stateStylesAll[staleSelect].userRowTable}\r\n                            classnameCheckbox={stateStylesAll[staleSelect].beautifulCheckboxTable}\r\n                            classnameDescription={stateStylesAll[staleSelect].descriptionButton}\r\n                            colorRowTableBackground={stateStylesAll[staleSelect].rowTableBackground}\r\n                            colorFocusRowBackground={stateStylesAll[staleSelect].focusRowBackground}\r\n\r\n                            stateTable={stateTable}\r\n                            dataTable={dataTable}\r\n                            visibleNameСolumns={props.visibleNameСolumns}\r\n                            searchСolumnsName={props.searchСolumnsName}\r\n                            sortСolumns={props.sortСolumns}\r\n                            typeDataColumns={props.typeDataColumns}\r\n                            flagOpenCompareWindow={props.flagOpenCompareWindow}\r\n                            compareArrUid={props.compareArrUid}\r\n\r\n                            focusNull={props.focusNull}\r\n                            onclickButtonRowClickAddCompareData={props.onclickButtonRowClickAddCompareData}\r\n                            onclickDelete={props.hendlerButtonRowClickDeleteCompareData}\r\n\r\n                            CountRow={countRow}\r\n                            focusData={focusData}\r\n                            numberActivList={numberList}\r\n                        /> \r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(Basis)"]},"metadata":{},"sourceType":"module"}