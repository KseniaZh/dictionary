{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\hoc\\\\withSort.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { sortingTable } from '../store/EltypeClass/actions/actionEltypeClass';\nimport { getDataPageRowTable, sortingList } from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\nimport { sortingCompareArr } from '../store/EltypeClass/actions/actionsCompareEltypeClass';\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../styles/const_color';\n\nconst mapStateToProps = state => {\n  return {\n    activList: state.stateFlagsEltypeClass.dataListTable,\n    // отображаемый лист\n    focusData: state.createDataEltypeClass.stateData,\n    countRow: state.stateFlagsEltypeClass.countRowTable,\n    // количество строк на отображаемой странице\n    numberList: state.stateFlagsEltypeClass.numberList //номер отображаемого листа\n\n  };\n};\n\nconst mapDispatchToProps = {\n  sortingTable,\n  getDataPageRowTable,\n  sortingList,\n  sortingCompareArr\n};\n\nconst withSort = (Component, dataSort, typeSort) => {\n  class ComponentWithSort extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.sortBase = (sortKey, base) => {\n        const data = base;\n\n        if (typeof data[0][sortKey] == 'boolean') {\n          //если это чекбокс\n          const compare = function (a, b) {\n            let x;\n            let y;\n\n            if (a[sortKey] == true) {\n              x = 1;\n            } else {\n              x = 0;\n            }\n\n            ;\n\n            if (b[sortKey] == true) {\n              y = 1;\n            } else {\n              y = 0;\n            }\n\n            ;\n            return y - x;\n          };\n\n          data.sort(compare);\n        } else {\n          data.sort((a, b) => a[sortKey].localeCompare(b[sortKey]));\n        }\n\n        ;\n        return data;\n      };\n\n      this.hendlerSort = (event, sortKey) => {\n        let data = this.sortBase(sortKey, this.dataSort); // сортируем данные \n\n        if (typeSort == \"SortAll\") {\n          this.props.sortingTable(data); // сохраняем отсортированную базу в хранилище\n\n          this.props.getDataPageRowTable(data, this.props.countRow, this.props.numberList); // затем меняем вид листа, который выведен в данный момент на страницу\n        }\n\n        if (typeSort == \"SortActivList\") {\n          this.props.sortingList(data); //сохраняем и перерисовываем открытый лист\n        }\n\n        if (typeSort == \"SortCompareTable\") {\n          this.props.sortingCompareArr(data); //сохраняем и перерисовываем массив сравнений\n        }\n      };\n\n      this.dataSort = dataSort;\n      this.focusColorBackground = rowFocus_Coffee;\n      this.allRowColorBackground = tablebodyBackground_Coffee;\n    }\n\n    componentDidUpdate() {\n      //берем отображаемый лист и подсвечиваем фокус. Если он улетел по базе за пределы, просто очищаем поле\n      let tablebody = document.querySelector('tbody');\n\n      for (let child of tablebody.children) {\n        child.style.background = this.allRowColorBackground; //убираем цвет ранее выбранной строки\n\n        console.log('чистим поле');\n      }\n\n      ;\n      console.log('this.props.activList ', this.props.activList);\n      this.props.activList.map((obj, index) => {\n        if (obj.uid == this.props.focusData.uid) {\n          tablebody.children[index].style.background = this.focusColorBackground;\n          console.log('this.props.focusData.uid ', this.props.focusData.uid);\n        } else {\n          return;\n        }\n      });\n    }\n\n    render() {\n      let props = { ...this.props,\n        onclick: this.hendlerSort\n      };\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }));\n    }\n\n  }\n\n  return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort);\n};\n\nexport default withSort; //const hendlerSortList = (event, sortKey) => {\n//    let data = sortBase(sortKey, dataTable); //сотрируем только открытый лист, база остается несортированной\n//    dispatch(sortingList(data)); //сохраняем и перерисовываем открытый лист\n//}\n//const hendlerSortCompare = (event, sortKey) => {\n//    let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\n//    dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \n//}","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/hoc/withSort.js"],"names":["React","connect","sortingTable","getDataPageRowTable","sortingList","sortingCompareArr","tablebodyBackground_Coffee","rowFocus_Coffee","mapStateToProps","state","activList","stateFlagsEltypeClass","dataListTable","focusData","createDataEltypeClass","stateData","countRow","countRowTable","numberList","mapDispatchToProps","withSort","Component","dataSort","typeSort","ComponentWithSort","constructor","props","sortBase","sortKey","base","data","compare","a","b","x","y","sort","localeCompare","hendlerSort","event","focusColorBackground","allRowColorBackground","componentDidUpdate","tablebody","document","querySelector","child","children","style","background","console","log","map","obj","index","uid","render","onclick"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { sortingTable } from '../store/EltypeClass/actions/actionEltypeClass';\r\nimport { getDataPageRowTable, sortingList } from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\nimport { sortingCompareArr } from '../store/EltypeClass/actions/actionsCompareEltypeClass';\r\n\r\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../styles/const_color';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        activList: state.stateFlagsEltypeClass.dataListTable, // отображаемый лист\r\n        focusData: state.createDataEltypeClass.stateData,\r\n        countRow: state.stateFlagsEltypeClass.countRowTable, // количество строк на отображаемой странице\r\n        numberList: state.stateFlagsEltypeClass.numberList //номер отображаемого листа\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n        sortingTable,\r\n        getDataPageRowTable,\r\n        sortingList,\r\n        sortingCompareArr\r\n}\r\n\r\n\r\nconst withSort = (Component, dataSort, typeSort) => {\r\n\r\n \r\n    class ComponentWithSort extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.dataSort = dataSort;\r\n            this.focusColorBackground = rowFocus_Coffee;\r\n            this.allRowColorBackground = tablebodyBackground_Coffee\r\n        }\r\n        sortBase = (sortKey, base) => {\r\n                const data = base;\r\n\r\n                if (typeof data[0][sortKey] == 'boolean') { //если это чекбокс\r\n                    const compare = function (a, b) {\r\n                        let x;\r\n                        let y;\r\n                        if (a[sortKey] == true) { x = 1 } else { x = 0 };\r\n                        if (b[sortKey] == true) { y = 1 } else { y = 0 };\r\n                        return y - x;\r\n                    };\r\n                    data.sort(compare);\r\n                } else {\r\n                    data.sort((a, b) => a[sortKey].localeCompare(b[sortKey]))\r\n                };\r\n                return data\r\n            }\r\n\r\n        hendlerSort = (event, sortKey) => {\r\n            let data = this.sortBase(sortKey, this.dataSort); // сортируем данные \r\n\r\n\r\n\r\n            if (typeSort == \"SortAll\") {\r\n                        this.props.sortingTable(data); // сохраняем отсортированную базу в хранилище\r\n                        this.props.getDataPageRowTable(data, this.props.countRow, this.props.numberList); // затем меняем вид листа, который выведен в данный момент на страницу\r\n            }\r\n            if (typeSort == \"SortActivList\") {\r\n                this.props.sortingList(data); //сохраняем и перерисовываем открытый лист\r\n            }\r\n            if (typeSort == \"SortCompareTable\") {\r\n                this.props.sortingCompareArr(data); //сохраняем и перерисовываем массив сравнений\r\n            }\r\n\r\n            \r\n       }\r\n        componentDidUpdate() {\r\n            //берем отображаемый лист и подсвечиваем фокус. Если он улетел по базе за пределы, просто очищаем поле\r\n            let tablebody = document.querySelector('tbody');\r\n            for (let child of tablebody.children) {\r\n                child.style.background = this.allRowColorBackground;//убираем цвет ранее выбранной строки\r\n                console.log('чистим поле')\r\n            };\r\n\r\n            console.log('this.props.activList ', this.props.activList);\r\n            this.props.activList.map((obj, index) => {\r\n                if (obj.uid == this.props.focusData.uid) {\r\n                    tablebody.children[index].style.background = this.focusColorBackground;\r\n                    console.log('this.props.focusData.uid ', this.props.focusData.uid)\r\n                } else {\r\n                    return\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        render() {\r\n            let props = {\r\n                ...this.props,\r\n                onclick: this.hendlerSort,\r\n            }\r\n            return (\r\n                <Component {...props} />\r\n                )\r\n        }\r\n    }\r\n    return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort)\r\n}\r\nexport default withSort\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//const hendlerSortList = (event, sortKey) => {\r\n//    let data = sortBase(sortKey, dataTable); //сотрируем только открытый лист, база остается несортированной\r\n//    dispatch(sortingList(data)); //сохраняем и перерисовываем открытый лист\r\n//}\r\n//const hendlerSortCompare = (event, sortKey) => {\r\n\r\n//    let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\r\n//    dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \r\n//}\r\n"]},"metadata":{},"sourceType":"module"}