{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\CompareEltypeClass.js\";\nimport React, { useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ButtonLinkSmallNotMouse from '../../UserInterface/Buttons/Button/ButtonLinkSmallNotMouse';\nimport ConsoleButtonCompare from '../../components/ConsoleButton/ConsoleButtonCompare';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport CompareTableEltypeClass from '../../components/Table/CompareTableEltypeClass';\nimport { saveDataStore, saveTypeRequest, saveNameWindow } from '../../store/EltypeClass/actions/actionEltypeClass';\nimport { clearCompareArr, deleteDataCompareArr } from '../../store/EltypeClass/actions/actionsСompareEltypeClass';\nimport { linkEltypeClass } from '../Navigation/Main';\nimport { linkEditWindowEltypeClass } from '../Navigation/Main';\nimport { linkWindowConfirmDeleting } from '../Navigation/Main';\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../../styles/const_color';\n\nfunction CompareEltypeClass(props) {\n  const linkAddress = linkEltypeClass;\n  const dispatch = useDispatch();\n  const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\n\n  const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\n\n  const focusData = useSelector(state => state.createDataEltypeClass.stateData); //хранение данных выбранной строки\n\n  const tablebodyBackgroundClear = () => {\n    let tablebody = document.getElementById('tablebody');\n\n    for (let child of tablebody.children) {\n      child.style.background = tablebodyBackground_Coffee; //убираем цвет ранее выбранной строки\n    }\n\n    ;\n  };\n\n  const focusNull = () => {\n    tablebodyBackgroundClear();\n    dispatch(saveDataStore({\n      uid: \"\",\n      name: \"\",\n      isDeleted: false,\n      isTemplate: false\n    }));\n  };\n\n  const handlerTableRowUID = (event, data) => {\n    //фокус на строку\n    event.preventDefault();\n    let tr; //строка выбранной ячейки\n\n    if (event.target.parentElement.tagName == 'TR') {\n      tr = event.target.parentElement;\n      stateTable.map(obj => {\n        if (obj.uid === data) {\n          dispatch(saveDataStore(obj)); // сохранить в хранилище\n        }\n      });\n    } else if (event.target.parentElement.tagName == 'TD') {\n      tr = event.target.parentElement.parentElement;\n      stateTable.map(obj => {\n        if (obj.uid === data) {\n          dispatch(saveDataStore(obj)); // сохранить в хранилище\n        }\n      });\n    } else if (event.target.parentElement.tagName == 'DIV') {\n      tr = event.target.parentElement.parentElement.parentElement;\n      stateTable.map(obj => {\n        if (obj.uid === data) {\n          dispatch(deleteDataCompareArr(obj)); // удалить из массива сравнений\n        }\n      });\n      console.log('УДАЛЕНИЕ ЧЕРЕЗ handlerTableRowUID ');\n    }\n\n    ;\n    tablebodyBackgroundClear();\n    tr.style.background = rowFocus_Coffee;\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const hendlerClearCompareArr = () => {\n    dispatch(clearCompareArr());\n  };\n\n  const HendlerOnMouseover = () => {};\n\n  const HendlerOnMouseLeave = () => {};\n\n  const hendlerDelete = () => {\n    console.log(\"Delete row УДАЛЕНИЕ ЧЕРЕЗ handlerTableRowUID\");\n  };\n\n  console.log('compareArr.length ', compareArr.length);\n  const stateConsoleButton = [{\n    text: \"Внести изменения\",\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: linkEditWindowEltypeClass\n  }, {\n    text: \"Удалить\",\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: linkWindowConfirmDeleting\n  }, {\n    text: \"Очистить список сравнений\",\n    icon: \"fa fa-minus-square-o\",\n    onclick: hendlerClearCompareArr,\n    link: linkEltypeClass\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__header__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButtonCompare, {\n    classnameWrapper: \"DataBase__header__console\",\n    stateConsoleButton: stateConsoleButton,\n    onmouseover: HendlerOnMouseover,\n    onmouseleave: HendlerOnMouseLeave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classname: \"DataBase__header__header\",\n    nameHeader: \"\\u0421\\u0440\\u0430\\u0432\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u0431\\u0440\\u0430\\u043D\\u043D\\u043E\\u0435: \\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ButtonLinkSmallNotMouse, {\n    to: linkAddress,\n    icon: \"fa fa-times\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  })), compareArr.length > 1 ? /*#__PURE__*/React.createElement(CompareTableEltypeClass, {\n    columnName: Object.keys(compareArr[0]),\n    dataTable: compareArr,\n    onclick: (event, data) => handlerTableRowUID(event, data),\n    onclickDelete: hendlerDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 23\n    }\n  }, \"\\u043D\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0442\\u043E\\u0447\\u043D\\u043E \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"));\n}\n\nexport default connect()(CompareEltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/CompareEltypeClass.js"],"names":["React","useState","connect","useDispatch","useSelector","ButtonLinkSmallNotMouse","ConsoleButtonCompare","HeaderDictionary","CompareTableEltypeClass","saveDataStore","saveTypeRequest","saveNameWindow","clearCompareArr","deleteDataCompareArr","linkEltypeClass","linkEditWindowEltypeClass","linkWindowConfirmDeleting","tablebodyBackground_Coffee","rowFocus_Coffee","CompareEltypeClass","props","linkAddress","dispatch","stateTable","state","stateTableEltypeClass","compareArr","compareDataEltypeClass","focusData","createDataEltypeClass","stateData","tablebodyBackgroundClear","tablebody","document","getElementById","child","children","style","background","focusNull","uid","name","isDeleted","isTemplate","handlerTableRowUID","event","data","preventDefault","tr","target","parentElement","tagName","map","obj","console","log","hendlerOpenWindow","nameWindow","typeRequest","hendlerClearCompareArr","HendlerOnMouseover","HendlerOnMouseLeave","hendlerDelete","length","stateConsoleButton","text","icon","onclick","link","Object","keys"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ButtonLinkSmallNotMouse from '../../UserInterface/Buttons/Button/ButtonLinkSmallNotMouse';\r\nimport ConsoleButtonCompare from '../../components/ConsoleButton/ConsoleButtonCompare';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport CompareTableEltypeClass from '../../components/Table/CompareTableEltypeClass';\r\n\r\nimport {\r\n    saveDataStore,\r\n    saveTypeRequest,\r\n    saveNameWindow,\r\n} from '../../store/EltypeClass/actions/actionEltypeClass';\r\n\r\nimport {\r\n    clearCompareArr,\r\n    deleteDataCompareArr\r\n} from '../../store/EltypeClass/actions/actionsСompareEltypeClass';\r\n\r\nimport { linkEltypeClass } from '../Navigation/Main';\r\nimport { linkEditWindowEltypeClass } from '../Navigation/Main';\r\nimport { linkWindowConfirmDeleting } from '../Navigation/Main';\r\n\r\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../../styles/const_color';\r\n\r\nfunction CompareEltypeClass(props) {\r\n\r\n    const linkAddress = linkEltypeClass;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\r\n\r\n    const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\r\n\r\n    const focusData = useSelector(state => state.createDataEltypeClass.stateData); //хранение данных выбранной строки\r\n\r\n    const tablebodyBackgroundClear = () => {\r\n        let tablebody = document.getElementById('tablebody');\r\n        for (let child of tablebody.children) {\r\n            child.style.background = tablebodyBackground_Coffee;//убираем цвет ранее выбранной строки\r\n        };\r\n    }\r\n    const focusNull = () => {\r\n        tablebodyBackgroundClear();\r\n        dispatch(saveDataStore({\r\n            uid: \"\",\r\n            name: \"\",\r\n            isDeleted: false,\r\n            isTemplate: false\r\n        }));\r\n    }\r\n    const handlerTableRowUID = (event, data) => { //фокус на строку\r\n        event.preventDefault();\r\n\r\n        let tr; //строка выбранной ячейки\r\n        if (event.target.parentElement.tagName == 'TR') {\r\n            tr = event.target.parentElement; \r\n\r\n            stateTable.map((obj) => {\r\n                if (obj.uid === data) {\r\n                    dispatch(saveDataStore(obj)); // сохранить в хранилище\r\n                }\r\n            })\r\n        } else if (event.target.parentElement.tagName == 'TD') {\r\n            tr = event.target.parentElement.parentElement;\r\n\r\n            stateTable.map((obj) => {\r\n                if (obj.uid === data) {\r\n                    dispatch(saveDataStore(obj)); // сохранить в хранилище\r\n                }\r\n            })\r\n        } else if (event.target.parentElement.tagName == 'DIV') {\r\n            tr = event.target.parentElement.parentElement.parentElement;\r\n\r\n            stateTable.map((obj) => {\r\n                if (obj.uid === data) {\r\n                    dispatch(deleteDataCompareArr(obj)); // удалить из массива сравнений\r\n                }\r\n            })\r\n\r\n            console.log('УДАЛЕНИЕ ЧЕРЕЗ handlerTableRowUID ');\r\n        };\r\n\r\n        tablebodyBackgroundClear();\r\n        tr.style.background = rowFocus_Coffee;\r\n    }\r\n\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n\r\n    const hendlerClearCompareArr = () => {\r\n        dispatch(clearCompareArr());\r\n    }\r\n\r\n\r\n    const HendlerOnMouseover = () => {}\r\n    const HendlerOnMouseLeave = () => {}\r\n    \r\n    const hendlerDelete = () => {\r\n        console.log(\"Delete row УДАЛЕНИЕ ЧЕРЕЗ handlerTableRowUID\");\r\n    }\r\n\r\n    console.log('compareArr.length ', compareArr.length);\r\n    const stateConsoleButton = [\r\n  \r\n        {\r\n            text: \"Внести изменения\",\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: linkEditWindowEltypeClass\r\n        },\r\n        {\r\n            text: \"Удалить\",\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Очистить список сравнений\",\r\n            icon: \"fa fa-minus-square-o\",\r\n            onclick: hendlerClearCompareArr,\r\n            link: linkEltypeClass\r\n        }\r\n    ];\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"DataBase__container\">\r\n\r\n            <div className=\"DataBase__header__container\">\r\n\r\n                <ConsoleButtonCompare\r\n                    classnameWrapper=\"DataBase__header__console\"\r\n\r\n                    stateConsoleButton={stateConsoleButton}\r\n\r\n                    onmouseover={HendlerOnMouseover}\r\n                    onmouseleave={HendlerOnMouseLeave}\r\n\r\n                />\r\n\r\n                <HeaderDictionary\r\n                    classname=\"DataBase__header__header\"\r\n                    nameHeader=\"Сравнить избранное: Классы для Типов связей и Типов сущностей\"\r\n                />\r\n\r\n                <ButtonLinkSmallNotMouse\r\n                    to={linkAddress}\r\n                    icon=\"fa fa-times\"\r\n                />\r\n            </div>\r\n            {\r\n                (compareArr.length > 1) ?\r\n                    <CompareTableEltypeClass\r\n                        columnName={Object.keys(compareArr[0])}\r\n                        dataTable={compareArr}\r\n                        onclick={(event, data) => handlerTableRowUID(event, data)}\r\n                        onclickDelete={hendlerDelete}\r\n                    />\r\n                    : <div>недостаточно данных</div>\r\n\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(CompareEltypeClass)"]},"metadata":{},"sourceType":"module"}