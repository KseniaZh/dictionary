{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\EltypeClass.js\";\nimport React, { useEffect } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\nimport TableList from '../../components/Table/TableListEltypeClass';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\nimport { startGetRequestServerEltypeClass, saveDataStore, saveTypeRequest, saveNameWindow } from '../../store/EltypeClass/actions/actionEltypeClass';\nimport { changeNumberList, getDataPageRowTable } from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\nimport { addDescription } from \"../../store/Description/actionsDescription\";\nimport { tablebodyBackgroundClear } from '../../functions/tablebodyBackgroundClear';\nimport { changeAdressOpenTable } from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\nimport { addDataCompareArr } from '../../store/EltypeClass/actions/actionsCompareEltypeClass';\nimport { rowFocus_Coffee } from '../../styles/const_color';\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\n\nfunction EltypeClass(props) {\n  const dispatch = useDispatch();\n  const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\n  const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\n\n  const dataTable = useSelector(state => state.stateFlagsEltypeClass.dataListTable); // отображаемый лист\n\n  const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\n\n  const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\n\n  const visibleNameColumns = useSelector(state => state.createDataEltypeClass.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\n\n  const searchKey = useSelector(state => state.createDataEltypeClass.searchKey); // ключ для типа поиска в окошке в шапке таблицы\n\n  const typeDataColumns = useSelector(state => state.createDataEltypeClass.typeData); // тип данных значений, заполняющих колонки\n\n  const focusData = useSelector(state => state.createDataEltypeClass.stateData); // фокус. запомнить данные выбранной строки\n\n  const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\n\n  const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\n\n  const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll); // разрешен ли пользователем показ подсказок\n\n  const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга)\n  //переключение цветового решения приложения\n\n  const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\n  const staleSelect = useSelector(state => state.stateStyle.styleSelect);\n\n  const focusNull = () => {\n    tablebodyBackgroundClear();\n    dispatch(saveDataStore({\n      uid: \"\",\n      name: \"\",\n      isDeleted: false,\n      isTemplate: false\n    }));\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const hendlerAddCompareData = () => {\n    dispatch(addDataCompareArr(focusData, compareArr));\n  };\n\n  const hendlerOpenCompareWindow = () => {\n    dispatch(addDataCompareArr(focusData, compareArr)); //добавить выделенную строку в сравнение\n\n    focusNull();\n    dispatch(changeAdressOpenTable(links.linkCompare));\n  };\n\n  const hendlerSearchBase = event => {\n    event.preventDefault();\n\n    if (event.target.value === '') {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    let num; // номер выбранного объекта в массиве\n\n    let numRowOnPage; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\n\n    stateTable.map((obj, index) => {\n      if (obj.name === event.target.value) {\n        num = index + 1;\n        numRowOnPage = index + 1;\n        dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\n      }\n    }); //поиск номера страницы\n\n    let i = countRow;\n    let numList = 1;\n\n    if (num === undefined) {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    while (i < num) {\n      i = i + countRow;\n      numRowOnPage = numRowOnPage - countRow;\n      numList++;\n    }\n\n    dispatch(changeNumberList(numList)); //сохраняем номер\n\n    dispatch(getDataPageRowTable(stateTable, countRow, numList)); // загружаем выбранный лист\n\n    tablebodyBackgroundClear();\n    let tablebody = document.querySelector('tbody');\n    tablebody.children[numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\n\n    tablebody.children[numRowOnPage - 1].children[1].focus();\n  };\n\n  const hendlerClearSearchInput = event => {\n    const SearchBaseName = document.getElementById('SearchBaseName');\n\n    if (event.target.tagName !== \"INPUT\") {\n      SearchBaseName.value = '';\n    }\n  };\n\n  const stateConsoleButton = [{\n    text: \"Обновить\",\n    name: 'update',\n    icon: \"fa fa-download fa-lg\",\n    onclick: () => {\n      dispatch(startGetRequestServerEltypeClass());\n    },\n    link: links.linkBase\n  }, {\n    text: \"Добавить новые данные\",\n    name: 'add',\n    icon: \"fa fa-plus fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Внести изменения\",\n    name: 'edit',\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить\",\n    name: 'delete',\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Сравнить\",\n    name: 'compare',\n    icon: \"fa fa-balance-scale\",\n    onclick: hendlerOpenCompareWindow,\n    link: links.linkCompare\n  }, {\n    text: \"Добавить к сравнению\",\n    name: 'addCompare',\n    icon: \"fa fa-filter fa-lg\",\n    onclick: () => hendlerAddCompareData(),\n    link: links.linkBase\n  }];\n\n  const haveDescription = dataStateConsoleButton => {\n    //добавляем подсказки на кнопки консоли\n    if (flagEmployDescription === true) {\n      let aboutDescription = {};\n      dataStateConsoleButton.map(obj => {\n        aboutDescription[obj.name] = [obj.text];\n      });\n      dispatch(addDescription(aboutDescription, arrDescription));\n    }\n\n    ;\n  }; //логика добавления контекстного меню через hoc\n\n\n  const TableListWithContextMenu = withContextMenuWindow(TableList, ContextMenuWindow, stateConsoleButton, \"ContextMenuWindow\");\n  useEffect(() => {\n    dispatch(startGetRequestServerEltypeClass());\n    document.addEventListener('click', hendlerClearSearchInput);\n    haveDescription(stateConsoleButton);\n    return () => {\n      document.removeEventListener('click', hendlerClearSearchInput);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: stateStylesAll[staleSelect].dataBaseContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: stateStylesAll[staleSelect].dataBaseHeaderContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButton, {\n    classnameWrapper: stateStylesAll[staleSelect].dataBaseHeaderConsole,\n    classnameDescription: stateStylesAll[staleSelect].descriptionButton,\n    stateConsoleButton: stateConsoleButton,\n    tabindex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classname: stateStylesAll[staleSelect].dataBaseHeaderHeader,\n    nameHeader: \"\\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    stateTable: stateTable,\n    searchKey: searchKey,\n    onchangeSearch: event => hendlerSearchBase(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 21\n    }\n  })), stateLoading ? /*#__PURE__*/React.createElement(AwaitLoading, {\n    classname: stateStylesAll[staleSelect].loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(TableListWithContextMenu, {\n    classname: stateStylesAll[staleSelect].dataBaseTableContainer,\n    classname: stateStylesAll[staleSelect].dataBaseTableContainer,\n    classnameConsoleCountRow: stateStylesAll[staleSelect].consoleCountRow,\n    classnameButtonConsoleCountPow: stateStylesAll[staleSelect].personalizeButton,\n    classnameDescription: stateStylesAll[staleSelect].descriptionButton,\n    colorRowTableBackground: stateStylesAll[staleSelect].rowTableBackground,\n    colorFocusRowBackground: stateStylesAll[staleSelect].focusRowBackground,\n    stateTable: stateTable,\n    dataTable: dataTable,\n    visibleNameColumns: visibleNameColumns,\n    typeDataColumns: typeDataColumns,\n    func: focusNull,\n    CountRow: countRow,\n    focusUid: focusData.uid,\n    numberActivList: numberList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 23\n    }\n  }));\n}\n\nexport default connect()(EltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/EltypeClass.js"],"names":["React","useEffect","connect","useDispatch","useSelector","ConsoleButton","TableList","HeaderDictionary","ContextMenuWindow","AwaitLoading","startGetRequestServerEltypeClass","saveDataStore","saveTypeRequest","saveNameWindow","changeNumberList","getDataPageRowTable","addDescription","tablebodyBackgroundClear","changeAdressOpenTable","addDataCompareArr","rowFocus_Coffee","withContextMenuWindow","EltypeClass","props","dispatch","stateLoading","state","stateFlagsEltypeClass","loading","stateTable","stateTableEltypeClass","dataTable","dataListTable","countRow","countRowTable","numberList","visibleNameColumns","createDataEltypeClass","nameСolumnsTableList","searchKey","typeDataColumns","typeData","focusData","stateData","compareArr","compareDataEltypeClass","links","stateLinksEltypeClass","flagEmployDescription","stateFlagsAll","employDescriptionAll","arrDescription","stateDescription","stateStylesAll","stateStyle","stylesAll","staleSelect","styleSelect","focusNull","uid","name","isDeleted","isTemplate","hendlerOpenWindow","nameWindow","typeRequest","hendlerAddCompareData","hendlerOpenCompareWindow","linkCompare","hendlerSearchBase","event","preventDefault","target","value","num","numRowOnPage","map","obj","index","i","numList","undefined","tablebody","document","querySelector","children","style","background","focus","hendlerClearSearchInput","SearchBaseName","getElementById","tagName","stateConsoleButton","text","icon","onclick","link","linkBase","linkEditWindow","linkWindowConfirmDeleting","haveDescription","dataStateConsoleButton","aboutDescription","TableListWithContextMenu","addEventListener","removeEventListener","dataBaseContainer","dataBaseHeaderContainer","dataBaseHeaderConsole","descriptionButton","dataBaseHeaderHeader","dataBaseTableContainer","consoleCountRow","personalizeButton","rowTableBackground","focusRowBackground"],"mappings":"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","sourcesContent":["import React, { useEffect} from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\r\nimport TableList from '../../components/Table/TableListEltypeClass';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\r\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\r\n\r\nimport {\r\n        startGetRequestServerEltypeClass,\r\n        saveDataStore,\r\n        saveTypeRequest,\r\n        saveNameWindow\r\n } from '../../store/EltypeClass/actions/actionEltypeClass';\r\n\r\nimport {\r\n        changeNumberList,\r\n        getDataPageRowTable\r\n} from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\n\r\nimport { addDescription } from \"../../store/Description/actionsDescription\";\r\n\r\nimport { tablebodyBackgroundClear } from '../../functions/tablebodyBackgroundClear';\r\n\r\nimport { changeAdressOpenTable } from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\r\n\r\nimport { addDataCompareArr } from '../../store/EltypeClass/actions/actionsCompareEltypeClass';\r\n\r\nimport { rowFocus_Coffee } from '../../styles/const_color';\r\n\r\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\r\n\r\n\r\nfunction EltypeClass(props) {\r\n\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\r\n\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\r\n\r\n    const dataTable = useSelector(state => state.stateFlagsEltypeClass.dataListTable); // отображаемый лист\r\n  \r\n    const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\r\n\r\n    const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\r\n\r\n    const visibleNameColumns = useSelector(state => state.createDataEltypeClass.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\r\n\r\n    const searchKey = useSelector(state => state.createDataEltypeClass.searchKey); // ключ для типа поиска в окошке в шапке таблицы\r\n\r\n    const typeDataColumns = useSelector(state => state.createDataEltypeClass.typeData); // тип данных значений, заполняющих колонки\r\n\r\n    const focusData = useSelector(state => state.createDataEltypeClass.stateData); // фокус. запомнить данные выбранной строки\r\n\r\n    const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\r\n\r\n    const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\r\n\r\n    const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll) // разрешен ли пользователем показ подсказок\r\n\r\n    const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга)\r\n\r\n    //переключение цветового решения приложения\r\n    const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\r\n    const staleSelect = useSelector(state => state.stateStyle.styleSelect);\r\n\r\n    const focusNull = () => {\r\n        tablebodyBackgroundClear();\r\n        dispatch(saveDataStore({\r\n                                uid: \"\",\r\n                                name: \"\",\r\n                                isDeleted: false,\r\n                                isTemplate: false\r\n                            }));\r\n    }\r\n\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n\r\n\r\n    const hendlerAddCompareData = () => {\r\n        dispatch(addDataCompareArr(focusData, compareArr));\r\n    }\r\n\r\n    const hendlerOpenCompareWindow = () => {\r\n        dispatch(addDataCompareArr(focusData, compareArr)); //добавить выделенную строку в сравнение\r\n        focusNull();\r\n        dispatch(changeAdressOpenTable(links.linkCompare));\r\n    }\r\n\r\n    const hendlerSearchBase = (event) => {\r\n        event.preventDefault();\r\n        if (event.target.value === '') { return }; //если пусто, выходим\r\n\r\n        let num; // номер выбранного объекта в массиве\r\n        let numRowOnPage; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\r\n    \r\n        stateTable.map((obj, index) => {\r\n\r\n            if (obj.name === event.target.value) {\r\n                num = index + 1;\r\n                numRowOnPage = index +1;\r\n                dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\r\n            }\r\n        });\r\n            //поиск номера страницы\r\n            let i = countRow;\r\n            let numList = 1;\r\n            if (num === undefined) { return }; //если пусто, выходим\r\n\r\n            while (i < num) {\r\n                i = i + countRow;\r\n                numRowOnPage = numRowOnPage - countRow;\r\n                numList++;\r\n        }\r\n\r\n        dispatch(changeNumberList(numList)); //сохраняем номер\r\n        dispatch(getDataPageRowTable(stateTable, countRow, numList));// загружаем выбранный лист\r\n\r\n        tablebodyBackgroundClear();\r\n\r\n        let tablebody = document.querySelector('tbody');\r\n        tablebody.children[numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\r\n        tablebody.children[numRowOnPage - 1].children[1].focus();\r\n    }\r\n\r\n\r\n    const hendlerClearSearchInput = event => {\r\n\r\n        const SearchBaseName = document.getElementById('SearchBaseName');\r\n        if (event.target.tagName !== \"INPUT\") {\r\n             SearchBaseName.value = '';\r\n         }\r\n    }\r\n\r\n\r\n   const stateConsoleButton = [\r\n        {\r\n            text: \"Обновить\",\r\n            name: 'update',\r\n            icon: \"fa fa-download fa-lg\",\r\n            onclick: () => { dispatch(startGetRequestServerEltypeClass()) },\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Добавить новые данные\",\r\n            name: 'add',\r\n            icon: \"fa fa-plus fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Внести изменения\",\r\n            name: 'edit',\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Удалить\",\r\n            name: 'delete',\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Сравнить\",\r\n            name: 'compare',\r\n            icon: \"fa fa-balance-scale\",\r\n            onclick: hendlerOpenCompareWindow,\r\n            link: links.linkCompare\r\n        },\r\n        {\r\n            text: \"Добавить к сравнению\",\r\n            name: 'addCompare',\r\n            icon: \"fa fa-filter fa-lg\",\r\n            onclick: () => hendlerAddCompareData(),\r\n            link: links.linkBase\r\n        }\r\n    ];  \r\n\r\n    const haveDescription = (dataStateConsoleButton) => {\r\n        //добавляем подсказки на кнопки консоли\r\n        if (flagEmployDescription === true) {\r\n            let aboutDescription = {};\r\n            dataStateConsoleButton.map((obj) => {\r\n                aboutDescription[obj.name] = [obj.text];\r\n            });\r\n            dispatch(addDescription(aboutDescription, arrDescription));\r\n        };\r\n    }\r\n\r\n    //логика добавления контекстного меню через hoc\r\n    const TableListWithContextMenu = withContextMenuWindow(TableList, ContextMenuWindow, stateConsoleButton, \"ContextMenuWindow\");\r\n\r\n\r\n useEffect(() => {\r\n     dispatch(startGetRequestServerEltypeClass());\r\n\r\n     document.addEventListener('click', hendlerClearSearchInput);\r\n\r\n     haveDescription(stateConsoleButton);\r\n\r\n     return () => {\r\n         document.removeEventListener('click', hendlerClearSearchInput);\r\n     }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={stateStylesAll[staleSelect].dataBaseContainer}>\r\n \r\n            <div className={stateStylesAll[staleSelect].dataBaseHeaderContainer}>\r\n                    <ConsoleButton\r\n                            classnameWrapper={stateStylesAll[staleSelect].dataBaseHeaderConsole}\r\n                            classnameDescription={stateStylesAll[staleSelect].descriptionButton}\r\n                            stateConsoleButton={stateConsoleButton}\r\n                            tabindex=\"-1\"\r\n                            />\r\n\r\n                    <HeaderDictionary\r\n                            classname={stateStylesAll[staleSelect].dataBaseHeaderHeader}\r\n                            nameHeader=\"Классы для Типов связей и Типов сущностей\"\r\n                            stateTable={stateTable}\r\n                            searchKey={searchKey}\r\n                            onchangeSearch={(event) => hendlerSearchBase(event)}\r\n\r\n                        />\r\n                </div>\r\n            {\r\n                stateLoading ?\r\n                    <AwaitLoading\r\n                        classname={stateStylesAll[staleSelect].loading}\r\n                    />\r\n                    : <TableListWithContextMenu\r\n                                classname={stateStylesAll[staleSelect].dataBaseTableContainer}\r\n                                classname={stateStylesAll[staleSelect].dataBaseTableContainer}\r\n                                classnameConsoleCountRow={stateStylesAll[staleSelect].consoleCountRow}\r\n                                classnameButtonConsoleCountPow={stateStylesAll[staleSelect].personalizeButton}\r\n                                classnameDescription={stateStylesAll[staleSelect].descriptionButton}\r\n                                colorRowTableBackground={stateStylesAll[staleSelect].rowTableBackground}\r\n                                colorFocusRowBackground={stateStylesAll[staleSelect].focusRowBackground}\r\n\r\n                                stateTable={stateTable}\r\n                                dataTable={dataTable}\r\n                                visibleNameColumns={visibleNameColumns}\r\n                                typeDataColumns={typeDataColumns}\r\n\r\n                                func={focusNull}\r\n\r\n                                CountRow={countRow}\r\n                                focusUid={focusData.uid}\r\n                                numberActivList={numberList}\r\n                        /> \r\n                }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default connect()(EltypeClass)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}