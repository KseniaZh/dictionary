{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\components\\\\Table\\\\RowTableUser.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport ButtonSmall from '../../UserInterface/Buttons/Button/ButtonSmall';\nimport withHoverDescription from '../../hoc/withHoverDescription';\nimport DescriptionButton from '../../components/Description/DescriptionButton';\n\nfunction RowTable(props) {\n  const rowRef = useRef(null);\n  const Keys = Object.keys(props.dataRow).filter(key => key !== \"uid\");\n  const uid = props.dataRow.uid;\n\n  const inputChecked = data => data ? 'checked' : false;\n\n  const deleteRowfromCompare = event => {\n    props.onclick(event, uid);\n    props.onclickDelete();\n  }; // логика всплывающей подсказки спрятана в hoc, обертка кнопок и подсказка реализованы в ButtonConsoleTable\n\n\n  const ButtonDeleteRow = withHoverDescription(ButtonSmall, DescriptionButton);\n  const [flagFocus, setFlagFocus] = useState(false);\n  const [colorRow, setColorRow] = useState({\n    background: 'blue'\n  });\n\n  const hendlerClick = event => {\n    props.onclick(event, uid);\n  };\n\n  useEffect(() => {\n    if (flagFocus === true) {//rowRef.current.focus();\n      //setColorRow({ color: 'red' });\n    }\n\n    if (props.focusData.uid === uid) {\n      setColorRow({\n        background: \"red\"\n      });\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    style: colorRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, props.flagOpenCompareWindow ? /*#__PURE__*/React.createElement(\"td\", {\n    uid: props.dataRow.uid,\n    onClick: deleteRowfromCompare,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ButtonDeleteRow, {\n    icon: \"fa fa-times-circle\",\n    onclick: deleteRowfromCompare,\n    data: props.dataRow,\n    name: \"DeleteRow\",\n    classnameDescription: \"DescriptionButton\",\n    positionDescription: \"no\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }\n  }, \" \", props.number), Keys.map((keyObj, index) => {\n    if (props.number <= props.CountRow) {\n      if (props.typeDataColumns[index] === 'text') {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          ref: rowRef,\n          key: index,\n          uid: props.dataRow.uid,\n          onClick: hendlerClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 40\n          }\n        }, props.dataRow[keyObj]);\n      }\n\n      if (props.typeDataColumns[index] === 'checkbox') {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          key: index,\n          uid: props.dataRow.uid,\n          onClick: hendlerClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 40\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"checkbox\",\n          checked: inputChecked(props.dataRow[keyObj]),\n          disabled: \"disabled\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 37\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"fa fa-check\",\n          \"aria-hidden\": \"true\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 37\n          }\n        }));\n      }\n    }\n  }));\n}\n\nexport default RowTable;","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/components/Table/RowTableUser.js"],"names":["React","useRef","useEffect","useState","ButtonSmall","withHoverDescription","DescriptionButton","RowTable","props","rowRef","Keys","Object","keys","dataRow","filter","key","uid","inputChecked","data","deleteRowfromCompare","event","onclick","onclickDelete","ButtonDeleteRow","flagFocus","setFlagFocus","colorRow","setColorRow","background","hendlerClick","focusData","flagOpenCompareWindow","number","map","keyObj","index","CountRow","typeDataColumns"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport ButtonSmall from '../../UserInterface/Buttons/Button/ButtonSmall';\r\nimport withHoverDescription from '../../hoc/withHoverDescription';\r\nimport DescriptionButton from '../../components/Description/DescriptionButton';\r\n\r\nfunction RowTable(props) {\r\n\r\n    const rowRef = useRef(null);\r\n    \r\n    const Keys = Object.keys(props.dataRow).filter(key => key !== \"uid\");\r\n    const uid = props.dataRow.uid;\r\n\r\n    const inputChecked = data => data ? 'checked' : false\r\n\r\n    const deleteRowfromCompare = (event) => {\r\n        props.onclick(event, uid);\r\n        props.onclickDelete();\r\n    }\r\n\r\n    // логика всплывающей подсказки спрятана в hoc, обертка кнопок и подсказка реализованы в ButtonConsoleTable\r\n    const ButtonDeleteRow = withHoverDescription(ButtonSmall, DescriptionButton);\r\n\r\n    const [flagFocus, setFlagFocus] = useState(false);\r\n    const [colorRow, setColorRow] = useState({ background: 'blue' });\r\n\r\n\r\n    \r\n\r\n    const hendlerClick = (event) => {\r\n        props.onclick(event, uid);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (flagFocus === true) {\r\n            //rowRef.current.focus();\r\n            //setColorRow({ color: 'red' });\r\n        }\r\n        if (props.focusData.uid === uid) {\r\n            setColorRow({ background: \"red\" });\r\n        }\r\n\r\n    }, [])\r\n\r\n    return(\r\n\r\n        <tr style={colorRow}>\r\n            {\r\n                props.flagOpenCompareWindow ?\r\n                    <td\r\n                        uid={props.dataRow.uid}\r\n                        onClick={deleteRowfromCompare}\r\n                    >\r\n                        <ButtonDeleteRow\r\n                            icon=\"fa fa-times-circle\"\r\n                            onclick={deleteRowfromCompare}\r\n                            data={props.dataRow}\r\n                            name=\"DeleteRow\"\r\n                            classnameDescription='DescriptionButton'\r\n                            positionDescription=\"no\"\r\n                        />\r\n                    </td>\r\n                    : <td> {props.number}</td>\r\n            }\r\n            \r\n            \r\n            {\r\n                Keys.map((keyObj, index) => {\r\n\r\n                    if (props.number <= props.CountRow) {\r\n\r\n                        if (props.typeDataColumns[index] === 'text') {\r\n                                return <td\r\n                                            ref={rowRef}\r\n                                            key={index}\r\n                                            uid={props.dataRow.uid}\r\n                                            onClick={hendlerClick}\r\n                                        >\r\n                                            {props.dataRow[keyObj]}\r\n                                        </td>\r\n                            }\r\n\r\n                        if (props.typeDataColumns[index] === 'checkbox') {\r\n                                return <td\r\n                                        key={index}\r\n                                        uid={props.dataRow.uid}\r\n                                        onClick={hendlerClick}\r\n                                >\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        checked={inputChecked(props.dataRow[keyObj])}\r\n                                        disabled=\"disabled\"\r\n\r\n                                    />\r\n                                    <span className=\"fa fa-check\" aria-hidden=\"true\"></span>\r\n                                </td>\r\n                            }\r\n                    }  \r\n                }) \r\n            }\r\n        \r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default RowTable"]},"metadata":{},"sourceType":"module"}