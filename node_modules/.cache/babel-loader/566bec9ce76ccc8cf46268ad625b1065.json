{"ast":null,"code":"import { START_SAGAS_AUTH_POST_REQUEST, SAVE_DATA_AUTH, START_SAGAS_AUTH_GET_LOGIN_REQUEST, SAVE_DATA_FROM_LOGIN_WINDOW, FLAG_LOGIN_CONFIRMED, FLAG_REPEAT_PASSWORD_AUTH } from \"./types\";\nexport const startSagasAuthPOSTRequestServer = () => {\n  return {\n    type: START_SAGAS_AUTH_POST_REQUEST\n  };\n}; //слушатель Саги на ввод нового пользователя\n\nexport const saveDataAuthorization = data => {\n  console.log(' в redux сохранилось ', data);\n  return {\n    type: SAVE_DATA_AUTH,\n    payload: data\n  };\n};\nexport const saveDataFromLoginWindow = data => {\n  console.log(' сохраняем данные в redux для сравнения с сервером', data);\n  return {\n    type: SAVE_DATA_FROM_LOGIN_WINDOW,\n    payload: data\n  };\n};\nexport const startSagasAuthGETloginRequestServer = () => {\n  console.log(' это слушатель саги from store START_SAGAS_AUTH_GET_LOGIN_REQUEST');\n  return {\n    type: START_SAGAS_AUTH_GET_LOGIN_REQUEST\n  };\n}; //слушатель Саги GETlogin\n\nexport const confirmAuthorization = (data, passwordFromLoginWindow) => {\n  console.log('Это actions redux - провести авторизацию ', data);\n\n  if (data.password === passwordFromLoginWindow) {\n    return {\n      type: SAVE_DATA_AUTH,\n      payload: data\n    };\n  } else {\n    data.password = \"notConfirmed\";\n    return {\n      type: SAVE_DATA_AUTH,\n      payload: data\n    };\n  }\n};\nexport const flagOpenWarningPasswordNotConfimed = (data, passwordFromLoginWindow) => {\n  let flag = true;\n\n  if (data.password !== passwordFromLoginWindow) {\n    flag = false;\n  }\n\n  ;\n  console.log('Это actions redux - confirmPasswordFlagOpenWindowAuth flag ', flag);\n  return {\n    type: FLAG_REPEAT_PASSWORD_AUTH,\n    payload: flag\n  };\n};\nexport const flagRepeatPasswordAuth = data => {\n  return {\n    type: FLAG_REPEAT_PASSWORD_AUTH,\n    payload: data\n  };\n};\nexport const confirmLogin = data => {\n  if (data.title === \"Not Found\") {\n    return {\n      type: FLAG_LOGIN_CONFIRMED,\n      payload: false\n    };\n  }\n\n  ;\n  return {\n    type: FLAG_LOGIN_CONFIRMED,\n    payload: true\n  };\n};","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/store/Authorization/actionsAuthorization.js"],"names":["START_SAGAS_AUTH_POST_REQUEST","SAVE_DATA_AUTH","START_SAGAS_AUTH_GET_LOGIN_REQUEST","SAVE_DATA_FROM_LOGIN_WINDOW","FLAG_LOGIN_CONFIRMED","FLAG_REPEAT_PASSWORD_AUTH","startSagasAuthPOSTRequestServer","type","saveDataAuthorization","data","console","log","payload","saveDataFromLoginWindow","startSagasAuthGETloginRequestServer","confirmAuthorization","passwordFromLoginWindow","password","flagOpenWarningPasswordNotConfimed","flag","flagRepeatPasswordAuth","confirmLogin","title"],"mappings":"AAAA,SACIA,6BADJ,EAEIC,cAFJ,EAGIC,kCAHJ,EAIIC,2BAJJ,EAKIC,oBALJ,EAMIC,yBANJ,QAOO,SAPP;AASA,OAAO,MAAMC,+BAA+B,GAAG,MAAM;AAEjD,SAAO;AACHC,IAAAA,IAAI,EAAEP;AADH,GAAP;AAGH,CALM,C,CAKL;;AAEF,OAAO,MAAMQ,qBAAqB,GAAIC,IAAD,IAAU;AAE3CC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,IAArC;AAEA,SAAO;AACHF,IAAAA,IAAI,EAAEN,cADH;AAEHW,IAAAA,OAAO,EAAEH;AAFN,GAAP;AAIH,CARM;AAUP,OAAO,MAAMI,uBAAuB,GAAIJ,IAAD,IAAU;AAE7CC,EAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ,EAAkEF,IAAlE;AAEA,SAAO;AACHF,IAAAA,IAAI,EAAEJ,2BADH;AAEHS,IAAAA,OAAO,EAAEH;AAFN,GAAP;AAIH,CARM;AAUP,OAAO,MAAMK,mCAAmC,GAAG,MAAM;AAErDJ,EAAAA,OAAO,CAACC,GAAR,CAAY,mEAAZ;AAEA,SAAO;AACHJ,IAAAA,IAAI,EAAEL;AADH,GAAP;AAGH,CAPM,C,CAOL;;AAEF,OAAO,MAAMa,oBAAoB,GAAG,CAACN,IAAD,EAAOO,uBAAP,KAAmC;AAEnEN,EAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDF,IAAzD;;AAEA,MAAIA,IAAI,CAACQ,QAAL,KAAkBD,uBAAtB,EAA+C;AAE3C,WAAO;AACHT,MAAAA,IAAI,EAAEN,cADH;AAEHW,MAAAA,OAAO,EAAEH;AAFN,KAAP;AAIH,GAND,MAMO;AACHA,IAAAA,IAAI,CAACQ,QAAL,GAAgB,cAAhB;AAEA,WAAO;AACHV,MAAAA,IAAI,EAAEN,cADH;AAEHW,MAAAA,OAAO,EAAEH;AAFN,KAAP;AAIH;AACJ,CAlBM;AAmBP,OAAO,MAAMS,kCAAkC,GAAG,CAACT,IAAD,EAAOO,uBAAP,KAAmC;AAEjF,MAAIG,IAAI,GAAG,IAAX;;AACA,MAAIV,IAAI,CAACQ,QAAL,KAAkBD,uBAAtB,EAA+C;AAC3CG,IAAAA,IAAI,GAAG,KAAP;AACH;;AAAA;AACDT,EAAAA,OAAO,CAACC,GAAR,CAAY,6DAAZ,EAA2EQ,IAA3E;AACI,SAAO;AACHZ,IAAAA,IAAI,EAAEF,yBADH;AAEHO,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIP,CAXM;AAYP,OAAO,MAAMC,sBAAsB,GAAIX,IAAD,IAAU;AAE5C,SAAO;AACHF,IAAAA,IAAI,EAAEF,yBADH;AAEHO,IAAAA,OAAO,EAAEH;AAFN,GAAP;AAIH,CANM;AAQP,OAAO,MAAMY,YAAY,GAAIZ,IAAD,IAAU;AAC9B,MAAIA,IAAI,CAACa,KAAL,KAAe,WAAnB,EAAgC;AAC5B,WAAO;AACHf,MAAAA,IAAI,EAAEH,oBADH;AAEHQ,MAAAA,OAAO,EAAE;AAFN,KAAP;AAIH;;AAAA;AACD,SAAO;AACHL,IAAAA,IAAI,EAAEH,oBADH;AAEHQ,IAAAA,OAAO,EAAE;AAFN,GAAP;AAIH,CAXE","sourcesContent":["import {\r\n    START_SAGAS_AUTH_POST_REQUEST,\r\n    SAVE_DATA_AUTH,\r\n    START_SAGAS_AUTH_GET_LOGIN_REQUEST,\r\n    SAVE_DATA_FROM_LOGIN_WINDOW,\r\n    FLAG_LOGIN_CONFIRMED,\r\n    FLAG_REPEAT_PASSWORD_AUTH\r\n} from \"./types\";\r\n\r\nexport const startSagasAuthPOSTRequestServer = () => {\r\n\r\n    return {\r\n        type: START_SAGAS_AUTH_POST_REQUEST\r\n    }\r\n} //слушатель Саги на ввод нового пользователя\r\n\r\nexport const saveDataAuthorization = (data) => {\r\n\r\n    console.log(' в redux сохранилось ', data);\r\n\r\n    return {\r\n        type: SAVE_DATA_AUTH,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const saveDataFromLoginWindow = (data) => {\r\n\r\n    console.log(' сохраняем данные в redux для сравнения с сервером', data);\r\n\r\n    return {\r\n        type: SAVE_DATA_FROM_LOGIN_WINDOW,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const startSagasAuthGETloginRequestServer = () => {\r\n\r\n    console.log(' это слушатель саги from store START_SAGAS_AUTH_GET_LOGIN_REQUEST');\r\n\r\n    return {\r\n        type: START_SAGAS_AUTH_GET_LOGIN_REQUEST\r\n    }\r\n} //слушатель Саги GETlogin\r\n\r\nexport const confirmAuthorization = (data, passwordFromLoginWindow) => {\r\n\r\n    console.log('Это actions redux - провести авторизацию ', data);\r\n\r\n    if (data.password === passwordFromLoginWindow) {\r\n\r\n        return {\r\n            type: SAVE_DATA_AUTH,\r\n            payload: data\r\n        }\r\n    } else {\r\n        data.password = \"notConfirmed\";\r\n\r\n        return {\r\n            type: SAVE_DATA_AUTH,\r\n            payload: data\r\n        }\r\n    }\r\n}\r\nexport const flagOpenWarningPasswordNotConfimed = (data, passwordFromLoginWindow) => {\r\n\r\n    let flag = true;\r\n    if (data.password !== passwordFromLoginWindow) {\r\n        flag = false;\r\n    };\r\n    console.log('Это actions redux - confirmPasswordFlagOpenWindowAuth flag ', flag);\r\n        return {\r\n            type: FLAG_REPEAT_PASSWORD_AUTH,\r\n            payload: flag\r\n        }\r\n}\r\nexport const flagRepeatPasswordAuth = (data) => {\r\n\r\n    return {\r\n        type: FLAG_REPEAT_PASSWORD_AUTH,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const confirmLogin = (data) => {\r\n        if (data.title === \"Not Found\") {\r\n            return {\r\n                type: FLAG_LOGIN_CONFIRMED,\r\n                payload: false\r\n            }\r\n        };\r\n        return {\r\n            type: FLAG_LOGIN_CONFIRMED,\r\n            payload: true\r\n        }\r\n    }"]},"metadata":{},"sourceType":"module"}