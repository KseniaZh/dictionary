{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\User\\\\CompareUser.js\";\nimport React, { useEffect } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport Basis from '../Basis/Basis';\nimport { sortingCompareArr } from '../../store/User/actions/actionsCompareUser';\nimport { saveDataStore } from '../../store/BasisReport/actions/actionFocusData';\nimport { saveTypeRequest, saveNameWindow } from '../../store/User/actions/actionEditWindowUser';\nimport { changeAdressOpenTable } from '../../store/User/actions/actionsLinksUser';\nimport { addDescription } from \"../../store/Description/actionsDescription\";\nimport { clearCompareArr, deleteDataCompareArr } from '../../store/User/actions/actionsCompareUser';\nimport { changeFlagOpenCompareWindow } from '../../store/User/actions/actionsFlagsUser';\n\nfunction CompareUser(props) {\n  const dispatch = useDispatch();\n  const compareArr = useSelector(state => state.stateCompareUser); // массив строк, избранных для сравнения\n\n  const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\n\n  const links = useSelector(state => state.stateLinksUser); //список ссылок для переходов между окнами\n\n  const visibleNameСolumns = useSelector(state => state.stateInputEditWindowUser.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\n\n  const typeDataColumns = useSelector(state => state.stateInputEditWindowUser.typeData); // тип данных значений, заполняющих колонки\n\n  const flagOpenCompareWindow = useSelector(state => state.stateFlagsUser.flagOpenCompareWindow);\n  const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll); // разрешен ли пользователем показ подсказок\n\n  const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга\n\n  const focusNull = () => {\n    dispatch(saveDataStore({\n      \"uid\": \"\",\n      \"login\": \"\",\n      \"name\": \"\",\n      \"password\": \"\",\n      \"isDeleted\": false,\n      \"isSuperUser\": false,\n      \"docInfo\": [],\n      \"projectAuthorU\": [],\n      \"projectUpdaterU\": [],\n      \"userProjects\": []\n    }));\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const hendlerClearCompareArr = () => {\n    dispatch(clearCompareArr());\n    dispatch(changeFlagOpenCompareWindow(false)); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase));\n  };\n\n  const hendlerDeleteContext = () => {\n    dispatch(deleteDataCompareArr(focusData, compareArr)); // удалить из массива сравнений\n    //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\n\n    focusNull();\n  };\n\n  const hendlerCloseWindow = () => {\n    dispatch(changeFlagOpenCompareWindow(false)); //закрываем окно и поэтому обнуляем хранение фокуса:\n\n    focusNull(); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase));\n  };\n\n  const stateCompareConsoleButton = [{\n    text: \"Внести изменения\",\n    name: 'edit',\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить из базы данных\",\n    name: 'delete',\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Убрать из сравнения\",\n    name: 'deleteList',\n    icon: \"fa fa-times-circle\",\n    onclick: hendlerDeleteContext,\n    data: focusData,\n    link: links.linkCompare\n  }, {\n    text: \"Очистить список сравнений\",\n    name: 'clear',\n    icon: \"fa fa-minus-square-o\",\n    onclick: hendlerClearCompareArr,\n    link: links.linkBase\n  }, {\n    text: \"Назад\",\n    name: 'back',\n    icon: \"fa fa-share\",\n    onclick: hendlerCloseWindow,\n    link: links.linkBase\n  }];\n\n  const funcSorting = data => dispatch(sortingCompareArr(data));\n\n  const haveDescription = dataStateConsoleButton => {\n    //добавляем подсказки на кнопки консоли\n    if (flagEmployDescription === true) {\n      let aboutDescription = {};\n      dataStateConsoleButton.map(obj => {\n        aboutDescription[obj.name] = [obj.text];\n      });\n      dispatch(addDescription(aboutDescription, arrDescription));\n    }\n\n    ;\n  }; //useEffect(() => {\n  //    haveDescription(stateCompareConsoleButton);\n  //}, [])\n\n\n  return /*#__PURE__*/React.createElement(Basis, {\n    stateCompareConsoleButton: stateCompareConsoleButton,\n    focusNull: focusNull,\n    visibleNameСolumns: visibleNameСolumns,\n    typeDataColumns: typeDataColumns,\n    flagOpenCompareWindow: flagOpenCompareWindow,\n    compareArr: compareArr,\n    hendlerDeleteContext: hendlerDeleteContext,\n    funcSorting: funcSorting,\n    hendlerCloseWindow: hendlerCloseWindow,\n    links: links,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default connect()(CompareUser);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/User/CompareUser.js"],"names":["React","useEffect","connect","useDispatch","useSelector","Basis","sortingCompareArr","saveDataStore","saveTypeRequest","saveNameWindow","changeAdressOpenTable","addDescription","clearCompareArr","deleteDataCompareArr","changeFlagOpenCompareWindow","CompareUser","props","dispatch","compareArr","state","stateCompareUser","focusData","links","stateLinksUser","visibleNameСolumns","stateInputEditWindowUser","nameСolumnsTableList","typeDataColumns","typeData","flagOpenCompareWindow","stateFlagsUser","flagEmployDescription","stateFlagsAll","employDescriptionAll","arrDescription","stateDescription","focusNull","hendlerOpenWindow","nameWindow","typeRequest","hendlerClearCompareArr","linkBase","hendlerDeleteContext","hendlerCloseWindow","stateCompareConsoleButton","text","name","icon","onclick","link","linkEditWindow","linkWindowConfirmDeleting","data","linkCompare","funcSorting","haveDescription","dataStateConsoleButton","aboutDescription","map","obj"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport Basis from '../Basis/Basis';\r\n\r\nimport { sortingCompareArr } from '../../store/User/actions/actionsCompareUser';\r\n\r\nimport {\r\n    saveDataStore\r\n} from '../../store/BasisReport/actions/actionFocusData';\r\nimport {\r\n    saveTypeRequest,\r\n    saveNameWindow\r\n} from '../../store/User/actions/actionEditWindowUser';\r\n\r\nimport { changeAdressOpenTable } from '../../store/User/actions/actionsLinksUser';\r\n\r\nimport {\r\n    addDescription\r\n} from \"../../store/Description/actionsDescription\";\r\n\r\nimport {\r\n    clearCompareArr,\r\n    deleteDataCompareArr\r\n} from '../../store/User/actions/actionsCompareUser';\r\nimport {\r\n    changeFlagOpenCompareWindow\r\n} from '../../store/User/actions/actionsFlagsUser';\r\n\r\n\r\nfunction CompareUser(props) {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const compareArr = useSelector(state => state.stateCompareUser); // массив строк, избранных для сравнения\r\n\r\n    const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\r\n\r\n    const links = useSelector(state => state.stateLinksUser); //список ссылок для переходов между окнами\r\n\r\n    const visibleNameСolumns = useSelector(state => state.stateInputEditWindowUser.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\r\n\r\n    const typeDataColumns = useSelector(state => state.stateInputEditWindowUser.typeData); // тип данных значений, заполняющих колонки\r\n\r\n    const flagOpenCompareWindow = useSelector(state => state.stateFlagsUser.flagOpenCompareWindow);\r\n\r\n    const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll) // разрешен ли пользователем показ подсказок\r\n\r\n    const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга\r\n\r\n    const focusNull = () => {\r\n        dispatch(saveDataStore({\r\n            \"uid\": \"\",\r\n            \"login\": \"\",\r\n            \"name\": \"\",\r\n            \"password\": \"\",\r\n            \"isDeleted\": false,\r\n            \"isSuperUser\": false,\r\n            \"docInfo\": [],\r\n            \"projectAuthorU\": [],\r\n            \"projectUpdaterU\": [],\r\n            \"userProjects\": []\r\n        }));\r\n    }\r\n\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n\r\n    const hendlerClearCompareArr = () => {\r\n        dispatch(clearCompareArr());\r\n        dispatch(changeFlagOpenCompareWindow(false));\r\n        // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n        dispatch(changeAdressOpenTable(links.linkBase));\r\n    }\r\n    \r\n    const hendlerDeleteContext = () => {\r\n        dispatch(deleteDataCompareArr(focusData, compareArr)); // удалить из массива сравнений\r\n        //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\r\n        focusNull();\r\n    }\r\n\r\n    const hendlerCloseWindow = () => {\r\n            dispatch(changeFlagOpenCompareWindow(false));\r\n            //закрываем окно и поэтому обнуляем хранение фокуса:\r\n            focusNull();\r\n            // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n            dispatch(changeAdressOpenTable(links.linkBase));\r\n    }\r\n\r\n\r\n    const stateCompareConsoleButton = [\r\n\r\n        {\r\n            text: \"Внести изменения\",\r\n            name: 'edit',\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Удалить из базы данных\",\r\n            name: 'delete',\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Убрать из сравнения\",\r\n            name: 'deleteList',\r\n            icon: \"fa fa-times-circle\",\r\n            onclick: hendlerDeleteContext,\r\n            data: focusData,\r\n            link: links.linkCompare\r\n        },\r\n        {\r\n            text: \"Очистить список сравнений\",\r\n            name: 'clear',\r\n            icon: \"fa fa-minus-square-o\",\r\n            onclick: hendlerClearCompareArr,\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Назад\",\r\n            name: 'back',\r\n            icon: \"fa fa-share\",\r\n            onclick: hendlerCloseWindow,\r\n            link: links.linkBase\r\n        }\r\n    ];\r\n\r\n    const funcSorting = (data) => dispatch(sortingCompareArr(data));  \r\n\r\n    const haveDescription = (dataStateConsoleButton) => {\r\n        //добавляем подсказки на кнопки консоли\r\n        if (flagEmployDescription === true) {\r\n            let aboutDescription = {};\r\n            dataStateConsoleButton.map((obj) => {\r\n                aboutDescription[obj.name] = [obj.text];\r\n            });\r\n            dispatch(addDescription(aboutDescription, arrDescription));\r\n        };\r\n    }\r\n\r\n    //useEffect(() => {\r\n\r\n    //    haveDescription(stateCompareConsoleButton);\r\n\r\n    //}, [])\r\n    return (\r\n\r\n        <Basis\r\n            stateCompareConsoleButton={stateCompareConsoleButton}\r\n            focusNull={focusNull}\r\n            visibleNameСolumns={visibleNameСolumns}\r\n            typeDataColumns={typeDataColumns}\r\n            flagOpenCompareWindow={flagOpenCompareWindow}\r\n            compareArr={compareArr}\r\n            hendlerDeleteContext={hendlerDeleteContext}\r\n            funcSorting={funcSorting}\r\n            hendlerCloseWindow={hendlerCloseWindow}\r\n            links={links}\r\n        />\r\n    )\r\n}\r\n\r\nexport default connect()(CompareUser)"]},"metadata":{},"sourceType":"module"}