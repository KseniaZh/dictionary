{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\hoc\\\\withSearch.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../styles/const_color';\nimport { saveDataStore } from '../store/EltypeClass/actions/actionEltypeClass';\nimport { changeNumberList } from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\n\nconst mapStateToProps = state => {\n  return {\n    countRow: state.stateFlagsEltypeClass.countRowTable,\n    // количество строк на отображаемой странице\n    focusData: state.createDataEltypeClass.stateData\n  };\n};\n\nconst mapDispatchToProps = {\n  saveDataStore,\n  changeNumberList\n};\n\nconst withSearch = (Component, data) => {\n  class ComponentWithSort extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.hendlerSearch = event => {\n        //    event.preventDefault();\n        if (event.target.value === '') {\n          return;\n        }\n\n        ; //если пусто, выходим\n\n        let num; // номер выбранного объекта в массиве\n\n        this.dataBase.map((obj, index) => {\n          if (obj.name === event.target.value) {\n            num = index + 1;\n            this.numRowOnPage = index + 1;\n            this.props.saveDataStore(obj); // сохранить фокус в хранилище\n          }\n        }); //поиск номера страницы\n\n        let i = this.props.countRow;\n        let numList = 1;\n\n        if (num === undefined) {\n          return;\n        }\n\n        ; //если пусто, выходим\n\n        while (i < num) {\n          i = i + this.props.countRow;\n          this.numRowOnPage = this.numRowOnPage - this.props.countRow;\n          numList++;\n        }\n\n        this.props.changeNumberList(numList); //сохраняем номер\n\n        this.props.getDataPageRowTable(data, this.props.countRow, numList); // загружаем выбранный лист\n\n        const tablebody = document.querySelector('tbody');\n\n        for (let child of tablebody.children) {\n          child.style.background = tablebodyBackground_Coffee; //убираем цвет ранее выбранной строки\n        }\n\n        ;\n        tablebody.children[this.numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\n\n        tablebody.children[this.numRowOnPage - 1].children[1].focus();\n      };\n\n      this.numRowOnPage = 0; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\n\n      this.dataBase = data;\n    }\n\n    render() {\n      let props = { ...this.props,\n        onchange: this.hendlerSearch,\n        dataBase: this.dataBase\n      };\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }\n      }));\n    }\n\n  }\n\n  return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort);\n};\n\nexport default withSearch; //onchange: this.hendlerSearch\n//arrValue: (39)[{ … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }]\n//autocomplete: \"off\"\n//classInputDatalis: \"searchInputDatalis_HeaderDataBase\"\n//id: \"SearchBaseName\"\n//listId: \"SearchNameBase\"\n//onchange: event => { console.log('event ', event); }\n//placeholder: \"Поиск по наименованию\"\n//__proto__: Object","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/hoc/withSearch.js"],"names":["React","connect","tablebodyBackground_Coffee","rowFocus_Coffee","saveDataStore","changeNumberList","mapStateToProps","state","countRow","stateFlagsEltypeClass","countRowTable","focusData","createDataEltypeClass","stateData","mapDispatchToProps","withSearch","Component","data","ComponentWithSort","constructor","props","hendlerSearch","event","target","value","num","dataBase","map","obj","index","name","numRowOnPage","i","numList","undefined","getDataPageRowTable","tablebody","document","querySelector","child","children","style","background","focus","render","onchange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../styles/const_color';\r\n\r\nimport {\r\n    saveDataStore\r\n} from '../store/EltypeClass/actions/actionEltypeClass';\r\nimport {\r\n    changeNumberList\r\n} from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        countRow: state.stateFlagsEltypeClass.countRowTable, // количество строк на отображаемой странице\r\n        focusData: state.createDataEltypeClass.stateData,\r\n        }\r\n    }\r\nconst mapDispatchToProps = {\r\n    saveDataStore,\r\n    changeNumberList\r\n}\r\n\r\nconst withSearch = (Component, data) => {\r\n\r\n \r\n    class ComponentWithSort extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.numRowOnPage = 0; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\r\n            this.dataBase = data;\r\n        }\r\n        hendlerSearch = (event) => {\r\n\r\n\r\n        //    event.preventDefault();\r\n\r\n            if (event.target.value === '') { return }; //если пусто, выходим\r\n            let num; // номер выбранного объекта в массиве\r\n\r\n            this.dataBase.map((obj, index) => {\r\n\r\n                if (obj.name === event.target.value) {\r\n                    num = index + 1;\r\n                    this.numRowOnPage = index + 1;\r\n                    this.props.saveDataStore(obj); // сохранить фокус в хранилище\r\n                }\r\n            });\r\n            //поиск номера страницы\r\n            let i = this.props.countRow;\r\n            let numList = 1;\r\n            if (num === undefined) { return }; //если пусто, выходим\r\n\r\n            while (i < num) {\r\n                i = i + this.props.countRow;\r\n                this.numRowOnPage = this.numRowOnPage - this.props.countRow;\r\n                numList++;\r\n            }\r\n\r\n            this.props.changeNumberList(numList); //сохраняем номер\r\n            this.props.getDataPageRowTable(data, this.props.countRow, numList);// загружаем выбранный лист\r\n\r\n            const tablebody = document.querySelector('tbody');\r\n\r\n            for (let child of tablebody.children) {\r\n                child.style.background = tablebodyBackground_Coffee;//убираем цвет ранее выбранной строки\r\n            };\r\n\r\n            tablebody.children[this.numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\r\n            tablebody.children[this.numRowOnPage - 1].children[1].focus();\r\n        }\r\n\r\n        render() {\r\n            let props = {\r\n                ...this.props,\r\n                onchange: this.hendlerSearch,\r\n                dataBase: this.dataBase\r\n            }\r\n\r\n            return (\r\n                <Component {...props} />\r\n                )\r\n        }\r\n    }\r\n    return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort)\r\n}\r\nexport default withSearch\r\n\r\n//onchange: this.hendlerSearch\r\n\r\n\r\n\r\n\r\n\r\n\r\n//arrValue: (39)[{ … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }, { … }]\r\n//autocomplete: \"off\"\r\n//classInputDatalis: \"searchInputDatalis_HeaderDataBase\"\r\n//id: \"SearchBaseName\"\r\n//listId: \"SearchNameBase\"\r\n//onchange: event => { console.log('event ', event); }\r\n//placeholder: \"Поиск по наименованию\"\r\n//__proto__: Object"]},"metadata":{},"sourceType":"module"}