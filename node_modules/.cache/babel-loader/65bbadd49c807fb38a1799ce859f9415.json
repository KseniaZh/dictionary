{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\EltypeClass.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\nimport TableList from '../../components/Table/TableListEltypeClass';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\nimport { startGetRequestServerEltypeClass, saveDataStore, saveTypeRequest, saveNameWindow } from '../../store/EltypeClass/actions/actionEltypeClass';\nimport { changeCountRowTable, getCounterPagesTable, getDataPageRowTable } from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\nimport { linkEditWindowEltypeClass } from '../Navigation/Main';\nimport { linkWindowConfirmDeleting } from '../Navigation/Main';\n\nfunction EltypeClass(props) {\n  const linkAddressWindowEdit = linkEditWindowEltypeClass;\n  const linkAddressWindowDelete = linkWindowConfirmDeleting;\n  const dispatch = useDispatch();\n  const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\n  const stateTable = useSelector(state => state.stateTableEltypeClass);\n  const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable);\n  const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable);\n  const statePageTable = useSelector(state => state.stateFlagsEltypeClass.statePageTable);\n\n  const handlerTableRowUID = (event, data) => {\n    event.preventDefault();\n    stateTable.map((obj, index) => {\n      if (obj.uid === data) {\n        console.log(\"index \", index);\n        dispatch(saveDataStore(obj));\n      }\n    });\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const HendlerOnMouseover = () => {};\n\n  const HendlerOnMouseLeave = () => {};\n\n  const [flagCountRow, setFlagCoutnRow] = useState(false);\n\n  const hendlerInputOpen = () => {\n    setFlagCoutnRow(true);\n  };\n\n  const hendlerChangeCountRow = event => {\n    event.preventDefault();\n    dispatch(changeCountRowTable(event.target.value));\n  };\n\n  const hendlerInputSave = () => {\n    setFlagCoutnRow(false);\n    dispatch(getCounterPagesTable(stateTable, countRow));\n  };\n\n  const [numberRow, setNumberRow] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n  const hendlerOpenPagesTable = num => {\n    dispatch(getDataPageRowTable(stateTable, countRow, num));\n    let arrNumberRow = [];\n\n    for (let firstNumber = countRow * (num - 1) + 1; firstNumber >= countRow * num; firstNumber++) {\n      arrNumberRow.push(firstNumber);\n    }\n\n    ;\n    setNumberRow(arrNumberRow);\n    console.log('arrNumberRow', arrNumberRow);\n  };\n\n  useEffect(() => {\n    dispatch(startGetRequestServerEltypeClass());\n  }, []);\n  const stateConsoleButton = [{\n    text: \"Обновить\",\n    icon: \"fa fa-download fa-lg\",\n    onclick: () => {\n      dispatch(startGetRequestServerEltypeClass());\n    }\n  }, {\n    text: \"Добавить новые данные\",\n    icon: \"fa fa-plus fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\")\n  }, {\n    text: \"Внести изменения\",\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\")\n  }, {\n    text: \"Удалить\",\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {}\n  }, {\n    text: \"Показать только активные\",\n    icon: \"fa fa-filter fa-lg\",\n    onclick: () => console.log('click')\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__header__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButton, {\n    classnameWrapper: \"DataBase__header__console\",\n    linkWindowEdit: linkAddressWindowEdit,\n    linkWindowConfirmDeleting: linkAddressWindowDelete,\n    stateConsoleButton: stateConsoleButton,\n    onmouseover: HendlerOnMouseover,\n    onmouseleave: HendlerOnMouseLeave,\n    tabindex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classname: \"DataBase__header__header\",\n    nameHeader: \"\\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  })), stateLoading ? /*#__PURE__*/React.createElement(AwaitLoading, {\n    classname: \"Loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(TableList, {\n    classname: \"DataBase__table__container\",\n    classnameConsoleCountRow: \"ConsoleCountRow\",\n    classnameButtonConsoleCountPow: \"PersonalizeButton\",\n    columnName: Object.keys(stateTable[0]),\n    dataTable: statePageTable,\n    onclick: (event, data) => handlerTableRowUID(event, data),\n    onclickOpenPagesTable: numButton => hendlerOpenPagesTable(numButton),\n    onclickInputOpen: hendlerInputOpen,\n    onclickInputSave: hendlerInputSave,\n    flagCountRow: flagCountRow,\n    onchange: hendlerChangeCountRow,\n    CountRow: countRow,\n    counterPages: counterPages,\n    numberRow: numberRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 31\n    }\n  }));\n}\n\nexport default connect()(EltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/EltypeClass.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","ConsoleButton","TableList","HeaderDictionary","AwaitLoading","startGetRequestServerEltypeClass","saveDataStore","saveTypeRequest","saveNameWindow","changeCountRowTable","getCounterPagesTable","getDataPageRowTable","linkEditWindowEltypeClass","linkWindowConfirmDeleting","EltypeClass","props","linkAddressWindowEdit","linkAddressWindowDelete","dispatch","stateLoading","state","stateFlagsEltypeClass","loading","stateTable","stateTableEltypeClass","counterPages","counterPagesTable","countRow","countRowTable","statePageTable","handlerTableRowUID","event","data","preventDefault","map","obj","index","uid","console","log","hendlerOpenWindow","nameWindow","typeRequest","HendlerOnMouseover","HendlerOnMouseLeave","flagCountRow","setFlagCoutnRow","hendlerInputOpen","hendlerChangeCountRow","target","value","hendlerInputSave","numberRow","setNumberRow","hendlerOpenPagesTable","num","arrNumberRow","firstNumber","push","stateConsoleButton","text","icon","onclick","Object","keys","numButton"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\r\nimport TableList from '../../components/Table/TableListEltypeClass';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\r\n\r\nimport {\r\n        startGetRequestServerEltypeClass,\r\n        saveDataStore,\r\n        saveTypeRequest,\r\n        saveNameWindow\r\n} from '../../store/EltypeClass/actions/actionEltypeClass';\r\n\r\nimport {\r\n        changeCountRowTable,\r\n        getCounterPagesTable,\r\n        getDataPageRowTable\r\n} from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\n\r\nimport { linkEditWindowEltypeClass } from '../Navigation/Main';\r\nimport { linkWindowConfirmDeleting } from '../Navigation/Main';\r\n\r\n\r\n\r\nfunction EltypeClass(props) {\r\n\r\n    const linkAddressWindowEdit = linkEditWindowEltypeClass;\r\n    const linkAddressWindowDelete = linkWindowConfirmDeleting;\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\r\n\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass);\r\n\r\n    const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable);\r\n\r\n    const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable);\r\n\r\n    const statePageTable = useSelector(state => state.stateFlagsEltypeClass.statePageTable);\r\n\r\n    const handlerTableRowUID = (event, data)=>{\r\n        event.preventDefault();\r\n        \r\n        stateTable.map( (obj, index) => {\r\n            if (obj.uid === data){\r\n                console.log(\"index \", index);\r\n                dispatch(saveDataStore(obj));\r\n            }\r\n        })\r\n    }\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n    const HendlerOnMouseover = () => {\r\n\r\n    }\r\n    const HendlerOnMouseLeave = () => {\r\n\r\n    }\r\n\r\n    const [flagCountRow, setFlagCoutnRow] = useState(false);\r\n\r\n    const hendlerInputOpen = () => {\r\n        setFlagCoutnRow(true);\r\n    }\r\n\r\n    const hendlerChangeCountRow = (event) => {\r\n            event.preventDefault();\r\n            dispatch(changeCountRowTable(event.target.value));\r\n    }\r\n\r\n    const hendlerInputSave = () => {\r\n            setFlagCoutnRow(false);\r\n            dispatch(getCounterPagesTable(stateTable, countRow));\r\n    }\r\n\r\n    const [numberRow, setNumberRow] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\r\n\r\n    const hendlerOpenPagesTable = (num) => {\r\n\r\n        dispatch(getDataPageRowTable(stateTable, countRow, num));\r\n\r\n        let arrNumberRow = [];\r\n        \r\n        for (let firstNumber = countRow * (num - 1) + 1; firstNumber >= countRow * num; firstNumber++) {\r\n            arrNumberRow.push(firstNumber);\r\n        };\r\n        setNumberRow(arrNumberRow);\r\n        console.log('arrNumberRow', arrNumberRow);\r\n    }\r\n\r\n\r\n useEffect(() => {\r\n     dispatch(startGetRequestServerEltypeClass());\r\n\r\n    }, [])\r\n\r\n\r\n    const stateConsoleButton = [\r\n        {\r\n            text: \"Обновить\",\r\n            icon: \"fa fa-download fa-lg\",\r\n            onclick: () => { dispatch(startGetRequestServerEltypeClass()) }\r\n            },\r\n        {\r\n            text: \"Добавить новые данные\",\r\n            icon: \"fa fa-plus fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\")\r\n            },\r\n        {\r\n            text: \"Внести изменения\",\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\")\r\n            },\r\n        {\r\n            text: \"Удалить\",\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => {}\r\n            },\r\n        {\r\n            text: \"Показать только активные\",\r\n            icon: \"fa fa-filter fa-lg\",\r\n            onclick: () => console.log('click')\r\n            }\r\n    ];\r\n    \r\n    return (\r\n        <div className=\"DataBase__container\">\r\n \r\n                <div className=\"DataBase__header__container\">\r\n                    <ConsoleButton\r\n                            classnameWrapper=\"DataBase__header__console\"\r\n\r\n                            linkWindowEdit={linkAddressWindowEdit}\r\n                            linkWindowConfirmDeleting={linkAddressWindowDelete}\r\n        \r\n                            stateConsoleButton = {stateConsoleButton}\r\n\r\n                            onmouseover={HendlerOnMouseover}\r\n                            onmouseleave={HendlerOnMouseLeave}\r\n\r\n                            tabindex=\"-1\"\r\n\r\n                            />\r\n\r\n                    <HeaderDictionary\r\n                            classname=\"DataBase__header__header\"\r\n                            nameHeader=\"Классы для Типов связей и Типов сущностей\"\r\n                        />\r\n                </div>\r\n                {\r\n                        stateLoading ?\r\n                            <AwaitLoading\r\n                                classname=\"Loading\"\r\n                            />\r\n                            : <TableList\r\n                                    classname=\"DataBase__table__container\"\r\n                                    classnameConsoleCountRow='ConsoleCountRow'\r\n                                    classnameButtonConsoleCountPow=\"PersonalizeButton\"\r\n                                    columnName={Object.keys(stateTable[0])}\r\n                                    dataTable={statePageTable}\r\n                                    onclick={(event, data) => handlerTableRowUID(event, data)}\r\n                                    onclickOpenPagesTable={(numButton) => hendlerOpenPagesTable(numButton)}\r\n                                    onclickInputOpen={hendlerInputOpen}\r\n                                    onclickInputSave={hendlerInputSave}\r\n                                    flagCountRow={flagCountRow}\r\n                                    onchange={hendlerChangeCountRow}\r\n                                    CountRow={countRow}\r\n                                    counterPages={counterPages}\r\n                                    numberRow={numberRow}\r\n                        /> \r\n                }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default connect()(EltypeClass)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}