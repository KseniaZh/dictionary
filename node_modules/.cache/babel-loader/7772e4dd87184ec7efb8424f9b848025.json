{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\User\\\\User.js\";\nimport React, { useEffect } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\nimport TableList from '../../components/Table/TableListUser';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\nimport { startUser_GET_RequestServer } from '../../store/User/actions/actionUser';\nimport { saveDataStore } from '../../store/BasisReport/actions/actionFocusData';\nimport { saveTypeRequest, saveNameWindow } from '../../store/User/actions/actionEditWindowUser';\nimport { changeNumberList, getDataPageRowTable } from '../../store/BasisReport/actions/actionsFlagsBasisReport';\nimport { changeFlagOpenCompareWindow } from '../../store/User/actions/actionsFlagsUser';\nimport { addDescription } from \"../../store/Description/actionsDescription\";\nimport { changeAdressOpenTable } from '../../store/User/actions/actionsLinksUser';\nimport { addDataCompareArr } from '../../store/User/actions/actionsCompareUser';\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\n\nfunction User(props) {\n  const dispatch = useDispatch();\n  const stateLoading = useSelector(state => state.stateFlagsBasisReport.loading);\n  const stateTable = useSelector(state => state.stateBasisReport); //ВСЯ база\n\n  const dataTable = useSelector(state => state.stateFlagsBasisReport.dataListTable); // отображаемый лист\n\n  const visibleNameСolumns = useSelector(state => state.stateInputEditWindowUser.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\n\n  const searchСolumnsName = useSelector(state => state.stateInputEditWindowUser.searchСolumnsName); // объект с разрешением отображения поиска в колонках в таблице\n\n  const searchKey = useSelector(state => state.stateInputEditWindowUser.searchKey); // ключ для типа поиска в окошке в шапке таблицы\n\n  const typeDataColumns = useSelector(state => state.stateInputEditWindowUser.typeData); // тип данных значений, заполняющих колонки\n\n  const countRow = useSelector(state => state.stateFlagsBasisReport.countRowTable); // количество строк на отображаемой странице\n\n  const numberList = useSelector(state => state.stateFlagsBasisReport.numberList); //номер отображаемого листа\n\n  const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\n\n  const compareArr = useSelector(state => state.stateCompareUser); // массив строк, избранных для сравнения\n\n  const links = useSelector(state => state.stateLinksUser); //список ссылок для переходов между окнами\n\n  const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll); // разрешен ли пользователем показ подсказок\n\n  const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга\n  //переключение цветового решения приложения\n\n  const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\n  const staleSelect = useSelector(state => state.stateStyle.styleSelect);\n\n  const focusNull = () => {\n    dispatch(saveDataStore({\n      \"uid\": \"\",\n      \"login\": \"\",\n      \"name\": \"\",\n      \"password\": \"\",\n      \"isDeleted\": false,\n      \"isSuperUser\": false,\n      \"docInfo\": [],\n      \"projectAuthorU\": [],\n      \"projectUpdaterU\": [],\n      \"userProjects\": []\n    }));\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const hendlerAddCompareData = () => {\n    if (focusData.uid === '' || focusData.uid === null || focusData.uid === undefined) {\n      return;\n    }\n\n    ;\n    dispatch(addDataCompareArr(focusData, compareArr));\n  };\n\n  const hendlerOpenCompareWindow = () => {\n    dispatch(changeFlagOpenCompareWindow(true));\n    focusNull();\n    dispatch(changeAdressOpenTable(links.linkCompare));\n  };\n\n  const hendlerSearchBase = event => {\n    event.preventDefault();\n\n    if (event.target.value === '') {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    let num; // номер выбранного объекта в массиве\n\n    stateTable.map((obj, index) => {\n      if (obj[searchKey] === event.target.value) {\n        num = index + 1;\n        console.log('num ', num);\n        dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\n      }\n    }); //поиск номера страницы\n\n    let i = countRow; //3\n\n    console.log('i ', i);\n    let numList = 1;\n\n    if (num === undefined) {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    while (i < num) {\n      i = i + countRow;\n      numList++;\n      console.log('i в цикле while ', i);\n      console.log('numList в цикле while ', numList);\n    }\n\n    dispatch(changeNumberList(numList)); //сохраняем номер\n\n    dispatch(getDataPageRowTable(stateTable, countRow, numList)); // загружаем выбранный лист\n  };\n\n  const hendlerClearSearchInput = event => {\n    const SearchBaseName = document.getElementById('SearchBaseName');\n\n    if (event.target.tagName !== \"INPUT\") {\n      SearchBaseName.value = '';\n    }\n  };\n\n  const stateConsoleButton = [{\n    text: \"Обновить\",\n    name: 'update',\n    icon: \"fa fa-download fa-lg\",\n    onclick: () => {\n      dispatch(startUser_GET_RequestServer());\n    },\n    link: links.linkBase\n  }, {\n    text: \"Добавить новые данные\",\n    name: 'add',\n    icon: \"fa fa-plus fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Внести изменения\",\n    name: 'edit',\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить\",\n    name: 'delete',\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Сравнить\",\n    name: 'compare',\n    icon: \"fa fa-balance-scale\",\n    onclick: hendlerOpenCompareWindow,\n    link: links.linkCompare\n  }, {\n    text: \"Добавить к сравнению\",\n    name: 'addCompare',\n    icon: \"fa fa-filter fa-lg\",\n    onclick: hendlerAddCompareData,\n    link: links.linkBase\n  }];\n\n  const haveDescription = dataStateConsoleButton => {\n    //добавляем подсказки на кнопки консоли\n    if (flagEmployDescription === true) {\n      let aboutDescription = {};\n      dataStateConsoleButton.map(obj => {\n        aboutDescription[obj.name] = [obj.text];\n      });\n      dispatch(addDescription(aboutDescription, arrDescription));\n    }\n\n    ;\n  }; //логика добавления контекстного меню через hoc\n\n\n  const TableListWithContextMenu = withContextMenuWindow(TableList, ContextMenuWindow, stateConsoleButton, \"ContextMenuWindow\");\n  useEffect(() => {\n    dispatch(startUser_GET_RequestServer());\n    document.addEventListener('click', hendlerClearSearchInput);\n    haveDescription(stateConsoleButton);\n    return () => {\n      document.removeEventListener('click', hendlerClearSearchInput);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: stateStylesAll[staleSelect].dataBaseContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: stateStylesAll[staleSelect].dataBaseHeaderContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButton, {\n    classnameWrapper: stateStylesAll[staleSelect].dataBaseHeaderConsole,\n    stateConsoleButton: stateConsoleButton,\n    classnameDescription: stateStylesAll[staleSelect].descriptionButton,\n    tabindex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classname: stateStylesAll[staleSelect].dataBaseHeaderHeader,\n    onchangeSearch: event => hendlerSearchBase(event),\n    nameHeader: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439\",\n    stateTable: stateTable,\n    searchKey: searchKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 25\n    }\n  })), stateLoading ? /*#__PURE__*/React.createElement(AwaitLoading, {\n    classname: stateStylesAll[staleSelect].loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(TableListWithContextMenu, {\n    classname: stateStylesAll[staleSelect].dataBaseTableContainer,\n    classnameConsoleCountRow: stateStylesAll[staleSelect].consoleCountRow,\n    classnameButtonConsoleCountPow: stateStylesAll[staleSelect].personalizeButton,\n    classnameDescription: stateStylesAll[staleSelect].descriptionButton,\n    colorRowTableBackground: stateStylesAll[staleSelect].rowTableBackground,\n    colorFocusRowBackground: stateStylesAll[staleSelect].focusRowBackground,\n    stateTable: stateTable,\n    dataTable: dataTable,\n    visibleNameСolumns: visibleNameСolumns,\n    searchСolumnsName: searchСolumnsName,\n    typeDataColumns: typeDataColumns,\n    func: focusNull,\n    CountRow: countRow,\n    focusData: focusData,\n    numberActivList: numberList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 23\n    }\n  }));\n}\n\nexport default connect()(User);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/User/User.js"],"names":["React","useEffect","connect","useDispatch","useSelector","ConsoleButton","TableList","HeaderDictionary","ContextMenuWindow","AwaitLoading","startUser_GET_RequestServer","saveDataStore","saveTypeRequest","saveNameWindow","changeNumberList","getDataPageRowTable","changeFlagOpenCompareWindow","addDescription","changeAdressOpenTable","addDataCompareArr","withContextMenuWindow","User","props","dispatch","stateLoading","state","stateFlagsBasisReport","loading","stateTable","stateBasisReport","dataTable","dataListTable","visibleNameСolumns","stateInputEditWindowUser","nameСolumnsTableList","searchСolumnsName","searchKey","typeDataColumns","typeData","countRow","countRowTable","numberList","focusData","compareArr","stateCompareUser","links","stateLinksUser","flagEmployDescription","stateFlagsAll","employDescriptionAll","arrDescription","stateDescription","stateStylesAll","stateStyle","stylesAll","staleSelect","styleSelect","focusNull","hendlerOpenWindow","nameWindow","typeRequest","hendlerAddCompareData","uid","undefined","hendlerOpenCompareWindow","linkCompare","hendlerSearchBase","event","preventDefault","target","value","num","map","obj","index","console","log","i","numList","hendlerClearSearchInput","SearchBaseName","document","getElementById","tagName","stateConsoleButton","text","name","icon","onclick","link","linkBase","linkEditWindow","linkWindowConfirmDeleting","haveDescription","dataStateConsoleButton","aboutDescription","TableListWithContextMenu","addEventListener","removeEventListener","dataBaseContainer","dataBaseHeaderContainer","dataBaseHeaderConsole","descriptionButton","dataBaseHeaderHeader","dataBaseTableContainer","consoleCountRow","personalizeButton","rowTableBackground","focusRowBackground"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\r\nimport TableList from '../../components/Table/TableListUser';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\r\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\r\n\r\nimport {\r\n    startUser_GET_RequestServer,\r\n} from '../../store/User/actions/actionUser';\r\nimport {\r\n    saveDataStore\r\n} from '../../store/BasisReport/actions/actionFocusData';\r\nimport {\r\n    saveTypeRequest,\r\n    saveNameWindow\r\n} from '../../store/User/actions/actionEditWindowUser';\r\nimport {\r\n    changeNumberList,\r\n    getDataPageRowTable\r\n} from '../../store/BasisReport/actions/actionsFlagsBasisReport';\r\nimport {\r\n    changeFlagOpenCompareWindow\r\n} from '../../store/User/actions/actionsFlagsUser';\r\n\r\nimport { addDescription } from \"../../store/Description/actionsDescription\";\r\n\r\nimport { changeAdressOpenTable } from '../../store/User/actions/actionsLinksUser';\r\n\r\nimport { addDataCompareArr } from '../../store/User/actions/actionsCompareUser';\r\n\r\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\r\n\r\n\r\nfunction User(props) {\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const stateLoading = useSelector(state => state.stateFlagsBasisReport.loading);\r\n\r\n    const stateTable = useSelector(state => state.stateBasisReport); //ВСЯ база\r\n\r\n    const dataTable = useSelector(state => state.stateFlagsBasisReport.dataListTable); // отображаемый лист\r\n\r\n    const visibleNameСolumns = useSelector(state => state.stateInputEditWindowUser.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\r\n\r\n    const searchСolumnsName = useSelector(state => state.stateInputEditWindowUser.searchСolumnsName); // объект с разрешением отображения поиска в колонках в таблице\r\n\r\n    const searchKey = useSelector(state => state.stateInputEditWindowUser.searchKey); // ключ для типа поиска в окошке в шапке таблицы\r\n\r\n    const typeDataColumns = useSelector(state => state.stateInputEditWindowUser.typeData); // тип данных значений, заполняющих колонки\r\n  \r\n    const countRow = useSelector(state => state.stateFlagsBasisReport.countRowTable); // количество строк на отображаемой странице\r\n\r\n    const numberList = useSelector(state => state.stateFlagsBasisReport.numberList); //номер отображаемого листа\r\n\r\n    const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\r\n\r\n    const compareArr = useSelector(state => state.stateCompareUser); // массив строк, избранных для сравнения\r\n\r\n    const links = useSelector(state => state.stateLinksUser); //список ссылок для переходов между окнами\r\n\r\n    const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll) // разрешен ли пользователем показ подсказок\r\n\r\n    const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга\r\n\r\n    //переключение цветового решения приложения\r\n    const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\r\n    const staleSelect = useSelector(state => state.stateStyle.styleSelect);\r\n\r\n    const focusNull = () => {\r\n        dispatch(saveDataStore({\r\n                                    \"uid\": \"\",\r\n                                    \"login\": \"\",\r\n                                    \"name\": \"\",\r\n                                    \"password\": \"\",\r\n                                    \"isDeleted\": false,\r\n                                    \"isSuperUser\": false,\r\n                                    \"docInfo\": [],\r\n                                    \"projectAuthorU\": [],\r\n                                    \"projectUpdaterU\": [],\r\n                                    \"userProjects\": []\r\n                            }));\r\n    }\r\n\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n\r\n\r\n    const hendlerAddCompareData = () => {\r\n        if (focusData.uid === '' || focusData.uid === null || focusData.uid === undefined) {\r\n            return\r\n        };\r\n        dispatch(addDataCompareArr(focusData, compareArr));\r\n    }\r\n\r\n    const hendlerOpenCompareWindow = () => {\r\n        dispatch(changeFlagOpenCompareWindow(true)); \r\n        focusNull();\r\n        dispatch(changeAdressOpenTable(links.linkCompare)); \r\n    }\r\n\r\n    const hendlerSearchBase = (event) => {\r\n        event.preventDefault();\r\n        if (event.target.value === '') { return }; //если пусто, выходим\r\n\r\n        let num; // номер выбранного объекта в массиве\r\n    \r\n        stateTable.map((obj, index) => {\r\n\r\n            if (obj[searchKey] === event.target.value) {\r\n                num = index + 1;\r\n                console.log('num ', num);\r\n                dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\r\n            }\r\n        });\r\n            //поиск номера страницы\r\n        let i = countRow; //3\r\n        console.log('i ', i);\r\n            let numList = 1;\r\n            if (num === undefined) { return }; //если пусто, выходим\r\n\r\n            while (i < num) {\r\n                i = i + countRow;\r\n                numList++;\r\n                console.log('i в цикле while ', i);\r\n                console.log('numList в цикле while ', numList);\r\n        }\r\n\r\n        dispatch(changeNumberList(numList)); //сохраняем номер\r\n        dispatch(getDataPageRowTable(stateTable, countRow, numList));// загружаем выбранный лист\r\n    }\r\n\r\n\r\n    const hendlerClearSearchInput = event => {\r\n        const SearchBaseName = document.getElementById('SearchBaseName');\r\n        if (event.target.tagName !== \"INPUT\") {\r\n             SearchBaseName.value = '';\r\n         }\r\n    }\r\n\r\n    const stateConsoleButton = [\r\n        {\r\n            text: \"Обновить\",\r\n            name: 'update',\r\n            icon: \"fa fa-download fa-lg\",\r\n            onclick: () => { dispatch(startUser_GET_RequestServer()) },\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Добавить новые данные\",\r\n            name: 'add',\r\n            icon: \"fa fa-plus fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Внести изменения\",\r\n            name: 'edit',\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Удалить\",\r\n            name: 'delete',\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Сравнить\",\r\n            name: 'compare',\r\n            icon: \"fa fa-balance-scale\",\r\n            onclick: hendlerOpenCompareWindow,\r\n            link: links.linkCompare\r\n        },\r\n        {\r\n            text: \"Добавить к сравнению\",\r\n            name: 'addCompare',\r\n            icon: \"fa fa-filter fa-lg\",\r\n            onclick: hendlerAddCompareData,\r\n            link: links.linkBase\r\n        }\r\n    ];  \r\n\r\n    const haveDescription = (dataStateConsoleButton) => {\r\n        //добавляем подсказки на кнопки консоли\r\n        if (flagEmployDescription === true) {\r\n            let aboutDescription = {};\r\n            dataStateConsoleButton.map((obj) => {\r\n                aboutDescription[obj.name] = [obj.text];\r\n            });\r\n            dispatch(addDescription(aboutDescription, arrDescription));\r\n        };\r\n    }\r\n\r\n    //логика добавления контекстного меню через hoc\r\n  const TableListWithContextMenu = withContextMenuWindow(TableList, ContextMenuWindow, stateConsoleButton, \"ContextMenuWindow\");\r\n\r\n    useEffect(() => {\r\n\r\n     dispatch(startUser_GET_RequestServer());\r\n\r\n     document.addEventListener('click', hendlerClearSearchInput);\r\n\r\n     haveDescription(stateConsoleButton);\r\n\r\n     return () => {\r\n         document.removeEventListener('click', hendlerClearSearchInput);\r\n     }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={stateStylesAll[staleSelect].dataBaseContainer}>\r\n \r\n            <div className={stateStylesAll[staleSelect].dataBaseHeaderContainer}>\r\n                        <ConsoleButton\r\n                                classnameWrapper={stateStylesAll[staleSelect].dataBaseHeaderConsole}\r\n                                stateConsoleButton={stateConsoleButton}\r\n                                classnameDescription={stateStylesAll[staleSelect].descriptionButton}\r\n                                tabindex=\"-1\"\r\n                            />\r\n\r\n                        <HeaderDictionary\r\n                                classname={stateStylesAll[staleSelect].dataBaseHeaderHeader}\r\n                                onchangeSearch={(event) => hendlerSearchBase(event)}\r\n                                nameHeader=\"Список пользователей\"\r\n                                stateTable={stateTable}\r\n                                searchKey={searchKey}\r\n                            />    \r\n                    \r\n                </div>\r\n            {\r\n                stateLoading ?\r\n                    <AwaitLoading\r\n                        classname={stateStylesAll[staleSelect].loading}\r\n                    />\r\n                    : <TableListWithContextMenu\r\n                            classname={stateStylesAll[staleSelect].dataBaseTableContainer}\r\n                            classnameConsoleCountRow={stateStylesAll[staleSelect].consoleCountRow}\r\n                            classnameButtonConsoleCountPow={stateStylesAll[staleSelect].personalizeButton}\r\n                            classnameDescription={stateStylesAll[staleSelect].descriptionButton}\r\n                            colorRowTableBackground={stateStylesAll[staleSelect].rowTableBackground}\r\n                            colorFocusRowBackground={stateStylesAll[staleSelect].focusRowBackground}\r\n\r\n                            stateTable={stateTable}\r\n                            dataTable={dataTable}\r\n                            visibleNameСolumns={visibleNameСolumns}\r\n                            searchСolumnsName={searchСolumnsName}\r\n                            typeDataColumns={typeDataColumns}\r\n\r\n                            func={focusNull}\r\n\r\n                            CountRow={countRow}\r\n                            focusData={focusData}\r\n                            numberActivList={numberList}\r\n                        /> \r\n                }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(User)"]},"metadata":{},"sourceType":"module"}