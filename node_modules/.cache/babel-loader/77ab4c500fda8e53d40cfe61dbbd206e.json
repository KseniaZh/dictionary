{"ast":null,"code":"import { takeEvery, select, put, call } from 'redux-saga/effects';\nimport { putRequestServer } from '../../store/serverViewType/actions/actionViewType';\nimport fetchData from '../../functions/fetchData';\nimport { url_PUT } from \"../../constans/url\";\nimport { START_PUT_REQUEST } from '../../store/serverViewType/types';\nexport function fetchDataPost(url, method, body) {\n  return fetch(url, {\n    method: method,\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  }).then(response => response.json());\n}\nexport function* dataSendServer() {\n  const stateSendServer = yield select(state => state.WindowCreateNewData.stateData);\n  stateSendServer.uid = Number(stateSendServer.uid);\n  return stateSendServer;\n}\nexport function* workerStart_PUT_RequestServer() {\n  try {\n    const sendData = yield put(dataSendServer());\n    console.log('workerStart_PUT data send server ', sendData);\n    const data = yield call(fetchData, url_PUT, 'PUT', sendData);\n    const oldStateTable = yield select(state => state.stateTable);\n    console.log('workerStart_PUT  data from server ', data);\n    yield put(putRequestServer(data, oldStateTable));\n  } catch (error) {\n    console.log('workerStart_PUT_RequestServer error ', error);\n  }\n}\nexport function* watch_ViewType_PUT_RequestServer() {\n  yield takeEvery(START_PUT_REQUEST, workerStart_PUT_RequestServer);\n}","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/sagas/ViewType/sagasUpdateDataViewType .js"],"names":["takeEvery","select","put","call","putRequestServer","fetchData","url_PUT","START_PUT_REQUEST","fetchDataPost","url","method","body","fetch","headers","Accept","JSON","stringify","then","response","json","dataSendServer","stateSendServer","state","WindowCreateNewData","stateData","uid","Number","workerStart_PUT_RequestServer","sendData","console","log","data","oldStateTable","stateTable","error","watch_ViewType_PUT_RequestServer"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAASC,gBAAT,QAAiC,mDAAjC;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AAGA,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,IAApC,EAAyC;AAC5C,SAAOC,KAAK,CAAEH,GAAF,EAAM;AAENC,IAAAA,MAAM,EAAEA,MAFF;AAGNG,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAHH;AAONH,IAAAA,IAAI,EAAEI,IAAI,CAACC,SAAL,CAAeL,IAAf;AAPA,GAAN,CAAL,CASMM,IATN,CASWC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATvB,CAAP;AAUH;AAED,OAAO,UAAUC,cAAV,GAA2B;AAC3B,QAAMC,eAAe,GAAG,MAAMpB,MAAM,CAACqB,KAAK,IAAIA,KAAK,CAACC,mBAAN,CAA0BC,SAApC,CAApC;AAECH,EAAAA,eAAe,CAACI,GAAhB,GAAsBC,MAAM,CAACL,eAAe,CAACI,GAAjB,CAA5B;AAIJ,SAAOJ,eAAP;AACH;AAED,OAAO,UAAUM,6BAAV,GAAyC;AAE5C,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAM1B,GAAG,CAACkB,cAAc,EAAf,CAA1B;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDF,QAAjD;AAEA,UAAMG,IAAI,GAAG,MAAM5B,IAAI,CAACE,SAAD,EAAYC,OAAZ,EAAqB,KAArB,EAA4BsB,QAA5B,CAAvB;AAEA,UAAMI,aAAa,GAAG,MAAM/B,MAAM,CAACqB,KAAK,IAAIA,KAAK,CAACW,UAAhB,CAAlC;AAEAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDC,IAAlD;AAEA,UAAM7B,GAAG,CAACE,gBAAgB,CAAC2B,IAAD,EAAOC,aAAP,CAAjB,CAAT;AAEH,GAZD,CAYE,OAAOE,KAAP,EAAc;AACbL,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDI,KAApD;AACF;AAEJ;AAED,OAAO,UAAUC,gCAAV,GAA4C;AAE/C,QAAMnC,SAAS,CAACO,iBAAD,EAAoBoB,6BAApB,CAAf;AACH","sourcesContent":["import { takeEvery, select, put, call } from 'redux-saga/effects';\r\nimport { putRequestServer } from '../../store/serverViewType/actions/actionViewType';\r\nimport fetchData from '../../functions/fetchData';\r\nimport {url_PUT} from \"../../constans/url\"\r\nimport { START_PUT_REQUEST } from '../../store/serverViewType/types';\r\n\r\n\r\nexport function fetchDataPost(url, method, body){\r\n    return fetch( url,{\r\n                \r\n                method: method,\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                body: JSON.stringify(body)\r\n                })\r\n                .then(response => response.json())\r\n}\r\n\r\nexport function* dataSendServer() {\r\n       const stateSendServer = yield select(state => state.WindowCreateNewData.stateData);\r\n\r\n        stateSendServer.uid = Number(stateSendServer.uid);\r\n\r\n \r\n\r\n    return stateSendServer\r\n}\r\n\r\nexport function* workerStart_PUT_RequestServer(){\r\n    \r\n    try {\r\n        const sendData = yield put(dataSendServer());\r\n        console.log('workerStart_PUT data send server ', sendData)\r\n        \r\n        const data = yield call(fetchData, url_PUT, 'PUT', sendData);\r\n        \r\n        const oldStateTable = yield select(state => state.stateTable);\r\n\r\n        console.log('workerStart_PUT  data from server ', data)\r\n\r\n        yield put(putRequestServer(data, oldStateTable));\r\n         \r\n    } catch (error) {\r\n       console.log('workerStart_PUT_RequestServer error ', error);\r\n    }\r\n \r\n}\r\n\r\nexport function* watch_ViewType_PUT_RequestServer(){\r\n    \r\n    yield takeEvery(START_PUT_REQUEST, workerStart_PUT_RequestServer)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}