{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\EltypeClass.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\nimport TableList from '../../components/Table/TableListEltypeClass';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\nimport { startGetRequestServerEltypeClass, saveDataStore, saveTypeRequest, saveNameWindow } from '../../store/EltypeClass/actions/actionEltypeClass';\nimport { changeCountRowTable, getCounterPagesTable, changeNumberList, getDataPageRowTable } from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\nimport { addDataCompareArr } from '../../store/EltypeClass/actions/actionsСompareEltypeClass';\nimport { linkEditWindowEltypeClass, linkWindowConfirmDeleting, linkCompareEltypeClass } from '../Navigation/Main';\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../../styles/const_color';\n\nfunction EltypeClass(props) {\n  const linkAddressWindowEdit = linkEditWindowEltypeClass;\n  const linkAddressWindowDelete = linkWindowConfirmDeleting; //  const linkAddressCompareWindow = linkCompareEltypeClass;\n\n  const dispatch = useDispatch();\n  const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\n  const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\n\n  const dataTable = useSelector(state => state.stateFlagsEltypeClass.dataListTable); // отображаемый лист\n\n  const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // общее количество листов в таблице\n\n  const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\n\n  const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\n\n  const focusData = useSelector(state => state.createDataEltypeClass.stateData); // запомнить данные выбранной строки\n\n  const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\n\n  const tablebodyBackgroundClear = () => {\n    let tablebody = document.getElementById('tablebody');\n\n    for (let child of tablebody.children) {\n      child.style.background = tablebodyBackground_Coffee; //убираем цвет ранее выбранной строки\n    }\n\n    ;\n  };\n\n  const focusNull = () => {\n    tablebodyBackgroundClear();\n    dispatch(saveDataStore({\n      uid: \"\",\n      name: \"\",\n      isDeleted: false,\n      isTemplate: false\n    }));\n  }; //правая кнопка мыши\n\n\n  const [flagOpenContextMenuWindow, setFlagOpenContextMenuWindow] = useState({\n    flag: false,\n    clientX: '',\n    clientY: ''\n  });\n\n  document.oncontextmenu = function (event) {\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n\n    if (event.target.tagName == 'TD') {\n      setFlagOpenContextMenuWindow({\n        flag: true,\n        clientX: event.clientX,\n        clientY: event.clientY\n      });\n    }\n\n    ;\n  };\n\n  document.onclick = function () {\n    setFlagOpenContextMenuWindow({\n      flag: false,\n      clientX: '',\n      clientY: ''\n    });\n  };\n\n  document.onscroll = function () {\n    setFlagOpenContextMenuWindow({\n      flag: false,\n      clientX: '',\n      clientY: ''\n    });\n  };\n\n  const handlerTableRowUID = (event, data) => {\n    //фокус на строку\n    event.preventDefault();\n    let tr; //строка выбранной ячейки\n\n    if (event.target.parentElement.tagName == 'TR') {\n      tr = event.target.parentElement;\n    } else if (event.target.parentElement.tagName == 'TD') {\n      tr = event.target.parentElement.parentElement;\n    }\n\n    tr.children[1].focus();\n    tablebodyBackgroundClear();\n    tr.style.background = rowFocus_Coffee;\n    stateTable.map((obj, index) => {\n      if (obj.uid === data) {\n        dispatch(saveDataStore(obj)); // сохранить в хранилище\n      }\n    });\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const HendlerOnMouseover = () => {};\n\n  const HendlerOnMouseLeave = () => {};\n\n  const [flagCountRow, setFlagCoutnRow] = useState(false);\n\n  const hendlerInputOpen = () => {\n    setFlagCoutnRow(true);\n  };\n\n  const hendlerChangeCountRow = event => {\n    event.preventDefault();\n    dispatch(changeCountRowTable(event.target.value));\n    dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\n\n    if (numberList != 1) {\n      focusNull(); // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные\n    }\n\n    ;\n  };\n\n  const hendlerInputSave = () => {\n    setFlagCoutnRow(false);\n    dispatch(getCounterPagesTable(stateTable, countRow));\n    dispatch(getDataPageRowTable(stateTable, countRow, numberList));\n  }; //после выбора страницы приходит ее номер\n  // в хранилище собираем новую страницу\n  // в хранилище сохраняем номер страницы\n\n\n  const hendlerOpenPagesTable = num => {\n    dispatch(getDataPageRowTable(stateTable, countRow, num));\n    dispatch(changeNumberList(num));\n    focusNull(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\n  };\n\n  const hendlerAddCompareData = () => {\n    dispatch(addDataCompareArr(focusData, compareArr));\n  };\n\n  useEffect(() => {\n    dispatch(startGetRequestServerEltypeClass());\n  }, []);\n  const stateConsoleButton = [{\n    text: \"Обновить\",\n    icon: \"fa fa-download fa-lg\",\n    onclick: () => {\n      dispatch(startGetRequestServerEltypeClass());\n    }\n  }, {\n    text: \"Добавить новые данные\",\n    icon: \"fa fa-plus fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\n    link: linkEditWindowEltypeClass\n  }, {\n    text: \"Внести изменения\",\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: linkEditWindowEltypeClass\n  }, {\n    text: \"Удалить\",\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: linkWindowConfirmDeleting\n  }, {\n    text: \"Сравнить\",\n    icon: \"fa fa-balance-scale\",\n    onclick: () => console.log('Сравнить'),\n    link: linkCompareEltypeClass\n  }, {\n    text: \"Добавить к сравнению\",\n    icon: \"fa fa-filter fa-lg\",\n    onclick: () => hendlerAddCompareData()\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__header__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButton, {\n    classnameWrapper: \"DataBase__header__console\",\n    stateConsoleButton: stateConsoleButton,\n    onmouseover: HendlerOnMouseover,\n    onmouseleave: HendlerOnMouseLeave,\n    tabindex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classname: \"DataBase__header__header\",\n    nameHeader: \"\\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 21\n    }\n  })), stateLoading ? /*#__PURE__*/React.createElement(AwaitLoading, {\n    classname: \"Loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(TableList, {\n    classname: \"DataBase__table__container\",\n    classnameConsoleCountRow: \"ConsoleCountRow\",\n    classnameButtonConsoleCountPow: \"PersonalizeButton\",\n    columnName: Object.keys(stateTable[0]),\n    dataTable: dataTable,\n    onclick: (event, data) => handlerTableRowUID(event, data),\n    onclickInputOpen: hendlerInputOpen,\n    onclickInputSave: hendlerInputSave,\n    onclickOpenPagesTable: numButton => hendlerOpenPagesTable(numButton),\n    flagCountRow: flagCountRow,\n    onchange: event => hendlerChangeCountRow(event),\n    CountRow: countRow,\n    counterPages: counterPages,\n    focusUid: focusData.uid,\n    numberActivList: numberList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 25\n    }\n  }), flagOpenContextMenuWindow.flag ? /*#__PURE__*/React.createElement(ContextMenuWindow, {\n    stateConsoleButton: stateConsoleButton,\n    classname: \"ContextMenuWindow\",\n    clientX: flagOpenContextMenuWindow.clientX,\n    clientY: flagOpenContextMenuWindow.clientY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 25\n    }\n  }) : null);\n}\n\nexport default connect()(EltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/EltypeClass.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","ConsoleButton","TableList","HeaderDictionary","ContextMenuWindow","AwaitLoading","startGetRequestServerEltypeClass","saveDataStore","saveTypeRequest","saveNameWindow","changeCountRowTable","getCounterPagesTable","changeNumberList","getDataPageRowTable","addDataCompareArr","linkEditWindowEltypeClass","linkWindowConfirmDeleting","linkCompareEltypeClass","tablebodyBackground_Coffee","rowFocus_Coffee","EltypeClass","props","linkAddressWindowEdit","linkAddressWindowDelete","dispatch","stateLoading","state","stateFlagsEltypeClass","loading","stateTable","stateTableEltypeClass","dataTable","dataListTable","counterPages","counterPagesTable","countRow","countRowTable","numberList","focusData","createDataEltypeClass","stateData","compareArr","compareDataEltypeClass","tablebodyBackgroundClear","tablebody","document","getElementById","child","children","style","background","focusNull","uid","name","isDeleted","isTemplate","flagOpenContextMenuWindow","setFlagOpenContextMenuWindow","flag","clientX","clientY","oncontextmenu","event","defaultPrevented","preventDefault","target","tagName","onclick","onscroll","handlerTableRowUID","data","tr","parentElement","focus","map","obj","index","hendlerOpenWindow","nameWindow","typeRequest","HendlerOnMouseover","HendlerOnMouseLeave","flagCountRow","setFlagCoutnRow","hendlerInputOpen","hendlerChangeCountRow","value","hendlerInputSave","hendlerOpenPagesTable","num","hendlerAddCompareData","stateConsoleButton","text","icon","link","console","log","Object","keys","numButton"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\r\nimport TableList from '../../components/Table/TableListEltypeClass';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\r\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\r\n\r\nimport {\r\n        startGetRequestServerEltypeClass,\r\n        saveDataStore,\r\n        saveTypeRequest,\r\n        saveNameWindow,\r\n } from '../../store/EltypeClass/actions/actionEltypeClass';\r\n\r\nimport {\r\n        changeCountRowTable,\r\n        getCounterPagesTable,\r\n        changeNumberList,\r\n        getDataPageRowTable\r\n} from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\n\r\nimport { addDataCompareArr } from '../../store/EltypeClass/actions/actionsСompareEltypeClass';\r\n\r\nimport {\r\n        linkEditWindowEltypeClass,\r\n        linkWindowConfirmDeleting,\r\n        linkCompareEltypeClass\r\n} from '../Navigation/Main';\r\n\r\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../../styles/const_color';\r\n\r\n\r\n\r\n\r\nfunction EltypeClass(props) {\r\n\r\n    const linkAddressWindowEdit = linkEditWindowEltypeClass;\r\n    const linkAddressWindowDelete = linkWindowConfirmDeleting;\r\n  //  const linkAddressCompareWindow = linkCompareEltypeClass;\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\r\n\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\r\n\r\n    const dataTable = useSelector(state => state.stateFlagsEltypeClass.dataListTable); // отображаемый лист\r\n\r\n    const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // общее количество листов в таблице\r\n\r\n    const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\r\n\r\n    const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\r\n\r\n    const focusData = useSelector(state => state.createDataEltypeClass.stateData); // запомнить данные выбранной строки\r\n\r\n    const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\r\n\r\n\r\n    const tablebodyBackgroundClear = () => {\r\n        let tablebody = document.getElementById('tablebody');\r\n        for (let child of tablebody.children) {\r\n            child.style.background = tablebodyBackground_Coffee;//убираем цвет ранее выбранной строки\r\n        };\r\n    }\r\n    const focusNull = () => {\r\n        tablebodyBackgroundClear();\r\n        dispatch(saveDataStore({\r\n                                uid: \"\",\r\n                                name: \"\",\r\n                                isDeleted: false,\r\n                                isTemplate: false\r\n                            }));\r\n    }\r\n\r\n    //правая кнопка мыши\r\n    const [flagOpenContextMenuWindow, setFlagOpenContextMenuWindow] = useState({\r\n                                                                                    flag: false,\r\n                                                                                    clientX: '',\r\n                                                                                    clientY: ''\r\n                                                                                });\r\n\r\n    document.oncontextmenu = function (event) {\r\n        if (event.defaultPrevented) return;\r\n        event.preventDefault();\r\n        if (event.target.tagName == 'TD') {\r\n            setFlagOpenContextMenuWindow({\r\n                                            flag: true,\r\n                                            clientX: event.clientX,\r\n                                            clientY: event.clientY\r\n                                        });\r\n        };\r\n\r\n    };\r\n    document.onclick = function () {\r\n        setFlagOpenContextMenuWindow({\r\n                                        flag: false,\r\n                                        clientX: '',\r\n                                        clientY: ''\r\n                                    });\r\n    }\r\n    document.onscroll = function () {\r\n        setFlagOpenContextMenuWindow({\r\n                                        flag: false,\r\n                                        clientX: '',\r\n                                        clientY: ''\r\n                                    });\r\n    }\r\n\r\n    const handlerTableRowUID = (event, data)=>{ //фокус на строку\r\n        event.preventDefault();\r\n\r\n        let tr; //строка выбранной ячейки\r\n        if (event.target.parentElement.tagName == 'TR') {\r\n            tr = event.target.parentElement;\r\n        } else if (event.target.parentElement.tagName == 'TD') {\r\n            tr = event.target.parentElement.parentElement; \r\n        }\r\n        tr.children[1].focus();\r\n\r\n        tablebodyBackgroundClear();\r\n        tr.style.background = rowFocus_Coffee;\r\n\r\n        stateTable.map( (obj, index) => {\r\n            if (obj.uid === data){\r\n                dispatch(saveDataStore(obj)); // сохранить в хранилище\r\n            }\r\n        })\r\n    }\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n    const HendlerOnMouseover = () => {\r\n\r\n    }\r\n    const HendlerOnMouseLeave = () => {\r\n\r\n    }\r\n\r\n    const [flagCountRow, setFlagCoutnRow] = useState(false);\r\n\r\n\r\n    const hendlerInputOpen = () => {\r\n        setFlagCoutnRow(true);\r\n    }\r\n\r\n    const hendlerChangeCountRow = (event) => {\r\n            event.preventDefault();\r\n            dispatch(changeCountRowTable(event.target.value));\r\n            dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\r\n            if (numberList != 1) {\r\n                      focusNull();  // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные\r\n                  };\r\n        \r\n    }\r\n\r\n    const hendlerInputSave = () => {\r\n\r\n        setFlagCoutnRow(false);\r\n        dispatch(getCounterPagesTable(stateTable, countRow));\r\n        dispatch(getDataPageRowTable(stateTable, countRow, numberList));\r\n    }\r\n    //после выбора страницы приходит ее номер\r\n    // в хранилище собираем новую страницу\r\n    // в хранилище сохраняем номер страницы\r\n    const hendlerOpenPagesTable = (num) => {\r\n\r\n        dispatch(getDataPageRowTable(stateTable, countRow, num));\r\n        dispatch(changeNumberList(num));\r\n        focusNull(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\r\n    }\r\n\r\n    const hendlerAddCompareData = () => {\r\n        dispatch(addDataCompareArr(focusData, compareArr));\r\n    }\r\n\r\n\r\n useEffect(() => {\r\n     dispatch(startGetRequestServerEltypeClass());\r\n    }, [])\r\n\r\n\r\n    const stateConsoleButton = [\r\n        {\r\n            text: \"Обновить\",\r\n            icon: \"fa fa-download fa-lg\",\r\n            onclick: () => { dispatch(startGetRequestServerEltypeClass()) }\r\n            },\r\n        {\r\n            text: \"Добавить новые данные\",\r\n            icon: \"fa fa-plus fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\r\n            link: linkEditWindowEltypeClass\r\n            },\r\n        {\r\n            text: \"Внести изменения\",\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: linkEditWindowEltypeClass\r\n            },\r\n        {\r\n            text: \"Удалить\",\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: linkWindowConfirmDeleting\r\n            },\r\n        {\r\n            text: \"Сравнить\",\r\n            icon: \"fa fa-balance-scale\",\r\n            onclick: () => console.log('Сравнить'),\r\n            link: linkCompareEltypeClass\r\n        },\r\n        {\r\n            text: \"Добавить к сравнению\",\r\n            icon: \"fa fa-filter fa-lg\",\r\n            onclick: () => hendlerAddCompareData()\r\n        }\r\n    ];\r\n\r\n    \r\n    return (\r\n        <div className=\"DataBase__container\">\r\n \r\n                <div className=\"DataBase__header__container\">\r\n                    <ConsoleButton\r\n                            classnameWrapper=\"DataBase__header__console\"\r\n                            stateConsoleButton = {stateConsoleButton}\r\n                            onmouseover={HendlerOnMouseover}\r\n                            onmouseleave={HendlerOnMouseLeave}\r\n                            tabindex=\"-1\"\r\n                            />\r\n\r\n                    <HeaderDictionary\r\n                            classname=\"DataBase__header__header\"\r\n                            nameHeader=\"Классы для Типов связей и Типов сущностей\"\r\n                        />\r\n                </div>\r\n                {\r\n                    stateLoading?\r\n                        <AwaitLoading\r\n                                classname=\"Loading\"\r\n                        />\r\n                       :<TableList\r\n                                classname=\"DataBase__table__container\"\r\n                                classnameConsoleCountRow='ConsoleCountRow'\r\n                                classnameButtonConsoleCountPow=\"PersonalizeButton\"\r\n                                columnName={Object.keys(stateTable[0])}\r\n                                dataTable={dataTable}\r\n                                onclick={(event, data) => handlerTableRowUID(event, data)}\r\n                                onclickInputOpen={hendlerInputOpen}\r\n                                onclickInputSave={hendlerInputSave}\r\n                                onclickOpenPagesTable={(numButton) => hendlerOpenPagesTable(numButton)}\r\n                                flagCountRow={flagCountRow}\r\n                                onchange={(event) => hendlerChangeCountRow(event)}\r\n                                CountRow={countRow}\r\n                                counterPages={counterPages}\r\n                                focusUid={focusData.uid}\r\n                                numberActivList={numberList}\r\n                        /> \r\n                }\r\n                {\r\n                    flagOpenContextMenuWindow.flag ?\r\n                        <ContextMenuWindow\r\n                            stateConsoleButton={stateConsoleButton}\r\n                            classname=\"ContextMenuWindow\"\r\n                            clientX={flagOpenContextMenuWindow.clientX}\r\n                            clientY={flagOpenContextMenuWindow.clientY}\r\n                        />\r\n                        : null\r\n                }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default connect()(EltypeClass)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}