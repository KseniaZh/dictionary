{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\hoc\\\\withSort.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { sortingList } from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\nimport { sortingCompareArr } from '../store/EltypeClass/actions/actions�ompareEltypeClass';\nconst stateTable = useSelector(state => state.stateTableEltypeClass);\n\nconst mapStateToProps = state => {\n  return {\n    stateTable: state.stateTableEltypeClass //��� ����\n\n  };\n};\n\nconst mapDispatchToProps = {\n  sortingTable,\n  getDataPageRowTable\n};\n\nconst withSort = (Component, dataSort, typeSort) => {\n  class ComponentWithSort extends React.Component {\n    constructor(...args) {\n      super(...args);\n\n      this.sortBase = (sortKey, base) => {\n        const data = base;\n\n        if (typeof data[0][sortKey] == 'boolean') {\n          //���� ��� �������\n          const compare = function (a, b) {\n            let x;\n            let y;\n\n            if (a[sortKey] == true) {\n              x = 1;\n            } else {\n              x = 0;\n            }\n\n            ;\n\n            if (b[sortKey] == true) {\n              y = 1;\n            } else {\n              y = 0;\n            }\n\n            ;\n            return y - x;\n          };\n\n          data.sort(compare);\n        } else {\n          data.sort((a, b) => a[sortKey].localeCompare(b[sortKey]));\n        }\n\n        ;\n        return data;\n      };\n\n      this.hendlerSort = (event, sortKey) => {\n        let data = this.sortBase(sortKey, dataSort); // ��������� ��� ����, ���������� �� �������\n\n        dispatch(sortingTable(data)); // ��������� ��������������� ���� � ���������\n\n        dispatch(getDataPageRowTable(data, countRow, numberList)); // ����� ������ ��� �����, ������� ������� � ������ ������ �� ��������\n      };\n    }\n\n    render() {\n      let props = { ...this.props,\n        onclickSort: this.hendlerSort\n      };\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }));\n    }\n\n  }\n\n  return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort);\n};\n\nexport default withClickSaveFocusRow; //const hendlerSortList = (event, sortKey) => {\n//    let data = sortBase(sortKey, dataTable); //��������� ������ �������� ����, ���� �������� ���������������\n//    dispatch(sortingList(data)); //��������� � �������������� �������� ����\n//}\n//const hendlerSortCompare = (event, sortKey) => {\n//    let data = sortBase(sortKey, compareArr); //��������� ������ ������ ��� ���������\n//    dispatch(sortingCompareArr(data)); //��������� � ��������� ��������������� ������ � �������������� \n//}\n//onclickSortBase = {(event, keyName) => hendlerSortBase(event, keyName)}\n//onclickSortList = {(event, keyName) => hendlerSortList(event, keyName)}\n//onclickSortCompare = {(event, keyName) => hendlerSortCompare(event, keyName)}","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/hoc/withSort.js"],"names":["React","connect","sortingList","sortingCompareArr","stateTable","useSelector","state","stateTableEltypeClass","mapStateToProps","mapDispatchToProps","sortingTable","getDataPageRowTable","withSort","Component","dataSort","typeSort","ComponentWithSort","sortBase","sortKey","base","data","compare","a","b","x","y","sort","localeCompare","hendlerSort","event","dispatch","countRow","numberList","render","props","onclickSort","withClickSaveFocusRow"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,WAAT,QAA4B,sDAA5B;AACA,SAASC,iBAAT,QAAiC,wDAAjC;AACA,MAAMC,UAAU,GAAGC,WAAW,CAACC,KAAK,IAAIA,KAAK,CAACC,qBAAhB,CAA9B;;AAEA,MAAMC,eAAe,GAAIF,KAAD,IAAW;AAC/B,SAAO;AACHF,IAAAA,UAAU,EAAEE,KAAK,CAACC,qBADf,CACsC;;AADtC,GAAP;AAGH,CAJD;;AAKA,MAAME,kBAAkB,GAAG;AACvBC,EAAAA,YADuB;AAEvBC,EAAAA;AAFuB,CAA3B;;AAMA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,QAAtB,KAAmC;AAGhD,QAAMC,iBAAN,SAAgChB,KAAK,CAACa,SAAtC,CAAgD;AAAA;AAAA;;AAAA,WAE5CI,QAF4C,GAEjC,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACtB,cAAMC,IAAI,GAAGD,IAAb;;AAEA,YAAI,OAAOC,IAAI,CAAC,CAAD,CAAJ,CAAQF,OAAR,CAAP,IAA2B,SAA/B,EAA0C;AAAE;AACxC,gBAAMG,OAAO,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC5B,gBAAIC,CAAJ;AACA,gBAAIC,CAAJ;;AACA,gBAAIH,CAAC,CAACJ,OAAD,CAAD,IAAc,IAAlB,EAAwB;AAAEM,cAAAA,CAAC,GAAG,CAAJ;AAAO,aAAjC,MAAuC;AAAEA,cAAAA,CAAC,GAAG,CAAJ;AAAO;;AAAA;;AAChD,gBAAID,CAAC,CAACL,OAAD,CAAD,IAAc,IAAlB,EAAwB;AAAEO,cAAAA,CAAC,GAAG,CAAJ;AAAO,aAAjC,MAAuC;AAAEA,cAAAA,CAAC,GAAG,CAAJ;AAAO;;AAAA;AAChD,mBAAOA,CAAC,GAAGD,CAAX;AACH,WAND;;AAOAJ,UAAAA,IAAI,CAACM,IAAL,CAAUL,OAAV;AACH,SATD,MASO;AACHD,UAAAA,IAAI,CAACM,IAAL,CAAU,CAACJ,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACJ,OAAD,CAAD,CAAWS,aAAX,CAAyBJ,CAAC,CAACL,OAAD,CAA1B,CAApB;AACH;;AAAA;AACD,eAAOE,IAAP;AACH,OAlBuC;;AAAA,WAoB5CQ,WApB4C,GAoB9B,CAACC,KAAD,EAAQX,OAAR,KAAoB;AAC9B,YAAIE,IAAI,GAAG,KAAKH,QAAL,CAAcC,OAAd,EAAuBJ,QAAvB,CAAX,CAD8B,CACe;;AAC7CgB,QAAAA,QAAQ,CAACpB,YAAY,CAACU,IAAD,CAAb,CAAR,CAF8B,CAEA;;AAC9BU,QAAAA,QAAQ,CAACnB,mBAAmB,CAACS,IAAD,EAAOW,QAAP,EAAiBC,UAAjB,CAApB,CAAR,CAH8B,CAG6B;AAC9D,OAxB2C;AAAA;;AA0B5CC,IAAAA,MAAM,GAAG;AACL,UAAIC,KAAK,GAAG,EACR,GAAG,KAAKA,KADA;AAERC,QAAAA,WAAW,EAAE,KAAKP;AAFV,OAAZ;AAIA,0BACI,oBAAC,SAAD,oBAAeM,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AAGH;;AAlC2C;;AAoChD,SAAOjC,OAAO,CAACO,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CO,iBAA7C,CAAP;AACH,CAxCD;;AAyCA,eAAeoB,qBAAf,C,CAiBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { sortingList } from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\nimport { sortingCompareArr} from '../store/EltypeClass/actions/actions�ompareEltypeClass';\r\nconst stateTable = useSelector(state => state.stateTableEltypeClass); \r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        stateTable: state.stateTableEltypeClass, //��� ����\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    sortingTable,\r\n    getDataPageRowTable\r\n}\r\n\r\n\r\nconst withSort = (Component, dataSort, typeSort) => {\r\n\r\n \r\n    class ComponentWithSort extends React.Component {\r\n\r\n        sortBase = (sortKey, base) => {\r\n                const data = base;\r\n\r\n                if (typeof data[0][sortKey] == 'boolean') { //���� ��� �������\r\n                    const compare = function (a, b) {\r\n                        let x;\r\n                        let y;\r\n                        if (a[sortKey] == true) { x = 1 } else { x = 0 };\r\n                        if (b[sortKey] == true) { y = 1 } else { y = 0 };\r\n                        return y - x;\r\n                    };\r\n                    data.sort(compare);\r\n                } else {\r\n                    data.sort((a, b) => a[sortKey].localeCompare(b[sortKey]))\r\n                };\r\n                return data\r\n            }\r\n\r\n        hendlerSort = (event, sortKey) => {\r\n            let data = this.sortBase(sortKey, dataSort); // ��������� ��� ����, ���������� �� �������\r\n            dispatch(sortingTable(data)); // ��������� ��������������� ���� � ���������\r\n            dispatch(getDataPageRowTable(data, countRow, numberList)); // ����� ������ ��� �����, ������� ������� � ������ ������ �� ��������\r\n        }\r\n\r\n        render() {\r\n            let props = {\r\n                ...this.props,\r\n                onclickSort: this.hendlerSort,\r\n            }\r\n            return (\r\n                <Component {...props} />\r\n                )\r\n        }\r\n    }\r\n    return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort)\r\n}\r\nexport default withClickSaveFocusRow\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//const hendlerSortList = (event, sortKey) => {\r\n//    let data = sortBase(sortKey, dataTable); //��������� ������ �������� ����, ���� �������� ���������������\r\n//    dispatch(sortingList(data)); //��������� � �������������� �������� ����\r\n//}\r\n//const hendlerSortCompare = (event, sortKey) => {\r\n\r\n//    let data = sortBase(sortKey, compareArr); //��������� ������ ������ ��� ���������\r\n//    dispatch(sortingCompareArr(data)); //��������� � ��������� ��������������� ������ � �������������� \r\n//}\r\n//onclickSortBase = {(event, keyName) => hendlerSortBase(event, keyName)}\r\n//onclickSortList = {(event, keyName) => hendlerSortList(event, keyName)}\r\n//onclickSortCompare = {(event, keyName) => hendlerSortCompare(event, keyName)}"]},"metadata":{},"sourceType":"module"}