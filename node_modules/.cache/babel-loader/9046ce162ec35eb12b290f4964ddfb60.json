{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\components\\\\FooterTable\\\\ContainerCountRowForPage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport CountRowForPage from './CountRowForPage';\nimport Input from '../../UserInterface/Input/Input';\n\nfunction ContainerCountRowForPage(props) {\n  const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\n\n  const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\n\n  const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\n\n  const [dataButtonOpenInput, setDataButtonOpenInput] = useState({\n    flag: false,\n    icon: \"fa fa-pencil\",\n    name: \"OpenInputChangeCountRow\"\n  });\n  const [inputValue, setInputValue] = useState(countRow); // значение в интуре\n\n  const hendlerButtonInputOpen = () => {\n    if (flagCountRow === false) {\n      setDataButtonOpenInput({\n        flag: true,\n        icon: \"fa fa-floppy-o\",\n        name: \"SaveChangeCountRow\"\n      });\n    }\n\n    ;\n\n    if (flagCountRow === true) {\n      setDataButtonOpenInput({\n        flag: false,\n        icon: \"fa fa-pencil\",\n        name: \"OpenInputChangeCountRow\"\n      });\n      dispatch(getCounterPagesTable(stateTable, inputValue));\n      dispatch(getDataPageRowTable(stateTable, inputValue, numberList));\n\n      if (numberList !== 1) {\n        dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\n\n        focusNull(); // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные\n      }\n\n      ;\n    }\n  };\n\n  const hendlerChangeInputValue = event => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(CountRowForPage, {\n    CountRow: props.CountRow,\n    length: stateTable.length,\n    dataButtonOpenInput: dataButtonOpenInput,\n    onclickButtonInputOpen: hendlerButtonInputOpen,\n    inputValue: inputValue,\n    onchangeInputValue: hendlerChangeInputValue,\n    classname: props.classname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default ContainerCountRowForPage;","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/components/FooterTable/ContainerCountRowForPage.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","CountRowForPage","Input","ContainerCountRowForPage","props","stateTable","state","stateTableEltypeClass","countRow","stateFlagsEltypeClass","countRowTable","numberList","dataButtonOpenInput","setDataButtonOpenInput","flag","icon","name","inputValue","setInputValue","hendlerButtonInputOpen","flagCountRow","dispatch","getCounterPagesTable","getDataPageRowTable","changeNumberList","focusNull","hendlerChangeInputValue","event","preventDefault","target","value","CountRow","length","classname"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,OAAOC,KAAP,MAAkB,iCAAlB;;AAGA,SAASC,wBAAT,CAAkCC,KAAlC,EAAyC;AAErC,QAAMC,UAAU,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,qBAAhB,CAA9B,CAFqC,CAEiC;;AACtE,QAAMC,QAAQ,GAAGR,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACG,qBAAN,CAA4BC,aAAtC,CAA5B,CAHqC,CAG6C;;AAClF,QAAMC,UAAU,GAAGX,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACG,qBAAN,CAA4BE,UAAtC,CAA9B,CAJqC,CAI4C;;AAEjF,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDhB,QAAQ,CAAC;AACKiB,IAAAA,IAAI,EAAE,KADX;AAEKC,IAAAA,IAAI,EAAE,cAFX;AAGKC,IAAAA,IAAI,EAAE;AAHX,GAAD,CAA9D;AAOA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAACW,QAAD,CAA5C,CAbqC,CAamB;;AAExD,QAAMW,sBAAsB,GAAG,MAAM;AAEjC,QAAIC,YAAY,KAAK,KAArB,EAA4B;AACxBP,MAAAA,sBAAsB,CAAC;AACKC,QAAAA,IAAI,EAAE,IADX;AAEKC,QAAAA,IAAI,EAAE,gBAFX;AAGKC,QAAAA,IAAI,EAAE;AAHX,OAAD,CAAtB;AAKH;;AAAA;;AACD,QAAII,YAAY,KAAK,IAArB,EAA2B;AACvBP,MAAAA,sBAAsB,CAAC;AACKC,QAAAA,IAAI,EAAE,KADX;AAEKC,QAAAA,IAAI,EAAE,cAFX;AAGKC,QAAAA,IAAI,EAAE;AAHX,OAAD,CAAtB;AAKAK,MAAAA,QAAQ,CAACC,oBAAoB,CAACjB,UAAD,EAAaY,UAAb,CAArB,CAAR;AACAI,MAAAA,QAAQ,CAACE,mBAAmB,CAAClB,UAAD,EAAaY,UAAb,EAAyBN,UAAzB,CAApB,CAAR;;AAEA,UAAIA,UAAU,KAAK,CAAnB,EAAsB;AAClBU,QAAAA,QAAQ,CAACG,gBAAgB,CAAC,CAAD,CAAjB,CAAR,CADkB,CACa;;AAC/BC,QAAAA,SAAS,GAFS,CAEJ;AACjB;;AAAA;AACJ;AAEJ,GAxBD;;AAyBA,QAAMC,uBAAuB,GAAIC,KAAD,IAAW;AACvCA,IAAAA,KAAK,CAACC,cAAN;AACAV,IAAAA,aAAa,CAACS,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAb;AACH,GAHD;;AAKA,sBACI,oBAAC,eAAD;AACI,IAAA,QAAQ,EAAE1B,KAAK,CAAC2B,QADpB;AAEI,IAAA,MAAM,EAAE1B,UAAU,CAAC2B,MAFvB;AAGI,IAAA,mBAAmB,EAAEpB,mBAHzB;AAII,IAAA,sBAAsB,EAAEO,sBAJ5B;AAKI,IAAA,UAAU,EAAEF,UALhB;AAMI,IAAA,kBAAkB,EAAES,uBANxB;AAOI,IAAA,SAAS,EAAEtB,KAAK,CAAC6B,SAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAYH;;AAED,eAAe9B,wBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport CountRowForPage from './CountRowForPage';\r\n\r\nimport Input from '../../UserInterface/Input/Input';\r\n\r\n\r\nfunction ContainerCountRowForPage(props) {\r\n\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\r\n    const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\r\n    const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\r\n\r\n    const [dataButtonOpenInput, setDataButtonOpenInput] = useState({\r\n                                                                        flag: false,\r\n                                                                        icon: \"fa fa-pencil\",\r\n                                                                        name: \"OpenInputChangeCountRow\"\r\n                                                                    });\r\n\r\n\r\n    const [inputValue, setInputValue] = useState(countRow); // значение в интуре\r\n\r\n    const hendlerButtonInputOpen = () => {\r\n\r\n        if (flagCountRow === false) {\r\n            setDataButtonOpenInput({\r\n                                        flag: true,\r\n                                        icon: \"fa fa-floppy-o\",\r\n                                        name: \"SaveChangeCountRow\"\r\n                                    });\r\n        };\r\n        if (flagCountRow === true) {\r\n            setDataButtonOpenInput({\r\n                                        flag: false,\r\n                                        icon: \"fa fa-pencil\",\r\n                                        name: \"OpenInputChangeCountRow\"\r\n                                    });\r\n            dispatch(getCounterPagesTable(stateTable, inputValue));\r\n            dispatch(getDataPageRowTable(stateTable, inputValue, numberList));\r\n            \r\n            if (numberList !== 1) {\r\n                dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\r\n                focusNull();  // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные\r\n            };\r\n        }\r\n       \r\n    }\r\n    const hendlerChangeInputValue = (event) => {\r\n        event.preventDefault();\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <CountRowForPage\r\n            CountRow={props.CountRow}\r\n            length={stateTable.length}\r\n            dataButtonOpenInput={dataButtonOpenInput}\r\n            onclickButtonInputOpen={hendlerButtonInputOpen}\r\n            inputValue={inputValue}\r\n            onchangeInputValue={hendlerChangeInputValue}\r\n            classname={props.classname}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default ContainerCountRowForPage"]},"metadata":{},"sourceType":"module"}