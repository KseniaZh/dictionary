{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\CompareEltypeClass.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ButtonLinkSmallNotMouse from '../../UserInterface/Buttons/Button/ButtonLinkSmallNotMouse';\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\nimport HeaderCompare from '../../components/Header/HeaderCompare';\nimport CompareTableEltypeClass from '../../components/Table/CompareTableEltypeClass';\nimport WarningCompare from '../../components/WarningWindow/WarningCompare';\nimport ContextMenuCompare from '../../components/ContextMenuWindow/ContextMenuCompare';\nimport withClickSaveFocusRow from \"../../hoc/withClickSaveFocusRow\";\nimport { saveDataStore, saveTypeRequest, saveNameWindow } from '../../store/EltypeClass/actions/actionEltypeClass';\nimport { changeAdressOpenTable } from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\nimport { clearCompareArr, deleteDataCompareArr, sortingCompareArr } from '../../store/EltypeClass/actions/actionsСompareEltypeClass';\nimport { addDescription } from \"../../store/Description/actionsDescription\";\nimport { sortBase } from '../../functions/Sort';\nimport { tablebodyBackgroundClear } from '../../functions/tablebodyBackgroundClear';\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../../styles/const_color';\n\nfunction CompareEltypeClass(props) {\n  const dispatch = useDispatch();\n  const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\n\n  const focusData = useSelector(state => state.createDataEltypeClass.stateData); //хранение данных выбранной строки\n\n  const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\n\n  const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll); // разрешен ли пользователем показ подсказок\n\n  const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга)\n  //правая кнопка мыши\n\n  const [flagOpenContextMenuWindow, setFlagOpenContextMenuWindow] = useState({\n    flag: false,\n    clientX: '',\n    clientY: ''\n  });\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const hendlerClearCompareArr = () => {\n    dispatch(clearCompareArr()); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase));\n  };\n\n  const hendlerDeleteContext = data => {\n    dispatch(deleteDataCompareArr(data, compareArr)); // удалить из массива сравнений\n    //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\n\n    dispatch(saveDataStore({\n      uid: \"\",\n      name: \"\",\n      isDeleted: false,\n      isTemplate: false\n    }));\n    tablebodyBackgroundClear();\n  };\n\n  const hendlerCloseWindow = () => {\n    //закрываем окно и поэтому обнуляем хранение фокуса:\n    dispatch(saveDataStore({\n      uid: \"\",\n      name: \"\",\n      isDeleted: false,\n      isTemplate: false\n    })); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase));\n  };\n\n  const hendlerSortCompare = (event, sortKey) => {\n    let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\n\n    dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \n  };\n\n  const stateConsoleButton = [{\n    text: \"Внести изменения\",\n    name: 'edit',\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить\",\n    name: 'delete',\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Очистить список сравнений\",\n    name: 'clear',\n    icon: \"fa fa-minus-square-o\",\n    onclick: hendlerClearCompareArr,\n    link: links.linkBase\n  }, {\n    text: \"Убрать из списка\",\n    name: 'deleteList',\n    icon: \"fa fa-external-link\",\n    onclick: hendlerDeleteContext,\n    data: focusData,\n    link: links.linkCompare\n  }, {\n    text: \"Вернуться назад\",\n    name: 'back',\n    icon: \"fa fa-share\",\n    onclick: hendlerCloseWindow,\n    link: links.linkBase\n  }];\n  const CompareTableEltypeClassWithSaveFocusRow = withClickSaveFocusRow(CompareTableEltypeClass);\n  useEffect(() => {\n    document.oncontextmenu = function (event) {\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      if (event.target.tagName == 'TD') {\n        setFlagOpenContextMenuWindow({\n          flag: true,\n          clientX: event.clientX,\n          clientY: event.clientY\n        });\n      }\n\n      ;\n    };\n\n    document.onclick = function () {\n      setFlagOpenContextMenuWindow({\n        flag: false,\n        clientX: '',\n        clientY: ''\n      });\n    };\n\n    document.onscroll = function () {\n      setFlagOpenContextMenuWindow({\n        flag: false,\n        clientX: '',\n        clientY: ''\n      });\n    }; //добавляем подсказки на кнопки консоли\n\n\n    if (flagEmployDescription == true) {\n      let aboutDescription = {};\n      stateConsoleButton.map(obj => {\n        aboutDescription[obj.name] = [obj.text];\n      });\n      dispatch(addDescription(aboutDescription, arrDescription));\n    }\n\n    ;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__header__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButton, {\n    classnameWrapper: \"DataBase__header__console\",\n    stateConsoleButton: stateConsoleButton,\n    classnameDescription: \"DescriptionButton\",\n    tabindex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HeaderCompare, {\n    classname: \"DataBase__header__header\",\n    nameBase: \"\\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    nameHeader: \"\\u0421\\u0440\\u0430\\u0432\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u0431\\u0440\\u0430\\u043D\\u043D\\u043E\\u0435\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ButtonLinkSmallNotMouse, {\n    to: links.linkBase,\n    icon: \"fa fa-share\",\n    onclick: hendlerCloseWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  })), compareArr.length > 1 ? /*#__PURE__*/React.createElement(CompareTableEltypeClassWithSaveFocusRow, {\n    classname: \"DataBase__table__container\",\n    columnName: Object.keys(compareArr[0]),\n    dataTable: compareArr,\n    onclickDelete: hendlerDeleteContext,\n    onclickSortCompare: (event, keyName) => hendlerSortCompare(event, keyName),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(WarningCompare, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 23\n    }\n  }), flagOpenContextMenuWindow.flag ? /*#__PURE__*/React.createElement(ContextMenuCompare, {\n    stateConsoleButton: stateConsoleButton,\n    classname: \"ContextMenuWindow\",\n    clientX: flagOpenContextMenuWindow.clientX,\n    clientY: flagOpenContextMenuWindow.clientY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 21\n    }\n  }) : null);\n}\n\nexport default connect()(CompareEltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/CompareEltypeClass.js"],"names":["React","useState","useEffect","connect","useDispatch","useSelector","ButtonLinkSmallNotMouse","ConsoleButton","HeaderCompare","CompareTableEltypeClass","WarningCompare","ContextMenuCompare","withClickSaveFocusRow","saveDataStore","saveTypeRequest","saveNameWindow","changeAdressOpenTable","clearCompareArr","deleteDataCompareArr","sortingCompareArr","addDescription","sortBase","tablebodyBackgroundClear","tablebodyBackground_Coffee","rowFocus_Coffee","CompareEltypeClass","props","dispatch","compareArr","state","compareDataEltypeClass","focusData","createDataEltypeClass","stateData","links","stateLinksEltypeClass","flagEmployDescription","stateFlagsAll","employDescriptionAll","arrDescription","stateDescription","flagOpenContextMenuWindow","setFlagOpenContextMenuWindow","flag","clientX","clientY","hendlerOpenWindow","nameWindow","typeRequest","hendlerClearCompareArr","linkBase","hendlerDeleteContext","data","uid","name","isDeleted","isTemplate","hendlerCloseWindow","hendlerSortCompare","event","sortKey","stateConsoleButton","text","icon","onclick","link","linkEditWindow","linkWindowConfirmDeleting","linkCompare","CompareTableEltypeClassWithSaveFocusRow","document","oncontextmenu","defaultPrevented","preventDefault","target","tagName","onscroll","aboutDescription","map","obj","length","Object","keys","keyName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ButtonLinkSmallNotMouse from '../../UserInterface/Buttons/Button/ButtonLinkSmallNotMouse';\r\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\r\nimport HeaderCompare from '../../components/Header/HeaderCompare';\r\nimport CompareTableEltypeClass from '../../components/Table/CompareTableEltypeClass';\r\nimport WarningCompare from '../../components/WarningWindow/WarningCompare';\r\nimport ContextMenuCompare from '../../components/ContextMenuWindow/ContextMenuCompare';\r\n\r\nimport withClickSaveFocusRow from \"../../hoc/withClickSaveFocusRow\";\r\n\r\nimport {\r\n    saveDataStore,\r\n    saveTypeRequest,\r\n    saveNameWindow,\r\n} from '../../store/EltypeClass/actions/actionEltypeClass';\r\n\r\nimport { changeAdressOpenTable } from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\r\n\r\nimport {\r\n    clearCompareArr,\r\n    deleteDataCompareArr,\r\n    sortingCompareArr\r\n} from '../../store/EltypeClass/actions/actionsСompareEltypeClass';\r\n\r\nimport { addDescription } from \"../../store/Description/actionsDescription\";\r\n\r\nimport { sortBase } from '../../functions/Sort';\r\nimport { tablebodyBackgroundClear } from '../../functions/tablebodyBackgroundClear';\r\n\r\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../../styles/const_color';\r\n\r\nfunction CompareEltypeClass(props) {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n    const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\r\n\r\n    const focusData = useSelector(state => state.createDataEltypeClass.stateData); //хранение данных выбранной строки\r\n\r\n    const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\r\n\r\n    const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll) // разрешен ли пользователем показ подсказок\r\n\r\n    const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга)\r\n\r\n    //правая кнопка мыши\r\n    const [flagOpenContextMenuWindow, setFlagOpenContextMenuWindow] = useState({\r\n                                                                                    flag: false,\r\n                                                                                    clientX: '',\r\n                                                                                    clientY: ''\r\n                                                                                });\r\n\r\n\r\n\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n\r\n    const hendlerClearCompareArr = () => {\r\n        dispatch(clearCompareArr());\r\n        // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n        dispatch(changeAdressOpenTable(links.linkBase));\r\n    }\r\n    \r\n\r\n    const hendlerDeleteContext = (data) => {\r\n        dispatch(deleteDataCompareArr(data, compareArr)); // удалить из массива сравнений\r\n        //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\r\n        dispatch(saveDataStore({\r\n                                uid: \"\",\r\n                                name: \"\",\r\n                                isDeleted: false,\r\n                                isTemplate: false\r\n                            })\r\n                            );\r\n        tablebodyBackgroundClear();\r\n    }\r\n\r\n    const hendlerCloseWindow = () => {\r\n            //закрываем окно и поэтому обнуляем хранение фокуса:\r\n            dispatch(saveDataStore({\r\n                                        uid: \"\",\r\n                                        name: \"\",\r\n                                        isDeleted: false,\r\n                                        isTemplate: false\r\n                                    })\r\n                        );\r\n            // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n            dispatch(changeAdressOpenTable(links.linkBase));\r\n    }\r\n    const hendlerSortCompare = (event, sortKey) => {\r\n\r\n        let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\r\n        dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \r\n    }\r\n\r\n    const stateConsoleButton = [\r\n\r\n        {\r\n            text: \"Внести изменения\",\r\n            name: 'edit',\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Удалить\",\r\n            name: 'delete',\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Очистить список сравнений\",\r\n            name: 'clear',\r\n            icon: \"fa fa-minus-square-o\",\r\n            onclick: hendlerClearCompareArr,\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Убрать из списка\",\r\n            name: 'deleteList',\r\n            icon: \"fa fa-external-link\",\r\n            onclick: hendlerDeleteContext,\r\n            data: focusData,\r\n            link: links.linkCompare\r\n        },\r\n        {\r\n            text: \"Вернуться назад\",\r\n            name: 'back',\r\n            icon: \"fa fa-share\",\r\n            onclick: hendlerCloseWindow,\r\n            link: links.linkBase\r\n        }\r\n    ];\r\n\r\n    const CompareTableEltypeClassWithSaveFocusRow = withClickSaveFocusRow(CompareTableEltypeClass);\r\n\r\n    useEffect(() => {\r\n        document.oncontextmenu = function (event) {\r\n            if (event.defaultPrevented) return;\r\n            event.preventDefault();\r\n\r\n            if (event.target.tagName == 'TD') {\r\n                setFlagOpenContextMenuWindow({\r\n                    flag: true,\r\n                    clientX: event.clientX,\r\n                    clientY: event.clientY\r\n                });\r\n            };\r\n\r\n        };\r\n        document.onclick = function () {\r\n            setFlagOpenContextMenuWindow({\r\n                flag: false,\r\n                clientX: '',\r\n                clientY: ''\r\n            });\r\n        }\r\n        document.onscroll = function () {\r\n            setFlagOpenContextMenuWindow({\r\n                flag: false,\r\n                clientX: '',\r\n                clientY: ''\r\n            });\r\n        }\r\n\r\n        //добавляем подсказки на кнопки консоли\r\n        if (flagEmployDescription == true) {\r\n            let aboutDescription = {};\r\n            stateConsoleButton.map((obj) => {\r\n                aboutDescription[obj.name] = [obj.text];\r\n            });\r\n            dispatch(addDescription(aboutDescription, arrDescription));\r\n        };\r\n\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <div className=\"DataBase__container\">\r\n\r\n            <div className=\"DataBase__header__container\">\r\n\r\n                <ConsoleButton\r\n                    classnameWrapper=\"DataBase__header__console\"\r\n                    stateConsoleButton={stateConsoleButton}\r\n                    classnameDescription='DescriptionButton'\r\n                    tabindex=\"-1\"\r\n                />\r\n\r\n                <HeaderCompare\r\n                    classname=\"DataBase__header__header\"\r\n                    nameBase=\"Классы для Типов связей и Типов сущностей\"\r\n                    nameHeader=\"Сравнить избранное\"\r\n                />\r\n\r\n                <ButtonLinkSmallNotMouse\r\n                    to={links.linkBase}\r\n                    icon=\"fa fa-share\"\r\n                    onclick={hendlerCloseWindow}\r\n                />\r\n            </div>\r\n            {\r\n                (compareArr.length > 1) ?\r\n                    <CompareTableEltypeClassWithSaveFocusRow\r\n                        classname=\"DataBase__table__container\"\r\n                        columnName={Object.keys(compareArr[0])}\r\n                        dataTable={compareArr}\r\n                        onclickDelete={hendlerDeleteContext}\r\n                        onclickSortCompare={(event, keyName) => hendlerSortCompare(event, keyName)}\r\n                    />\r\n                    : <WarningCompare />\r\n            }\r\n            {\r\n                flagOpenContextMenuWindow.flag ?\r\n                    <ContextMenuCompare\r\n                        stateConsoleButton={stateConsoleButton}\r\n                        classname=\"ContextMenuWindow\"\r\n                        clientX={flagOpenContextMenuWindow.clientX}\r\n                        clientY={flagOpenContextMenuWindow.clientY}\r\n                    />\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(CompareEltypeClass)"]},"metadata":{},"sourceType":"module"}