{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\EltypeClassWindowEdit.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport EditWindow from '../../components/EditWindow/EditWindow';\nimport { start_POST_RequestServer_EC, start_PUT_RequestServer_EC, saveDataStore_EC } from '../../store/EltypeClass/actions/actionEltypeClasse';\nconst mapDispatchToProps = {\n  saveDataStore_EC,\n  start_POST_RequestServer_EC,\n  start_PUT_RequestServer_EC\n};\n\nconst mapStateToProps = state => {\n  return {\n    initialProperties: state.WindowCreateData_EltypeClass\n  };\n};\n\nclass EditWindowContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handlerOnChange = (event, keyName) => this.setState({\n      [keyName]: event.target.value\n    });\n\n    this.nullStateEndDataStore = () => {\n      let nullState = {};\n      Object.keys(this.state).map(key => nullState[key] = '');\n      this.setState({ ...nullState\n      });\n    };\n\n    this.handlerSave = () => {\n      this.saveDataStore(this.state);\n\n      if (this.typeRequestServer === 'post') {\n        this.start_POST_RequestServer();\n      } else if (this.typeRequestServer === 'put') {\n        this.start_PUT_RequestServer();\n      }\n\n      this.nullStateEndDataStore();\n      this.handlerClose();\n    };\n\n    this.flag = props.initialProperties.flag;\n    this.state = props.initialProperties.stateData;\n    this.nameWindow = props.initialProperties.nameWindow;\n    this.labels = props.initialProperties.labels;\n    this.placeholders = props.initialProperties.placeholders;\n    this.typeData = props.initialProperties.typeData;\n    this.saveDataStore = props.saveDataStore_EC;\n    this.handlerClose = props.handlerClose;\n    this.start_POST_RequestServer = props.start_POST_RequestServer_EC;\n    this.start_PUT_RequestServer = props.start_PUT_RequestServer_EC;\n    this.typeRequestServer = props.typeRequestServer;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(EditWindow, {\n      nameWindow: this.nameWindow,\n      onchange: this.handlerOnChange,\n      stateData: this.state,\n      labels: this.labels,\n      placeholders: this.placeholders,\n      typeData: this.typeData,\n      classNameLabel: \"\",\n      classNameInput: \"\",\n      classNameTextarea: \"\",\n      nameButtonSave: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\",\n      nameButtonClose: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\",\n      onclick1: this.handlerSave,\n      onclick2: this.handlerClose,\n      classWrapper: \"\",\n      classButtonWrapper: \"\",\n      classButton: \"\",\n      classButtonX: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditWindowContainer);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/EltypeClassWindowEdit.js"],"names":["React","connect","EditWindow","start_POST_RequestServer_EC","start_PUT_RequestServer_EC","saveDataStore_EC","mapDispatchToProps","mapStateToProps","state","initialProperties","WindowCreateData_EltypeClass","EditWindowContainer","Component","constructor","props","handlerOnChange","event","keyName","setState","target","value","nullStateEndDataStore","nullState","Object","keys","map","key","handlerSave","saveDataStore","typeRequestServer","start_POST_RequestServer","start_PUT_RequestServer","handlerClose","flag","stateData","nameWindow","labels","placeholders","typeData","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport EditWindow from '../../components/EditWindow/EditWindow';\r\nimport { start_POST_RequestServer_EC, start_PUT_RequestServer_EC, saveDataStore_EC } from '../../store/EltypeClass/actions/actionEltypeClasse'\r\n\r\n\r\nconst mapDispatchToProps ={\r\n    saveDataStore_EC,\r\n    start_POST_RequestServer_EC,\r\n    start_PUT_RequestServer_EC\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        initialProperties: state.WindowCreateData_EltypeClass\r\n    }\r\n}\r\n\r\nclass EditWindowContainer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.flag = props.initialProperties.flag;\r\n        this.state = props.initialProperties.stateData;\r\n        this.nameWindow = props.initialProperties.nameWindow;\r\n        this.labels = props.initialProperties.labels;\r\n        this.placeholders = props.initialProperties.placeholders;\r\n        this.typeData = props.initialProperties.typeData;\r\n        \r\n        this.saveDataStore = props.saveDataStore_EC;\r\n        this.handlerClose = props.handlerClose;\r\n        this.start_POST_RequestServer = props.start_POST_RequestServer_EC;\r\n        this.start_PUT_RequestServer = props.start_PUT_RequestServer_EC;\r\n        \r\n        this.typeRequestServer = props.typeRequestServer;\r\n}\r\n\r\n    \r\nhandlerOnChange = (event, keyName)=>\r\n    this.setState({[keyName]: event.target.value})\r\n\r\nnullStateEndDataStore = ()=>{\r\n    let nullState = {};\r\n    Object.keys(this.state).map((key)=> nullState[key] = '')\r\n    this.setState({...nullState});\r\n}\r\n//    componentDidMount() {\r\n//        if (this.typeRequestServer === 'post') {\r\n//            this.nullStateEndDataStore();\r\n//        }\r\n//    }\r\nhandlerSave = ()=>{\r\n\r\n    this.saveDataStore(this.state);\r\n    \r\n    if (this.typeRequestServer === 'post'){\r\n    this.start_POST_RequestServer();\r\n    }else \r\n        if(this.typeRequestServer === 'put'){\r\n    this.start_PUT_RequestServer();\r\n    }\r\n    this.nullStateEndDataStore();\r\n    this.handlerClose();\r\n}\r\n\r\n    render(){\r\n    return(\r\n        \r\n            <EditWindow \r\n                    nameWindow = {this.nameWindow}\r\n        \r\n                    onchange = {this.handlerOnChange}\r\n                    stateData = {this.state}\r\n                    labels = {this.labels}\r\n                    placeholders = {this.placeholders}\r\n                    typeData ={this.typeData}\r\n        \r\n                    classNameLabel = ''\r\n                    classNameInput = ''\r\n                    classNameTextarea = ''\r\n        \r\n                    nameButtonSave = \"Сохранить\"\r\n                    nameButtonClose = \"Отмена\"\r\n                    onclick1 = {this.handlerSave}\r\n                    onclick2 = {this.handlerClose}\r\n                    classWrapper = \"\"\r\n                    classButtonWrapper = \"\"\r\n                    classButton = \"\"\r\n                    classButtonX = \"\"\r\n            />\r\n\r\n    )\r\n}\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditWindowContainer)\r\n\r\n"]},"metadata":{},"sourceType":"module"}