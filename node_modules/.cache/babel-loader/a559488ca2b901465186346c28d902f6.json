{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\CompareEltypeClass.js\";\nimport React, { useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ButtonLinkSmallNotMouse from '../../UserInterface/Buttons/Button/ButtonLinkSmallNotMouse';\nimport ConsoleButtonCompare from '../../components/ConsoleButton/ConsoleButtonCompare';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport CompareTableEltypeClass from '../../components/Table/CompareTableEltypeClass';\nimport ContextMenuCompare from '../../components/ContextMenuWindow/ContextMenuCompare';\nimport { saveDataStore, saveTypeRequest, saveNameWindow } from '../../store/EltypeClass/actions/actionEltypeClass';\nimport { changeAdressOpenTable } from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\nimport { clearCompareArr, deleteDataCompareArr } from '../../store/EltypeClass/actions/actionsСompareEltypeClass';\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../../styles/const_color';\n\nfunction CompareEltypeClass(props) {\n  const dispatch = useDispatch();\n  const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\n\n  const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\n\n  const focusData = useSelector(state => state.createDataEltypeClass.stateData); //хранение данных выбранной строки\n\n  const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\n\n  const tablebodyBackgroundClear = () => {\n    let tablebody = document.getElementById('tablebody');\n\n    for (let child of tablebody.children) {\n      child.style.background = tablebodyBackground_Coffee; //убираем цвет ранее выбранной строки\n    }\n\n    ;\n  }; //правая кнопка мыши\n\n\n  const [flagOpenContextMenuWindow, setFlagOpenContextMenuWindow] = useState({\n    flag: false,\n    clientX: '',\n    clientY: ''\n  });\n\n  document.oncontextmenu = function (event) {\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n\n    if (event.target.tagName == 'TD') {\n      setFlagOpenContextMenuWindow({\n        flag: true,\n        clientX: event.clientX,\n        clientY: event.clientY\n      });\n    }\n\n    ;\n  };\n\n  document.onclick = function () {\n    setFlagOpenContextMenuWindow({\n      flag: false,\n      clientX: '',\n      clientY: ''\n    });\n  };\n\n  document.onscroll = function () {\n    setFlagOpenContextMenuWindow({\n      flag: false,\n      clientX: '',\n      clientY: ''\n    });\n  };\n\n  const handlerTableRowUID = (event, data) => {\n    //фокус на строку\n    event.preventDefault();\n    let tr; //строка выбранной ячейки\n\n    if (event.target.parentElement.tagName == 'TR') {\n      tr = event.target.parentElement;\n      stateTable.map(obj => {\n        if (obj.uid === data) {\n          dispatch(saveDataStore(obj)); // сохранить в хранилище для изменений\n        }\n      });\n    } else if (event.target.parentElement.tagName == 'TD') {\n      tr = event.target.parentElement.parentElement;\n      stateTable.map(obj => {\n        if (obj.uid === data) {\n          dispatch(saveDataStore(obj)); // сохранить в хранилище для изменений\n        }\n      });\n    } else if (event.target.parentElement.tagName == 'DIV') {\n      tr = event.target.parentElement.parentElement.parentElement; //просто выделить, удаление идет через кнопку\n    }\n\n    ;\n    tablebodyBackgroundClear(); // очищаем поле\n\n    tr.style.background = rowFocus_Coffee; // выделяем цветом строчку\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const hendlerClearCompareArr = () => {\n    dispatch(clearCompareArr()); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase));\n  };\n\n  const HendlerOnMouseover = () => {};\n\n  const HendlerOnMouseLeave = () => {};\n\n  const hendlerDelete = row => {\n    dispatch(deleteDataCompareArr(row, compareArr)); // удалить из массива сравнений\n    //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\n\n    dispatch(saveDataStore({\n      uid: \"\",\n      name: \"\",\n      isDeleted: false,\n      isTemplate: false\n    }));\n  };\n\n  const hendlerDeleteContext = () => {\n    dispatch(deleteDataCompareArr(focusData, compareArr)); // удалить из массива сравнений\n    //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\n\n    dispatch(saveDataStore({\n      uid: \"\",\n      name: \"\",\n      isDeleted: false,\n      isTemplate: false\n    }));\n  };\n\n  const hendlerCloseWindow = () => {\n    //закрываем окно и поэтому обнуляем хранение фокуса:\n    dispatch(saveDataStore({\n      uid: \"\",\n      name: \"\",\n      isDeleted: false,\n      isTemplate: false\n    })); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase));\n  };\n\n  const stateConsoleButton = [{\n    text: \"Внести изменения\",\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить\",\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Очистить список сравнений\",\n    icon: \"fa fa-minus-square-o\",\n    onclick: hendlerClearCompareArr,\n    link: links.linkBase\n  }, {\n    text: \"Убрать из сравнения\",\n    icon: \"fa fa-filter fa-lg\",\n    onclick: hendlerDeleteContext\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__header__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButtonCompare, {\n    classnameWrapper: \"DataBase__header__console\",\n    stateConsoleButton: stateConsoleButton,\n    onmouseover: HendlerOnMouseover,\n    onmouseleave: HendlerOnMouseLeave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classname: \"DataBase__header__header\",\n    nameHeader: \"\\u0421\\u0440\\u0430\\u0432\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u0431\\u0440\\u0430\\u043D\\u043D\\u043E\\u0435: \\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ButtonLinkSmallNotMouse, {\n    to: links.linkBase,\n    icon: \"fa fa-times\",\n    onclick: hendlerCloseWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 17\n    }\n  })), compareArr.length > 1 ? /*#__PURE__*/React.createElement(CompareTableEltypeClass, {\n    columnName: Object.keys(compareArr[0]),\n    dataTable: compareArr,\n    onclick: (event, data) => handlerTableRowUID(event, data),\n    onclickDelete: hendlerDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 23\n    }\n  }, \"\\u043D\\u0435\\u0434\\u043E\\u0441\\u0442\\u0430\\u0442\\u043E\\u0447\\u043D\\u043E \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\"), flagOpenContextMenuWindow.flag ? /*#__PURE__*/React.createElement(ContextMenuCompare, {\n    stateConsoleButton: stateConsoleButton,\n    classname: \"ContextMenuWindow\",\n    clientX: flagOpenContextMenuWindow.clientX,\n    clientY: flagOpenContextMenuWindow.clientY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 21\n    }\n  }) : null);\n}\n\nexport default connect()(CompareEltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/CompareEltypeClass.js"],"names":["React","useState","connect","useDispatch","useSelector","ButtonLinkSmallNotMouse","ConsoleButtonCompare","HeaderDictionary","CompareTableEltypeClass","ContextMenuCompare","saveDataStore","saveTypeRequest","saveNameWindow","changeAdressOpenTable","clearCompareArr","deleteDataCompareArr","tablebodyBackground_Coffee","rowFocus_Coffee","CompareEltypeClass","props","dispatch","stateTable","state","stateTableEltypeClass","compareArr","compareDataEltypeClass","focusData","createDataEltypeClass","stateData","links","stateLinksEltypeClass","tablebodyBackgroundClear","tablebody","document","getElementById","child","children","style","background","flagOpenContextMenuWindow","setFlagOpenContextMenuWindow","flag","clientX","clientY","oncontextmenu","event","defaultPrevented","preventDefault","target","tagName","onclick","onscroll","handlerTableRowUID","data","tr","parentElement","map","obj","uid","hendlerOpenWindow","nameWindow","typeRequest","hendlerClearCompareArr","linkBase","HendlerOnMouseover","HendlerOnMouseLeave","hendlerDelete","row","name","isDeleted","isTemplate","hendlerDeleteContext","hendlerCloseWindow","stateConsoleButton","text","icon","link","linkEditWindow","linkWindowConfirmDeleting","length","Object","keys"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ButtonLinkSmallNotMouse from '../../UserInterface/Buttons/Button/ButtonLinkSmallNotMouse';\r\nimport ConsoleButtonCompare from '../../components/ConsoleButton/ConsoleButtonCompare';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport CompareTableEltypeClass from '../../components/Table/CompareTableEltypeClass';\r\nimport ContextMenuCompare from '../../components/ContextMenuWindow/ContextMenuCompare';\r\n\r\nimport {\r\n    saveDataStore,\r\n    saveTypeRequest,\r\n    saveNameWindow,\r\n} from '../../store/EltypeClass/actions/actionEltypeClass';\r\n\r\nimport { changeAdressOpenTable } from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\r\n\r\nimport {\r\n    clearCompareArr,\r\n    deleteDataCompareArr\r\n} from '../../store/EltypeClass/actions/actionsСompareEltypeClass';\r\n\r\n\r\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../../styles/const_color';\r\n\r\nfunction CompareEltypeClass(props) {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\r\n\r\n    const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\r\n\r\n    const focusData = useSelector(state => state.createDataEltypeClass.stateData); //хранение данных выбранной строки\r\n\r\n    const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\r\n\r\n    const tablebodyBackgroundClear = () => {\r\n        let tablebody = document.getElementById('tablebody');\r\n        for (let child of tablebody.children) {\r\n            child.style.background = tablebodyBackground_Coffee;//убираем цвет ранее выбранной строки\r\n        };\r\n    }\r\n\r\n    //правая кнопка мыши\r\n    const [flagOpenContextMenuWindow, setFlagOpenContextMenuWindow] = useState({\r\n        flag: false,\r\n        clientX: '',\r\n        clientY: ''\r\n    });\r\n    document.oncontextmenu = function (event) {\r\n        if (event.defaultPrevented) return;\r\n        event.preventDefault();\r\n\r\n        if (event.target.tagName == 'TD') {\r\n            setFlagOpenContextMenuWindow({\r\n                flag: true,\r\n                clientX: event.clientX,\r\n                clientY: event.clientY\r\n            });\r\n        };\r\n\r\n    };\r\n    document.onclick = function () {\r\n        setFlagOpenContextMenuWindow({\r\n            flag: false,\r\n            clientX: '',\r\n            clientY: ''\r\n        });\r\n    }\r\n    document.onscroll = function () {\r\n        setFlagOpenContextMenuWindow({\r\n            flag: false,\r\n            clientX: '',\r\n            clientY: ''\r\n        });\r\n    }\r\n    const handlerTableRowUID = (event, data) => { //фокус на строку\r\n        event.preventDefault();\r\n\r\n        let tr; //строка выбранной ячейки\r\n        if (event.target.parentElement.tagName == 'TR') {\r\n            tr = event.target.parentElement; \r\n\r\n            stateTable.map((obj) => {\r\n                if (obj.uid === data) {\r\n                    dispatch(saveDataStore(obj)); // сохранить в хранилище для изменений\r\n                }\r\n            })\r\n        } else if (event.target.parentElement.tagName == 'TD') {\r\n            tr = event.target.parentElement.parentElement;\r\n\r\n            stateTable.map((obj) => {\r\n                if (obj.uid === data) {\r\n                    dispatch(saveDataStore(obj)); // сохранить в хранилище для изменений\r\n                }\r\n            })\r\n        } else if (event.target.parentElement.tagName == 'DIV') {\r\n            tr = event.target.parentElement.parentElement.parentElement; //просто выделить, удаление идет через кнопку\r\n        };\r\n        tablebodyBackgroundClear(); // очищаем поле\r\n        tr.style.background = rowFocus_Coffee; // выделяем цветом строчку\r\n    }\r\n\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n\r\n    const hendlerClearCompareArr = () => {\r\n        dispatch(clearCompareArr());\r\n        // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n        dispatch(changeAdressOpenTable(links.linkBase));\r\n    }\r\n\r\n    const HendlerOnMouseover = () => {}\r\n    const HendlerOnMouseLeave = () => {}\r\n    \r\n    const hendlerDelete = (row) => {\r\n        dispatch(deleteDataCompareArr(row, compareArr)); // удалить из массива сравнений\r\n        //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\r\n        dispatch(saveDataStore({\r\n                            uid: \"\",\r\n                            name: \"\",\r\n                            isDeleted: false,\r\n                            isTemplate: false\r\n                        })\r\n                      );\r\n    }\r\n    const hendlerDeleteContext = () => {\r\n        dispatch(deleteDataCompareArr(focusData, compareArr)); // удалить из массива сравнений\r\n        //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\r\n        dispatch(saveDataStore({\r\n                                uid: \"\",\r\n                                name: \"\",\r\n                                isDeleted: false,\r\n                                isTemplate: false\r\n                            })\r\n                        );\r\n    }\r\n\r\n    const hendlerCloseWindow = () => {\r\n            //закрываем окно и поэтому обнуляем хранение фокуса:\r\n            dispatch(saveDataStore({\r\n                                        uid: \"\",\r\n                                        name: \"\",\r\n                                        isDeleted: false,\r\n                                        isTemplate: false\r\n                                    })\r\n                        );\r\n            // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n            dispatch(changeAdressOpenTable(links.linkBase));\r\n    }\r\n\r\n    const stateConsoleButton = [\r\n  \r\n        {\r\n            text: \"Внести изменения\",\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Удалить\",\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Очистить список сравнений\",\r\n            icon: \"fa fa-minus-square-o\",\r\n            onclick: hendlerClearCompareArr,\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Убрать из сравнения\",\r\n            icon: \"fa fa-filter fa-lg\",\r\n            onclick: hendlerDeleteContext\r\n        }\r\n    ];\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"DataBase__container\">\r\n\r\n            <div className=\"DataBase__header__container\">\r\n\r\n                <ConsoleButtonCompare\r\n                    classnameWrapper=\"DataBase__header__console\"\r\n\r\n                    stateConsoleButton={stateConsoleButton}\r\n\r\n                    onmouseover={HendlerOnMouseover}\r\n                    onmouseleave={HendlerOnMouseLeave}\r\n\r\n                />\r\n\r\n                <HeaderDictionary\r\n                    classname=\"DataBase__header__header\"\r\n                    nameHeader=\"Сравнить избранное: Классы для Типов связей и Типов сущностей\"\r\n                />\r\n\r\n                <ButtonLinkSmallNotMouse\r\n                    to={links.linkBase}\r\n                    icon=\"fa fa-times\"\r\n                    onclick={hendlerCloseWindow}\r\n                />\r\n            </div>\r\n            {\r\n                (compareArr.length > 1) ?\r\n                    <CompareTableEltypeClass\r\n                        columnName={Object.keys(compareArr[0])}\r\n                        dataTable={compareArr}\r\n                        onclick={(event, data) => handlerTableRowUID(event, data)}\r\n                        onclickDelete={hendlerDelete}\r\n                    />\r\n                    : <div>недостаточно данных</div>\r\n\r\n            }\r\n            {\r\n                flagOpenContextMenuWindow.flag ?\r\n                    <ContextMenuCompare\r\n                        stateConsoleButton={stateConsoleButton}\r\n                        classname=\"ContextMenuWindow\"\r\n                        clientX={flagOpenContextMenuWindow.clientX}\r\n                        clientY={flagOpenContextMenuWindow.clientY}\r\n                    />\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(CompareEltypeClass)"]},"metadata":{},"sourceType":"module"}