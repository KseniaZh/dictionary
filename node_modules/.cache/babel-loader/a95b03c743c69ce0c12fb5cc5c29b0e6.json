{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\components\\\\Table\\\\RowTable.js\";\nimport React, { useEffect, useState } from 'react';\nimport ButtonSmall from '../../UserInterface/Buttons/Button/ButtonSmall';\nimport withHoverDescription from '../../hoc/withHoverDescription';\nimport DescriptionButton from '../../components/Description/DescriptionButton';\n\nfunction RowTable(props) {\n  const Keys = Object.keys(props.dataRow).filter(key => key !== \"uid\");\n  const uid = props.dataRow.uid;\n\n  const inputChecked = data => data ? 'checked' : false;\n\n  const deleteRowfromCompare = (event, data) => {\n    event.stopPropagation(); //останавливаем всплытие события\n\n    props.onclick(event, uid); // появляется из hoc withClickSaveFocus в компоненте TableList\n\n    props.onclickDelete(data);\n  };\n\n  const addRowfromCompare = (event, data) => {\n    event.stopPropagation(); //останавливаем всплытие события\n\n    props.onclick(event, uid); // появляется из hoc withClickSaveFocus в компоненте TableList\n\n    props.onclickButtonRowClickAddCompareData(data);\n  };\n\n  const [styleRow, setStyleRow] = useState({\n    background: `${props.colorRowTableBackground}`,\n    'fontWeight': 'normal'\n  });\n  const [buttonRow, setButtonRow] = useState({\n    icon: \"fa fa-filter fa-lg\",\n    name: 'addCompare',\n    func: addRowfromCompare\n  }); // логика всплывающей подсказки спрятана в hoc, обертка кнопок и подсказка реализованы в ButtonConsoleTable\n\n  const ButtonRow = withHoverDescription(ButtonSmall, DescriptionButton);\n\n  const hendlerClick = event => {\n    // props.onclick(event, uid);\n    console.log('click button');\n  };\n\n  useEffect(() => {\n    // кнопка добавить/убрать из сравнения в начале строки основной таблицы, данные сохраняются после перерисовки\n    if (props.flagOpenCompareWindow === false) {\n      props.compareArrUid.map(arrUid => {\n        if (arrUid === uid) {\n          setButtonRow(prevState => {\n            return {\n              icon: \"fa fa-times-circle\",\n              name: \"DeleteRow\",\n              func: deleteRowfromCompare\n            };\n          });\n        }\n      });\n    }\n\n    ; //выделение строки фокуса цветом\n\n    if (props.focusData.uid === uid) {\n      setStyleRow(prevState => {\n        return {\n          background: `${props.colorFocusRowBackground}`,\n          'fontWeight': '600'\n        };\n      });\n    }\n\n    ;\n  }, []);\n  console.log('render СТРОКА ', props.number);\n  return /*#__PURE__*/React.createElement(\"tr\", {\n    className: props.classnameRowTable,\n    style: styleRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, props.flagOpenCompareWindow ? /*#__PURE__*/React.createElement(\"td\", {\n    onClick: deleteRowfromCompare,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ButtonRow, {\n    icon: \"fa fa-times-circle\",\n    onclick: deleteRowfromCompare,\n    data: props.dataRow,\n    name: \"DeleteRow\",\n    classnameDescription: props.classnameDescription,\n    positionDescription: \"no\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(ButtonRow, {\n    icon: buttonRow.icon,\n    onclick: buttonRow.func,\n    data: props.dataRow,\n    name: buttonRow.name,\n    classnameDescription: props.classnameDescription,\n    positionDescription: \"no\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  })), Keys.map((keyObj, index) => {\n    if (props.number <= props.CountRow) {\n      if (props.typeDataColumns[index] === 'text') {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          key: index,\n          uid: props.dataRow.uid,\n          onClick: hendlerClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 40\n          }\n        }, props.dataRow[keyObj]);\n      }\n\n      if (props.typeDataColumns[index] === 'checkbox') {\n        return /*#__PURE__*/React.createElement(\"td\", {\n          key: index,\n          uid: props.dataRow.uid,\n          onClick: hendlerClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 40\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          type: \"checkbox\",\n          checked: inputChecked(props.dataRow[keyObj]),\n          disabled: \"disabled\",\n          className: props.classnameCheckbox,\n          style: styleRow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 41\n          }\n        }));\n      }\n    }\n  }));\n}\n\nexport default React.memo(RowTable); //  const inputChecked = data => data ? <span className=\"fa fa-check\" aria-hidden=\"true\"></span> : null","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/components/Table/RowTable.js"],"names":["React","useEffect","useState","ButtonSmall","withHoverDescription","DescriptionButton","RowTable","props","Keys","Object","keys","dataRow","filter","key","uid","inputChecked","data","deleteRowfromCompare","event","stopPropagation","onclick","onclickDelete","addRowfromCompare","onclickButtonRowClickAddCompareData","styleRow","setStyleRow","background","colorRowTableBackground","buttonRow","setButtonRow","icon","name","func","ButtonRow","hendlerClick","console","log","flagOpenCompareWindow","compareArrUid","map","arrUid","prevState","focusData","colorFocusRowBackground","number","classnameRowTable","classnameDescription","keyObj","index","CountRow","typeDataColumns","classnameCheckbox","memo"],"mappings":"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","sourcesContent":["import React, {useEffect, useState } from 'react';\r\nimport ButtonSmall from '../../UserInterface/Buttons/Button/ButtonSmall';\r\nimport withHoverDescription from '../../hoc/withHoverDescription';\r\nimport DescriptionButton from '../../components/Description/DescriptionButton';\r\n\r\nfunction RowTable(props) {\r\n    \r\n    const Keys = Object.keys(props.dataRow).filter(key => key !== \"uid\");\r\n    const uid = props.dataRow.uid;\r\n\r\n    const inputChecked = data => data ? 'checked' : false;\r\n\r\n   \r\n    const deleteRowfromCompare = (event, data) => {\r\n        event.stopPropagation(); //останавливаем всплытие события\r\n        props.onclick(event, uid); // появляется из hoc withClickSaveFocus в компоненте TableList\r\n        props.onclickDelete(data);\r\n    }\r\n\r\n    const addRowfromCompare = (event, data) => {\r\n        event.stopPropagation(); //останавливаем всплытие события\r\n        props.onclick(event, uid); // появляется из hoc withClickSaveFocus в компоненте TableList\r\n        props.onclickButtonRowClickAddCompareData(data);\r\n    }\r\n    const [styleRow, setStyleRow] = useState({ background: `${props.colorRowTableBackground}`, 'fontWeight': 'normal'});\r\n\r\n    const [buttonRow, setButtonRow] = useState({icon: \"fa fa-filter fa-lg\", name: 'addCompare', func: addRowfromCompare });\r\n\r\n    // логика всплывающей подсказки спрятана в hoc, обертка кнопок и подсказка реализованы в ButtonConsoleTable\r\n    const ButtonRow = withHoverDescription(ButtonSmall, DescriptionButton);\r\n\r\n    const hendlerClick = (event) => {\r\n        // props.onclick(event, uid);\r\n        console.log('click button');\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        // кнопка добавить/убрать из сравнения в начале строки основной таблицы, данные сохраняются после перерисовки\r\n        if (props.flagOpenCompareWindow === false) {\r\n            props.compareArrUid.map(arrUid => {\r\n                if (arrUid === uid) {\r\n                    setButtonRow((prevState) => {\r\n                        return { icon: \"fa fa-times-circle\", name: \"DeleteRow\", func: deleteRowfromCompare};\r\n                    })\r\n                }\r\n            })\r\n        };\r\n\r\n        //выделение строки фокуса цветом\r\n        if (props.focusData.uid === uid) {\r\n            setStyleRow((prevState) => {\r\n                return {background: `${props.colorFocusRowBackground}`, 'fontWeight': '600' };\r\n            })\r\n        };\r\n    }, [])\r\n    console.log('render СТРОКА ', props.number);\r\n    return(\r\n\r\n        <tr className={props.classnameRowTable} style={styleRow}>\r\n            {\r\n                props.flagOpenCompareWindow ?\r\n                    <td onClick={deleteRowfromCompare} >\r\n                        <ButtonRow\r\n                            icon=\"fa fa-times-circle\"\r\n                            onclick={deleteRowfromCompare}\r\n                            data={props.dataRow}\r\n                            name=\"DeleteRow\"\r\n                            classnameDescription={props.classnameDescription }\r\n                            positionDescription=\"no\"\r\n                        />\r\n                    </td>\r\n                    : <td>\r\n                        <ButtonRow\r\n                            icon={buttonRow.icon}\r\n                            onclick={buttonRow.func}\r\n                            data={props.dataRow}\r\n                            name={buttonRow.name}\r\n                            classnameDescription={props.classnameDescription}\r\n                            positionDescription=\"no\"\r\n                        />\r\n                    </td>\r\n            }\r\n            \r\n            \r\n            {\r\n                Keys.map((keyObj, index) => {\r\n\r\n                    if (props.number <= props.CountRow) {\r\n\r\n                        if (props.typeDataColumns[index] === 'text') {\r\n                                return <td\r\n                                            key={index}\r\n                                            uid={props.dataRow.uid}\r\n                                            onClick={hendlerClick}\r\n                                        >\r\n                                            {props.dataRow[keyObj]}\r\n                                        </td>\r\n                            }\r\n\r\n                        if (props.typeDataColumns[index] === 'checkbox') {\r\n                                return <td\r\n                                        key={index}\r\n                                        uid={props.dataRow.uid}\r\n                                        onClick={hendlerClick}\r\n                                >\r\n                                        < input\r\n                                            type=\"checkbox\"\r\n                                            checked={inputChecked(props.dataRow[keyObj])}\r\n                                            disabled=\"disabled\"\r\n                                            className={props.classnameCheckbox}\r\n                                            style={styleRow}\r\n                                        />\r\n                                    \r\n                                </td>\r\n                            }\r\n                    }  \r\n                }) \r\n            }\r\n        \r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default React.memo(RowTable)\r\n\r\n//  const inputChecked = data => data ? <span className=\"fa fa-check\" aria-hidden=\"true\"></span> : null\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}