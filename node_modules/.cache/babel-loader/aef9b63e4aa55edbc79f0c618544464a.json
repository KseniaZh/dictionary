{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\EltypeClass.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\nimport TableList from '../../components/Table/TableListEltypeClass';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\nimport { startGetRequestServerEltypeClass, saveDataStore, saveTypeRequest, saveNameWindow } from '../../store/EltypeClass/actions/actionEltypeClass';\nimport { changeCountRowTable, getCounterPagesTable, changeNumberList, getDataPageRowTable, changeActivArrNumberPagesFooterTable } from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\nimport { addDescription } from \"../../store/Description/actionsDescription\";\nimport { tablebodyBackgroundClear } from '../../functions/tablebodyBackgroundClear';\nimport { changeAdressOpenTable } from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\nimport { addDataCompareArr } from '../../store/EltypeClass/actions/actionsCompareEltypeClass';\nimport { rowFocus_Coffee } from '../../styles/const_color';\n\nfunction EltypeClass(props) {\n  const dispatch = useDispatch();\n  const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\n  const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\n\n  const dataTable = useSelector(state => state.stateFlagsEltypeClass.dataListTable); // отображаемый лист\n\n  const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // общее количество листов в таблице\n\n  const activArrNumberPages = useSelector(state => state.stateFlagsEltypeClass.activArrNumberPagesFooterTable); //предлагаемый на выбор массив из 3х кнопок в консоли переключения отображаемых листов таблицы\n\n  const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\n\n  const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\n\n  const focusData = useSelector(state => state.createDataEltypeClass.stateData); // фокус. запомнить данные выбранной строки\n\n  const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\n\n  const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\n\n  const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll); // разрешен ли пользователем показ подсказок\n\n  const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга)\n\n  const focusNull = () => {\n    tablebodyBackgroundClear();\n    dispatch(saveDataStore({\n      uid: \"\",\n      name: \"\",\n      isDeleted: false,\n      isTemplate: false\n    }));\n  }; //правая кнопка мыши открывает контестное меню\n\n\n  const [flagOpenContextMenuWindow, setFlagOpenContextMenuWindow] = useState({\n    flag: false,\n    clientX: '',\n    clientY: ''\n  });\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const [flagCountRow, setFlagCoutnRow] = useState(false); // флаг инпута в футере для изменения к-ва строк на листе\n\n  const hendlerInputOpen = () => {\n    setFlagCoutnRow(true);\n  };\n\n  const hendlerChangeCountRow = event => {\n    event.preventDefault();\n    dispatch(changeCountRowTable(event.target.value));\n    dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\n\n    if (numberList != 1) {\n      focusNull(); // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные\n    }\n\n    ;\n  };\n\n  const hendlerInputSave = () => {\n    setFlagCoutnRow(false);\n    dispatch(getCounterPagesTable(stateTable, countRow));\n    dispatch(getDataPageRowTable(stateTable, countRow, numberList));\n  }; //после выбора страницы приходит ее номер, в хранилище собираем новую страницу, в хранилище сохраняем номер страницы\n\n\n  const hendlerOpenPagesTable = num => {\n    dispatch(getDataPageRowTable(stateTable, countRow, num));\n    dispatch(changeNumberList(num));\n    focusNull(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\n\n    dispatch(changeActivArrNumberPagesFooterTable(num, counterPages)); //измениям консоль выбора активной страницы в футере\n  };\n\n  const hendlerChangeButtonConsole = num => {\n    dispatch(changeActivArrNumberPagesFooterTable(num, counterPages, activArrNumberPages)); //переключение стрелками консоли выбора активной страницы в футере\n  };\n\n  const hendlerAddCompareData = () => {\n    dispatch(addDataCompareArr(focusData, compareArr));\n  };\n\n  const hendlerOpenCompareWindow = () => {\n    dispatch(addDataCompareArr(focusData, compareArr)); //добавить выделенную строку в сравнение\n\n    focusNull();\n    dispatch(changeAdressOpenTable(links.linkCompare));\n  };\n\n  const hendlerSearchBase = event => {\n    event.preventDefault();\n\n    if (event.target.value == '') {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    let num; // номер выбранного объекта в массиве\n\n    let numRowOnPage; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\n\n    stateTable.map((obj, index) => {\n      if (obj.name == event.target.value) {\n        num = index + 1;\n        numRowOnPage = index + 1;\n        dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\n      }\n    }); //поиск номера страницы\n\n    let i = countRow;\n    let numList = 1;\n\n    if (num == undefined) {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    while (i < num) {\n      i = i + countRow;\n      numRowOnPage = numRowOnPage - countRow;\n      numList++;\n    }\n\n    dispatch(changeNumberList(numList)); //сохраняем номер\n\n    dispatch(getDataPageRowTable(stateTable, countRow, numList)); // загружаем выбранный лист\n\n    tablebodyBackgroundClear();\n    let tablebody = document.querySelector('tbody');\n    tablebody.children[numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\n\n    tablebody.children[numRowOnPage - 1].children[1].focus();\n  };\n\n  const stateConsoleButton = [{\n    text: \"Обновить\",\n    name: 'update',\n    icon: \"fa fa-download fa-lg\",\n    onclick: () => {\n      dispatch(startGetRequestServerEltypeClass());\n    },\n    link: links.linkBase\n  }, {\n    text: \"Добавить новые данные\",\n    name: 'add',\n    icon: \"fa fa-plus fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Внести изменения\",\n    name: 'edit',\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить\",\n    name: 'delete',\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Сравнить\",\n    name: 'compare',\n    icon: \"fa fa-balance-scale\",\n    onclick: hendlerOpenCompareWindow,\n    link: links.linkCompare\n  }, {\n    text: \"Добавить к сравнению\",\n    name: 'addCompare',\n    icon: \"fa fa-filter fa-lg\",\n    onclick: () => hendlerAddCompareData(),\n    link: links.linkBase\n  }];\n  useEffect(() => {\n    dispatch(startGetRequestServerEltypeClass());\n\n    document.oncontextmenu = function (event) {\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      if (event.target.tagName == 'TD') {\n        setFlagOpenContextMenuWindow({\n          flag: true,\n          clientX: event.clientX,\n          clientY: event.clientY\n        });\n      }\n\n      ;\n    };\n\n    const SearchBaseName = document.getElementById('SearchBaseName');\n\n    document.onclick = function (event) {\n      event.preventDefault();\n      setFlagOpenContextMenuWindow({\n        flag: false,\n        clientX: '',\n        clientY: ''\n      });\n\n      if (event.target.tagName != \"INPUT\") {\n        SearchBaseName.value = '';\n      }\n    };\n\n    document.onscroll = function () {\n      setFlagOpenContextMenuWindow({\n        flag: false,\n        clientX: '',\n        clientY: ''\n      });\n    }; //добавляем подсказки на кнопки консоли\n\n\n    if (flagEmployDescription == true) {\n      let aboutDescription = {};\n      stateConsoleButton.map(obj => {\n        aboutDescription[obj.name] = [obj.text];\n      });\n      dispatch(addDescription(aboutDescription, arrDescription));\n    }\n\n    ;\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__header__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButton, {\n    classnameWrapper: \"DataBase__header__console\",\n    stateConsoleButton: stateConsoleButton,\n    classnameDescription: \"DescriptionButton\",\n    tabindex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classname: \"DataBase__header__header\",\n    nameHeader: \"\\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    dataBase: stateTable,\n    onchangeSearch: event => hendlerSearchBase(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 21\n    }\n  })), stateLoading ? /*#__PURE__*/React.createElement(AwaitLoading, {\n    classname: \"Loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(TableList, {\n    classname: \"DataBase__table__container\",\n    classnameConsoleCountRow: \"ConsoleCountRow\",\n    classnameButtonConsoleCountPow: \"PersonalizeButton\",\n    columnName: Object.keys(stateTable[0]),\n    stateTable: stateTable,\n    length: stateTable.length,\n    dataTable: dataTable,\n    onclickInputOpen: hendlerInputOpen,\n    onclickInputSave: hendlerInputSave,\n    onclickOpenPagesTable: numButton => hendlerOpenPagesTable(numButton),\n    onclickChangeButtonConsole: hendlerChangeButtonConsole,\n    flagCountRow: flagCountRow,\n    onchangeCountRow: event => hendlerChangeCountRow(event),\n    CountRow: countRow,\n    counterPages: counterPages,\n    activArrNumberPages: activArrNumberPages,\n    focusUid: focusData.uid,\n    numberActivList: numberList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 23\n    }\n  }), flagOpenContextMenuWindow.flag ? /*#__PURE__*/React.createElement(ContextMenuWindow, {\n    stateConsoleButton: stateConsoleButton,\n    classname: \"ContextMenuWindow\",\n    clientX: flagOpenContextMenuWindow.clientX,\n    clientY: flagOpenContextMenuWindow.clientY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 25\n    }\n  }) : null);\n}\n\nexport default connect()(EltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/EltypeClass.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","ConsoleButton","TableList","HeaderDictionary","ContextMenuWindow","AwaitLoading","startGetRequestServerEltypeClass","saveDataStore","saveTypeRequest","saveNameWindow","changeCountRowTable","getCounterPagesTable","changeNumberList","getDataPageRowTable","changeActivArrNumberPagesFooterTable","addDescription","tablebodyBackgroundClear","changeAdressOpenTable","addDataCompareArr","rowFocus_Coffee","EltypeClass","props","dispatch","stateLoading","state","stateFlagsEltypeClass","loading","stateTable","stateTableEltypeClass","dataTable","dataListTable","counterPages","counterPagesTable","activArrNumberPages","activArrNumberPagesFooterTable","countRow","countRowTable","numberList","focusData","createDataEltypeClass","stateData","compareArr","compareDataEltypeClass","links","stateLinksEltypeClass","flagEmployDescription","stateFlagsAll","employDescriptionAll","arrDescription","stateDescription","focusNull","uid","name","isDeleted","isTemplate","flagOpenContextMenuWindow","setFlagOpenContextMenuWindow","flag","clientX","clientY","hendlerOpenWindow","nameWindow","typeRequest","flagCountRow","setFlagCoutnRow","hendlerInputOpen","hendlerChangeCountRow","event","preventDefault","target","value","hendlerInputSave","hendlerOpenPagesTable","num","hendlerChangeButtonConsole","hendlerAddCompareData","hendlerOpenCompareWindow","linkCompare","hendlerSearchBase","numRowOnPage","map","obj","index","i","numList","undefined","tablebody","document","querySelector","children","style","background","focus","stateConsoleButton","text","icon","onclick","link","linkBase","linkEditWindow","linkWindowConfirmDeleting","oncontextmenu","defaultPrevented","tagName","SearchBaseName","getElementById","onscroll","aboutDescription","Object","keys","length","numButton"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AAEA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,OAAOC,SAAP,MAAsB,6CAAtB;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AACA,OAAOC,iBAAP,MAA8B,sDAA9B;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AAEA,SACQC,gCADR,EAEQC,aAFR,EAGQC,eAHR,EAIQC,cAJR,QAKQ,mDALR;AAOA,SACQC,mBADR,EAEQC,oBAFR,EAGQC,gBAHR,EAIQC,mBAJR,EAKQC,oCALR,QAMO,yDANP;AAQA,SAASC,cAAT,QAA+B,4CAA/B;AAEA,SAASC,wBAAT,QAAyC,0CAAzC;AAEA,SAASC,qBAAT,QAAsC,yDAAtC;AAEA,SAASC,iBAAT,QAAkC,2DAAlC;AAEA,SAASC,eAAT,QAAgC,0BAAhC;;AAIA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAGxB,QAAMC,QAAQ,GAAGvB,WAAW,EAA5B;AAEA,QAAMwB,YAAY,GAAGvB,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACC,qBAAN,CAA4BC,OAAtC,CAAhC;AAEA,QAAMC,UAAU,GAAG3B,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACI,qBAAhB,CAA9B,CAPwB,CAO8C;;AAEtE,QAAMC,SAAS,GAAG7B,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACC,qBAAN,CAA4BK,aAAtC,CAA7B,CATwB,CAS2D;;AAEnF,QAAMC,YAAY,GAAG/B,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACC,qBAAN,CAA4BO,iBAAtC,CAAhC,CAXwB,CAWkE;;AAE1F,QAAMC,mBAAmB,GAAGjC,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACC,qBAAN,CAA4BS,8BAAtC,CAAvC,CAbwB,CAasF;;AAE9G,QAAMC,QAAQ,GAAGnC,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACC,qBAAN,CAA4BW,aAAtC,CAA5B,CAfwB,CAe0D;;AAElF,QAAMC,UAAU,GAAGrC,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACC,qBAAN,CAA4BY,UAAtC,CAA9B,CAjBwB,CAiByD;;AAEjF,QAAMC,SAAS,GAAGtC,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACe,qBAAN,CAA4BC,SAAtC,CAA7B,CAnBwB,CAmBuD;;AAE/E,QAAMC,UAAU,GAAGzC,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACkB,sBAAhB,CAA9B,CArBwB,CAqB+C;;AAEvE,QAAMC,KAAK,GAAG3C,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACoB,qBAAhB,CAAzB,CAvBwB,CAuByC;;AAEjE,QAAMC,qBAAqB,GAAG7C,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACsB,aAAN,CAAoBC,oBAA9B,CAAzC,CAzBwB,CAyBqE;;AAE7F,QAAMC,cAAc,GAAGhD,WAAW,CAACwB,KAAK,IAAIA,KAAK,CAACyB,gBAAhB,CAAlC,CA3BwB,CA2B6C;;AAErE,QAAMC,SAAS,GAAG,MAAM;AACpBlC,IAAAA,wBAAwB;AACxBM,IAAAA,QAAQ,CAACf,aAAa,CAAC;AACC4C,MAAAA,GAAG,EAAE,EADN;AAECC,MAAAA,IAAI,EAAE,EAFP;AAGCC,MAAAA,SAAS,EAAE,KAHZ;AAICC,MAAAA,UAAU,EAAE;AAJb,KAAD,CAAd,CAAR;AAMH,GARD,CA7BwB,CAuCxB;;;AACA,QAAM,CAACC,yBAAD,EAA4BC,4BAA5B,IAA4D3D,QAAQ,CAAC;AACC4D,IAAAA,IAAI,EAAE,KADP;AAECC,IAAAA,OAAO,EAAE,EAFV;AAGCC,IAAAA,OAAO,EAAE;AAHV,GAAD,CAA1E;;AAKA,QAAMC,iBAAiB,GAAG,CAACC,UAAD,EAAaC,WAAb,KAA6B;AACnDxC,IAAAA,QAAQ,CAACd,eAAe,CAACsD,WAAD,CAAhB,CAAR;AACAxC,IAAAA,QAAQ,CAACb,cAAc,CAACoD,UAAD,CAAf,CAAR;AACH,GAHD;;AAKA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCnE,QAAQ,CAAC,KAAD,CAAhD,CAlDwB,CAkDkC;;AAE1D,QAAMoE,gBAAgB,GAAG,MAAM;AAC3BD,IAAAA,eAAe,CAAC,IAAD,CAAf;AACH,GAFD;;AAGA,QAAME,qBAAqB,GAAIC,KAAD,IAAW;AACjCA,IAAAA,KAAK,CAACC,cAAN;AACA9C,IAAAA,QAAQ,CAACZ,mBAAmB,CAACyD,KAAK,CAACE,MAAN,CAAaC,KAAd,CAApB,CAAR;AACAhD,IAAAA,QAAQ,CAACV,gBAAgB,CAAC,CAAD,CAAjB,CAAR,CAHiC,CAGF;;AAC/B,QAAIyB,UAAU,IAAI,CAAlB,EAAqB;AACXa,MAAAA,SAAS,GADE,CACG;AACjB;;AAAA;AACd,GAPD;;AAQA,QAAMqB,gBAAgB,GAAG,MAAM;AAC3BP,IAAAA,eAAe,CAAC,KAAD,CAAf;AACA1C,IAAAA,QAAQ,CAACX,oBAAoB,CAACgB,UAAD,EAAaQ,QAAb,CAArB,CAAR;AACAb,IAAAA,QAAQ,CAACT,mBAAmB,CAACc,UAAD,EAAaQ,QAAb,EAAuBE,UAAvB,CAApB,CAAR;AACH,GAJD,CA/DwB,CAqExB;;;AACA,QAAMmC,qBAAqB,GAAIC,GAAD,IAAS;AAEnCnD,IAAAA,QAAQ,CAACT,mBAAmB,CAACc,UAAD,EAAaQ,QAAb,EAAuBsC,GAAvB,CAApB,CAAR;AACAnD,IAAAA,QAAQ,CAACV,gBAAgB,CAAC6D,GAAD,CAAjB,CAAR;AACAvB,IAAAA,SAAS,GAJ0B,CAItB;;AACb5B,IAAAA,QAAQ,CAACR,oCAAoC,CAAC2D,GAAD,EAAM1C,YAAN,CAArC,CAAR,CALmC,CAKgC;AACtE,GAND;;AAOA,QAAM2C,0BAA0B,GAAID,GAAD,IAAS;AACxCnD,IAAAA,QAAQ,CAACR,oCAAoC,CAAC2D,GAAD,EAAM1C,YAAN,EAAoBE,mBAApB,CAArC,CAAR,CADwC,CACgD;AAC3F,GAFD;;AAIA,QAAM0C,qBAAqB,GAAG,MAAM;AAChCrD,IAAAA,QAAQ,CAACJ,iBAAiB,CAACoB,SAAD,EAAYG,UAAZ,CAAlB,CAAR;AACH,GAFD;;AAIA,QAAMmC,wBAAwB,GAAG,MAAM;AACnCtD,IAAAA,QAAQ,CAACJ,iBAAiB,CAACoB,SAAD,EAAYG,UAAZ,CAAlB,CAAR,CADmC,CACiB;;AACpDS,IAAAA,SAAS;AACT5B,IAAAA,QAAQ,CAACL,qBAAqB,CAAC0B,KAAK,CAACkC,WAAP,CAAtB,CAAR;AACH,GAJD;;AAMA,QAAMC,iBAAiB,GAAIX,KAAD,IAAW;AACjCA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAID,KAAK,CAACE,MAAN,CAAaC,KAAb,IAAsB,EAA1B,EAA8B;AAAE;AAAQ;;AAAA,KAFP,CAES;;AAE1C,QAAIG,GAAJ,CAJiC,CAIxB;;AACT,QAAIM,YAAJ,CALiC,CAKf;;AAElBpD,IAAAA,UAAU,CAACqD,GAAX,CAAe,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAE3B,UAAID,GAAG,CAAC7B,IAAJ,IAAYe,KAAK,CAACE,MAAN,CAAaC,KAA7B,EAAoC;AAChCG,QAAAA,GAAG,GAAGS,KAAK,GAAG,CAAd;AACAH,QAAAA,YAAY,GAAGG,KAAK,GAAE,CAAtB;AACA5D,QAAAA,QAAQ,CAACf,aAAa,CAAC0E,GAAD,CAAd,CAAR,CAHgC,CAGF;AACjC;AACJ,KAPD,EAPiC,CAe7B;;AACA,QAAIE,CAAC,GAAGhD,QAAR;AACA,QAAIiD,OAAO,GAAG,CAAd;;AACA,QAAIX,GAAG,IAAIY,SAAX,EAAsB;AAAE;AAAQ;;AAAA,KAlBH,CAkBK;;AAElC,WAAOF,CAAC,GAAGV,GAAX,EAAgB;AACZU,MAAAA,CAAC,GAAGA,CAAC,GAAGhD,QAAR;AACA4C,MAAAA,YAAY,GAAGA,YAAY,GAAG5C,QAA9B;AACAiD,MAAAA,OAAO;AACd;;AAED9D,IAAAA,QAAQ,CAACV,gBAAgB,CAACwE,OAAD,CAAjB,CAAR,CA1BiC,CA0BI;;AACrC9D,IAAAA,QAAQ,CAACT,mBAAmB,CAACc,UAAD,EAAaQ,QAAb,EAAuBiD,OAAvB,CAApB,CAAR,CA3BiC,CA2B4B;;AAE7DpE,IAAAA,wBAAwB;AAExB,QAAIsE,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAhB;AACAF,IAAAA,SAAS,CAACG,QAAV,CAAmBV,YAAY,GAAG,CAAlC,EAAqCW,KAArC,CAA2CC,UAA3C,GAAwDxE,eAAxD,CAhCiC,CAgCwC;;AACzEmE,IAAAA,SAAS,CAACG,QAAV,CAAmBV,YAAY,GAAG,CAAlC,EAAqCU,QAArC,CAA8C,CAA9C,EAAiDG,KAAjD;AACH,GAlCD;;AAqCD,QAAMC,kBAAkB,GAAG,CACtB;AACIC,IAAAA,IAAI,EAAE,UADV;AAEI1C,IAAAA,IAAI,EAAE,QAFV;AAGI2C,IAAAA,IAAI,EAAE,sBAHV;AAIIC,IAAAA,OAAO,EAAE,MAAM;AAAE1E,MAAAA,QAAQ,CAAChB,gCAAgC,EAAjC,CAAR;AAA8C,KAJnE;AAKI2F,IAAAA,IAAI,EAAEtD,KAAK,CAACuD;AALhB,GADsB,EAQtB;AACIJ,IAAAA,IAAI,EAAE,uBADV;AAEI1C,IAAAA,IAAI,EAAE,KAFV;AAGI2C,IAAAA,IAAI,EAAE,kBAHV;AAIIC,IAAAA,OAAO,EAAE,MAAMpC,iBAAiB,CAAC,cAAD,EAAiB,MAAjB,CAJpC;AAKIqC,IAAAA,IAAI,EAAEtD,KAAK,CAACwD;AALhB,GARsB,EAetB;AACIL,IAAAA,IAAI,EAAE,kBADV;AAEI1C,IAAAA,IAAI,EAAE,MAFV;AAGI2C,IAAAA,IAAI,EAAE,6BAHV;AAIIC,IAAAA,OAAO,EAAE,MAAMpC,iBAAiB,CAAC,kBAAD,EAAqB,KAArB,CAJpC;AAKIqC,IAAAA,IAAI,EAAEtD,KAAK,CAACwD;AALhB,GAfsB,EAsBtB;AACIL,IAAAA,IAAI,EAAE,SADV;AAEI1C,IAAAA,IAAI,EAAE,QAFV;AAGI2C,IAAAA,IAAI,EAAE,mBAHV;AAIIC,IAAAA,OAAO,EAAE,MAAM,CAAG,CAJtB;AAKIC,IAAAA,IAAI,EAAEtD,KAAK,CAACyD;AALhB,GAtBsB,EA6BtB;AACIN,IAAAA,IAAI,EAAE,UADV;AAEI1C,IAAAA,IAAI,EAAE,SAFV;AAGI2C,IAAAA,IAAI,EAAE,qBAHV;AAIIC,IAAAA,OAAO,EAAEpB,wBAJb;AAKIqB,IAAAA,IAAI,EAAEtD,KAAK,CAACkC;AALhB,GA7BsB,EAoCtB;AACIiB,IAAAA,IAAI,EAAE,sBADV;AAEI1C,IAAAA,IAAI,EAAE,YAFV;AAGI2C,IAAAA,IAAI,EAAE,oBAHV;AAIIC,IAAAA,OAAO,EAAE,MAAMrB,qBAAqB,EAJxC;AAKIsB,IAAAA,IAAI,EAAEtD,KAAK,CAACuD;AALhB,GApCsB,CAA3B;AA6CFtG,EAAAA,SAAS,CAAC,MAAM;AACZ0B,IAAAA,QAAQ,CAAChB,gCAAgC,EAAjC,CAAR;;AAEAiF,IAAAA,QAAQ,CAACc,aAAT,GAAyB,UAAUlC,KAAV,EAAiB;AACtC,UAAIA,KAAK,CAACmC,gBAAV,EAA4B;AAC5BnC,MAAAA,KAAK,CAACC,cAAN;;AACA,UAAID,KAAK,CAACE,MAAN,CAAakC,OAAb,IAAwB,IAA5B,EAAkC;AAC9B/C,QAAAA,4BAA4B,CAAC;AACzBC,UAAAA,IAAI,EAAE,IADmB;AAEzBC,UAAAA,OAAO,EAAES,KAAK,CAACT,OAFU;AAGzBC,UAAAA,OAAO,EAAEQ,KAAK,CAACR;AAHU,SAAD,CAA5B;AAKH;;AAAA;AAEJ,KAXD;;AAaA,UAAM6C,cAAc,GAAGjB,QAAQ,CAACkB,cAAT,CAAwB,gBAAxB,CAAvB;;AACAlB,IAAAA,QAAQ,CAACS,OAAT,GAAmB,UAAU7B,KAAV,EAAiB;AAChCA,MAAAA,KAAK,CAACC,cAAN;AACAZ,MAAAA,4BAA4B,CAAC;AACzBC,QAAAA,IAAI,EAAE,KADmB;AAEzBC,QAAAA,OAAO,EAAE,EAFgB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAAD,CAA5B;;AAKA,UAAIQ,KAAK,CAACE,MAAN,CAAakC,OAAb,IAAwB,OAA5B,EAAqC;AAEjCC,QAAAA,cAAc,CAAClC,KAAf,GAAuB,EAAvB;AACH;AACJ,KAXD;;AAYAiB,IAAAA,QAAQ,CAACmB,QAAT,GAAoB,YAAY;AAC5BlD,MAAAA,4BAA4B,CAAC;AACzBC,QAAAA,IAAI,EAAE,KADmB;AAEzBC,QAAAA,OAAO,EAAE,EAFgB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAAD,CAA5B;AAKH,KAND,CA7BY,CAqCZ;;;AACA,QAAId,qBAAqB,IAAI,IAA7B,EAAmC;AAC/B,UAAI8D,gBAAgB,GAAG,EAAvB;AACAd,MAAAA,kBAAkB,CAACb,GAAnB,CAAwBC,GAAD,IAAS;AAC5B0B,QAAAA,gBAAgB,CAAC1B,GAAG,CAAC7B,IAAL,CAAhB,GAA6B,CAAC6B,GAAG,CAACa,IAAL,CAA7B;AACH,OAFD;AAGAxE,MAAAA,QAAQ,CAACP,cAAc,CAAC4F,gBAAD,EAAmB3D,cAAnB,CAAf,CAAR;AACH;;AAAA;AAED,GA9CK,EA8CH,EA9CG,CAAT;AAkDG,sBACI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEQ;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AACQ,IAAA,gBAAgB,EAAC,2BADzB;AAEQ,IAAA,kBAAkB,EAAE6C,kBAF5B;AAGQ,IAAA,oBAAoB,EAAC,mBAH7B;AAIQ,IAAA,QAAQ,EAAC,IAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAQI,oBAAC,gBAAD;AACQ,IAAA,SAAS,EAAC,0BADlB;AAEQ,IAAA,UAAU,EAAC,0NAFnB;AAGQ,IAAA,QAAQ,EAAElE,UAHlB;AAIQ,IAAA,cAAc,EAAGwC,KAAD,IAAWW,iBAAiB,CAACX,KAAD,CAJpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,CAFR,EAmBQ5C,YAAY,gBACR,oBAAC,YAAD;AACI,IAAA,SAAS,EAAC,SADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADQ,gBAIN,oBAAC,SAAD;AACU,IAAA,SAAS,EAAC,4BADpB;AAEU,IAAA,wBAAwB,EAAC,iBAFnC;AAGU,IAAA,8BAA8B,EAAC,mBAHzC;AAIU,IAAA,UAAU,EAAEqF,MAAM,CAACC,IAAP,CAAYlF,UAAU,CAAC,CAAD,CAAtB,CAJtB;AAKU,IAAA,UAAU,EAAEA,UALtB;AAMU,IAAA,MAAM,EAAEA,UAAU,CAACmF,MAN7B;AAOU,IAAA,SAAS,EAAEjF,SAPrB;AASU,IAAA,gBAAgB,EAAEoC,gBAT5B;AAUU,IAAA,gBAAgB,EAAEM,gBAV5B;AAWU,IAAA,qBAAqB,EAAGwC,SAAD,IAAevC,qBAAqB,CAACuC,SAAD,CAXrE;AAYU,IAAA,0BAA0B,EAAErC,0BAZtC;AAaU,IAAA,YAAY,EAAEX,YAbxB;AAcU,IAAA,gBAAgB,EAAGI,KAAD,IAAWD,qBAAqB,CAACC,KAAD,CAd5D;AAeU,IAAA,QAAQ,EAAEhC,QAfpB;AAgBU,IAAA,YAAY,EAAEJ,YAhBxB;AAiBU,IAAA,mBAAmB,EAAEE,mBAjB/B;AAkBU,IAAA,QAAQ,EAAEK,SAAS,CAACa,GAlB9B;AAmBU,IAAA,eAAe,EAAEd,UAnB3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBd,EA8CYkB,yBAAyB,CAACE,IAA1B,gBACI,oBAAC,iBAAD;AACI,IAAA,kBAAkB,EAAEoC,kBADxB;AAEI,IAAA,SAAS,EAAC,mBAFd;AAGI,IAAA,OAAO,EAAEtC,yBAAyB,CAACG,OAHvC;AAII,IAAA,OAAO,EAAEH,yBAAyB,CAACI,OAJvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,GAOM,IArDlB,CADJ;AA4DH;;AAED,eAAe7D,OAAO,GAAGsB,WAAH,CAAtB","sourcesContent":["import React, { useEffect, useState} from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\r\nimport TableList from '../../components/Table/TableListEltypeClass';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\r\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\r\n\r\nimport {\r\n        startGetRequestServerEltypeClass,\r\n        saveDataStore,\r\n        saveTypeRequest,\r\n        saveNameWindow\r\n } from '../../store/EltypeClass/actions/actionEltypeClass';\r\n\r\nimport {\r\n        changeCountRowTable,\r\n        getCounterPagesTable,\r\n        changeNumberList,\r\n        getDataPageRowTable,\r\n        changeActivArrNumberPagesFooterTable\r\n} from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\n\r\nimport { addDescription } from \"../../store/Description/actionsDescription\";\r\n\r\nimport { tablebodyBackgroundClear } from '../../functions/tablebodyBackgroundClear';\r\n\r\nimport { changeAdressOpenTable } from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\r\n\r\nimport { addDataCompareArr } from '../../store/EltypeClass/actions/actionsCompareEltypeClass';\r\n\r\nimport { rowFocus_Coffee } from '../../styles/const_color';\r\n\r\n\r\n\r\nfunction EltypeClass(props) {\r\n\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\r\n\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\r\n\r\n    const dataTable = useSelector(state => state.stateFlagsEltypeClass.dataListTable); // отображаемый лист\r\n\r\n    const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // общее количество листов в таблице\r\n\r\n    const activArrNumberPages = useSelector(state => state.stateFlagsEltypeClass.activArrNumberPagesFooterTable); //предлагаемый на выбор массив из 3х кнопок в консоли переключения отображаемых листов таблицы\r\n\r\n    const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\r\n\r\n    const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\r\n\r\n    const focusData = useSelector(state => state.createDataEltypeClass.stateData); // фокус. запомнить данные выбранной строки\r\n\r\n    const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\r\n\r\n    const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\r\n\r\n    const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll) // разрешен ли пользователем показ подсказок\r\n\r\n    const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга)\r\n\r\n    const focusNull = () => {\r\n        tablebodyBackgroundClear();\r\n        dispatch(saveDataStore({\r\n                                uid: \"\",\r\n                                name: \"\",\r\n                                isDeleted: false,\r\n                                isTemplate: false\r\n                            }));\r\n    }\r\n\r\n    //правая кнопка мыши открывает контестное меню\r\n    const [flagOpenContextMenuWindow, setFlagOpenContextMenuWindow] = useState({\r\n                                                                                flag: false,\r\n                                                                                clientX: '',\r\n                                                                                clientY: ''\r\n                                                                            });\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n\r\n    const [flagCountRow, setFlagCoutnRow] = useState(false);  // флаг инпута в футере для изменения к-ва строк на листе\r\n\r\n    const hendlerInputOpen = () => {\r\n        setFlagCoutnRow(true);\r\n    }\r\n    const hendlerChangeCountRow = (event) => {\r\n            event.preventDefault();\r\n            dispatch(changeCountRowTable(event.target.value));\r\n            dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\r\n            if (numberList != 1) {\r\n                      focusNull();  // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные\r\n                  };\r\n    }\r\n    const hendlerInputSave = () => {\r\n        setFlagCoutnRow(false);\r\n        dispatch(getCounterPagesTable(stateTable, countRow));\r\n        dispatch(getDataPageRowTable(stateTable, countRow, numberList));\r\n    }\r\n\r\n    //после выбора страницы приходит ее номер, в хранилище собираем новую страницу, в хранилище сохраняем номер страницы\r\n    const hendlerOpenPagesTable = (num) => {\r\n\r\n        dispatch(getDataPageRowTable(stateTable, countRow, num));\r\n        dispatch(changeNumberList(num));\r\n        focusNull(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\r\n        dispatch(changeActivArrNumberPagesFooterTable(num, counterPages)); //измениям консоль выбора активной страницы в футере\r\n    }\r\n    const hendlerChangeButtonConsole = (num) => {\r\n        dispatch(changeActivArrNumberPagesFooterTable(num, counterPages, activArrNumberPages)); //переключение стрелками консоли выбора активной страницы в футере\r\n    }\r\n\r\n    const hendlerAddCompareData = () => {\r\n        dispatch(addDataCompareArr(focusData, compareArr));\r\n    }\r\n\r\n    const hendlerOpenCompareWindow = () => {\r\n        dispatch(addDataCompareArr(focusData, compareArr)); //добавить выделенную строку в сравнение\r\n        focusNull();\r\n        dispatch(changeAdressOpenTable(links.linkCompare));\r\n    }\r\n\r\n    const hendlerSearchBase = (event) => {\r\n        event.preventDefault();\r\n        if (event.target.value == '') { return }; //если пусто, выходим\r\n\r\n        let num; // номер выбранного объекта в массиве\r\n        let numRowOnPage; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\r\n    \r\n        stateTable.map((obj, index) => {\r\n\r\n            if (obj.name == event.target.value) {\r\n                num = index + 1;\r\n                numRowOnPage = index +1;\r\n                dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\r\n            }\r\n        });\r\n            //поиск номера страницы\r\n            let i = countRow;\r\n            let numList = 1;\r\n            if (num == undefined) { return }; //если пусто, выходим\r\n\r\n            while (i < num) {\r\n                i = i + countRow;\r\n                numRowOnPage = numRowOnPage - countRow;\r\n                numList++;\r\n        }\r\n\r\n        dispatch(changeNumberList(numList)); //сохраняем номер\r\n        dispatch(getDataPageRowTable(stateTable, countRow, numList));// загружаем выбранный лист\r\n\r\n        tablebodyBackgroundClear();\r\n\r\n        let tablebody = document.querySelector('tbody');\r\n        tablebody.children[numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\r\n        tablebody.children[numRowOnPage - 1].children[1].focus();\r\n    }\r\n\r\n\r\n   const stateConsoleButton = [\r\n        {\r\n            text: \"Обновить\",\r\n            name: 'update',\r\n            icon: \"fa fa-download fa-lg\",\r\n            onclick: () => { dispatch(startGetRequestServerEltypeClass()) },\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Добавить новые данные\",\r\n            name: 'add',\r\n            icon: \"fa fa-plus fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Внести изменения\",\r\n            name: 'edit',\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Удалить\",\r\n            name: 'delete',\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Сравнить\",\r\n            name: 'compare',\r\n            icon: \"fa fa-balance-scale\",\r\n            onclick: hendlerOpenCompareWindow,\r\n            link: links.linkCompare\r\n        },\r\n        {\r\n            text: \"Добавить к сравнению\",\r\n            name: 'addCompare',\r\n            icon: \"fa fa-filter fa-lg\",\r\n            onclick: () => hendlerAddCompareData(),\r\n            link: links.linkBase\r\n        }\r\n    ];  \r\n\r\n useEffect(() => {\r\n     dispatch(startGetRequestServerEltypeClass());\r\n\r\n     document.oncontextmenu = function (event) {\r\n         if (event.defaultPrevented) return;\r\n         event.preventDefault();\r\n         if (event.target.tagName == 'TD') {\r\n             setFlagOpenContextMenuWindow({\r\n                 flag: true,\r\n                 clientX: event.clientX,\r\n                 clientY: event.clientY\r\n             });\r\n         };\r\n\r\n     };\r\n\r\n     const SearchBaseName = document.getElementById('SearchBaseName');\r\n     document.onclick = function (event) {\r\n         event.preventDefault();\r\n         setFlagOpenContextMenuWindow({\r\n             flag: false,\r\n             clientX: '',\r\n             clientY: ''\r\n         });\r\n         if (event.target.tagName != \"INPUT\") {\r\n\r\n             SearchBaseName.value = '';\r\n         }\r\n     };\r\n     document.onscroll = function () {\r\n         setFlagOpenContextMenuWindow({\r\n             flag: false,\r\n             clientX: '',\r\n             clientY: ''\r\n         });\r\n     };\r\n\r\n     //добавляем подсказки на кнопки консоли\r\n     if (flagEmployDescription == true) {\r\n         let aboutDescription = {};\r\n         stateConsoleButton.map((obj) => {\r\n             aboutDescription[obj.name] = [obj.text];\r\n         });\r\n         dispatch(addDescription(aboutDescription, arrDescription));\r\n     };\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"DataBase__container\">\r\n \r\n                <div className=\"DataBase__header__container\">\r\n                    <ConsoleButton\r\n                            classnameWrapper=\"DataBase__header__console\"\r\n                            stateConsoleButton={stateConsoleButton}\r\n                            classnameDescription='DescriptionButton'\r\n                            tabindex=\"-1\"\r\n                            />\r\n\r\n                    <HeaderDictionary\r\n                            classname=\"DataBase__header__header\"\r\n                            nameHeader=\"Классы для Типов связей и Типов сущностей\"\r\n                            dataBase={stateTable}\r\n                            onchangeSearch={(event) => hendlerSearchBase(event)}\r\n\r\n                        />\r\n                </div>\r\n            {\r\n                stateLoading ?\r\n                    <AwaitLoading\r\n                        classname=\"Loading\"\r\n                    />\r\n                    : <TableList\r\n                                classname=\"DataBase__table__container\"\r\n                                classnameConsoleCountRow='ConsoleCountRow'\r\n                                classnameButtonConsoleCountPow=\"PersonalizeButton\"\r\n                                columnName={Object.keys(stateTable[0])}\r\n                                stateTable={stateTable}\r\n                                length={stateTable.length}\r\n                                dataTable={dataTable}\r\n\r\n                                onclickInputOpen={hendlerInputOpen}\r\n                                onclickInputSave={hendlerInputSave}\r\n                                onclickOpenPagesTable={(numButton) => hendlerOpenPagesTable(numButton)}\r\n                                onclickChangeButtonConsole={hendlerChangeButtonConsole}\r\n                                flagCountRow={flagCountRow}\r\n                                onchangeCountRow={(event) => hendlerChangeCountRow(event)}\r\n                                CountRow={countRow}\r\n                                counterPages={counterPages}\r\n                                activArrNumberPages={activArrNumberPages}\r\n                                focusUid={focusData.uid}\r\n                                numberActivList={numberList}\r\n                        /> \r\n                }\r\n                {\r\n                    flagOpenContextMenuWindow.flag ?\r\n                        <ContextMenuWindow\r\n                            stateConsoleButton={stateConsoleButton}\r\n                            classname=\"ContextMenuWindow\"\r\n                            clientX={flagOpenContextMenuWindow.clientX}\r\n                            clientY={flagOpenContextMenuWindow.clientY}\r\n                        />\r\n                        : null\r\n                }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default connect()(EltypeClass)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}