{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\EltypeClass\\\\CompareEltypeClass.js\";\nimport React from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport BasisCompare from '../Basis/BasisCompare';\nimport { saveDataStore } from '../../store/BasisReport/actions/actionFocusData';\nimport { saveTypeRequest, saveNameWindow } from '../../store/EltypeClass/actions/actionEditWindowEltypeClass';\nimport { changeAdressOpenTable } from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\nimport { clearCompareArr, deleteDataCompareArr } from '../../store/EltypeClass/actions/actionsCompareEltypeClass';\nimport { changeFlagOpenCompareWindow } from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\n\nfunction CompareEltypeClass(props) {\n  const dispatch = useDispatch();\n  const compareArr = useSelector(state => state.stateCompareEltypeClass); // массив строк, избранных для сравнения\n\n  const sortСolumns = useSelector(state => state.stateInputEditWindowEltypeClass.sortСolumns); // объект с разрешением отображения сортировки в колонках в таблице\n\n  const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\n\n  const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\n\n  const flagOpenCompareWindow = useSelector(state => state.stateFlagsEltypeClass.flagOpenCompareWindow); // флаг открытия таблицы сравнения\n\n  const focusNull = () => {\n    dispatch(saveDataStore({\n      \"uid\": \"\",\n      \"name\": \"\",\n      \"isDeleted\": false,\n      \"isTemplate\": false\n    }));\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const hendlerClearCompareArr = () => {\n    dispatch(clearCompareArr());\n    dispatch(changeFlagOpenCompareWindow(false)); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase));\n  };\n\n  const hendlerDeleteContext = () => {\n    dispatch(deleteDataCompareArr(focusData, compareArr)); // удалить из массива сравнений\n    //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\n\n    focusNull();\n  };\n\n  const hendlerButtonRowClickDeleteCompareData = data => {\n    if ([data].uid === '' || [data] === null || [data] === undefined) {\n      return;\n    }\n\n    ;\n    dispatch(deleteDataCompareArr(data, compareArr));\n  };\n\n  const hendlerCloseWindow = () => {\n    dispatch(changeFlagOpenCompareWindow(false)); //закрываем окно и поэтому обнуляем хранение фокуса:\n\n    focusNull(); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase));\n  };\n\n  const stateConsoleButton = [{\n    text: \"Внести изменения\",\n    name: 'edit',\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить из базы данных\",\n    name: 'delete',\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Убрать из сравнения\",\n    name: 'deleteList',\n    icon: \"fa fa-times-circle\",\n    onclick: hendlerDeleteContext,\n    data: focusData,\n    link: links.linkCompare\n  }, {\n    text: \"Очистить список сравнений\",\n    name: 'clear',\n    icon: \"fa fa-minus-square-o\",\n    onclick: hendlerClearCompareArr,\n    link: links.linkBase\n  }, {\n    text: \"Назад\",\n    name: 'back',\n    icon: \"fa fa-share\",\n    onclick: hendlerCloseWindow,\n    link: links.linkBase\n  }];\n  return /*#__PURE__*/React.createElement(BasisCompare, {\n    compareArr: compareArr,\n    stateConsoleButton: stateConsoleButton,\n    flagOpenCompareWindow: flagOpenCompareWindow,\n    sortСolumns: sortСolumns,\n    focusNull: focusNull,\n    hendlerButtonRowClickDeleteCompareData: hendlerButtonRowClickDeleteCompareData,\n    hendlerCloseWindow: hendlerCloseWindow,\n    linkBack: links.linkBase,\n    nameBase: \"\\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    nameHeader: \"\\u0421\\u0440\\u0430\\u0432\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u0431\\u0440\\u0430\\u043D\\u043D\\u043E\\u0435\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default connect()(CompareEltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/EltypeClass/CompareEltypeClass.js"],"names":["React","connect","useDispatch","useSelector","BasisCompare","saveDataStore","saveTypeRequest","saveNameWindow","changeAdressOpenTable","clearCompareArr","deleteDataCompareArr","changeFlagOpenCompareWindow","CompareEltypeClass","props","dispatch","compareArr","state","stateCompareEltypeClass","sortСolumns","stateInputEditWindowEltypeClass","focusData","links","stateLinksEltypeClass","flagOpenCompareWindow","stateFlagsEltypeClass","focusNull","hendlerOpenWindow","nameWindow","typeRequest","hendlerClearCompareArr","linkBase","hendlerDeleteContext","hendlerButtonRowClickDeleteCompareData","data","uid","undefined","hendlerCloseWindow","stateConsoleButton","text","name","icon","onclick","link","linkEditWindow","linkWindowConfirmDeleting","linkCompare"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport BasisCompare from '../Basis/BasisCompare';\r\n\r\nimport {\r\n    saveDataStore\r\n} from '../../store/BasisReport/actions/actionFocusData';\r\nimport {\r\n    saveTypeRequest,\r\n    saveNameWindow\r\n} from '../../store/EltypeClass/actions/actionEditWindowEltypeClass';\r\nimport {\r\n    changeAdressOpenTable\r\n} from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\r\nimport {\r\n    clearCompareArr,\r\n    deleteDataCompareArr\r\n} from '../../store/EltypeClass/actions/actionsCompareEltypeClass';\r\nimport {\r\n    changeFlagOpenCompareWindow\r\n} from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\n\r\n\r\n\r\nfunction CompareEltypeClass(props) {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const compareArr = useSelector(state => state.stateCompareEltypeClass); // массив строк, избранных для сравнения\r\n\r\n    const sortСolumns = useSelector(state => state.stateInputEditWindowEltypeClass.sortСolumns); // объект с разрешением отображения сортировки в колонках в таблице\r\n\r\n    const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\r\n\r\n    const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\r\n\r\n    const flagOpenCompareWindow = useSelector(state => state.stateFlagsEltypeClass.flagOpenCompareWindow); // флаг открытия таблицы сравнения\r\n\r\n\r\n    const focusNull = () => {\r\n        dispatch(saveDataStore({\r\n            \"uid\": \"\",\r\n            \"name\": \"\",\r\n            \"isDeleted\": false,\r\n            \"isTemplate\": false\r\n        }));\r\n    }\r\n\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n\r\n    const hendlerClearCompareArr = () => {\r\n        dispatch(clearCompareArr());\r\n        dispatch(changeFlagOpenCompareWindow(false));\r\n        // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n        dispatch(changeAdressOpenTable(links.linkBase));\r\n    }\r\n    \r\n    const hendlerDeleteContext = () => {\r\n        dispatch(deleteDataCompareArr(focusData, compareArr)); // удалить из массива сравнений\r\n        //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\r\n        focusNull();\r\n    }\r\n    const hendlerButtonRowClickDeleteCompareData = (data) => {\r\n        if ([data].uid === '' || [data] === null || [data] === undefined) {\r\n            return\r\n        };\r\n        dispatch(deleteDataCompareArr(data, compareArr));\r\n    }\r\n\r\n    const hendlerCloseWindow = () => {\r\n            dispatch(changeFlagOpenCompareWindow(false));\r\n            //закрываем окно и поэтому обнуляем хранение фокуса:\r\n            focusNull();\r\n            // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n            dispatch(changeAdressOpenTable(links.linkBase));\r\n    }\r\n\r\n\r\n    const stateConsoleButton = [\r\n\r\n        {\r\n            text: \"Внести изменения\",\r\n            name: 'edit',\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Удалить из базы данных\",\r\n            name: 'delete',\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Убрать из сравнения\",\r\n            name: 'deleteList',\r\n            icon: \"fa fa-times-circle\",\r\n            onclick: hendlerDeleteContext,\r\n            data: focusData,\r\n            link: links.linkCompare\r\n        },\r\n        {\r\n            text: \"Очистить список сравнений\",\r\n            name: 'clear',\r\n            icon: \"fa fa-minus-square-o\",\r\n            onclick: hendlerClearCompareArr,\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Назад\",\r\n            name: 'back',\r\n            icon: \"fa fa-share\",\r\n            onclick: hendlerCloseWindow,\r\n            link: links.linkBase\r\n        }\r\n    ];\r\n\r\n\r\n    return (\r\n        <BasisCompare\r\n            compareArr={compareArr}\r\n            stateConsoleButton={stateConsoleButton}\r\n            flagOpenCompareWindow={flagOpenCompareWindow}\r\n            sortСolumns={sortСolumns}\r\n            focusNull={focusNull}\r\n            hendlerButtonRowClickDeleteCompareData={hendlerButtonRowClickDeleteCompareData}\r\n            hendlerCloseWindow={hendlerCloseWindow}\r\n            linkBack={links.linkBase}\r\n            nameBase=\"Классы для Типов связей и Типов сущностей\"\r\n            nameHeader=\"Сравнить избранное\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default connect()(CompareEltypeClass)"]},"metadata":{},"sourceType":"module"}