{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\EltypeClass.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\nimport TableList from '../../components/Table/TableList';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport ContEditWindow from '../EditWindow/ContEditWindow';\nimport { startGetRequestServer } from '../../store/EltypeClasse/actions/actionEltypeClasse';\nimport { saveDataStore } from '../../store/windowCreateNewData/actions/actionWindowCreateNewData';\n\nfunction EltypeClass(props) {\n  const dispatch = useDispatch();\n  /* после загрузки GET запрос на сервер и перерисовка таблицы */\n\n  useEffect(() => {\n    dispatch(startGetRequestServer());\n  }, []);\n  /*для заполнения таблицы */\n\n  const stateTable = useSelector(state => state.stateTable_EltypeClass);\n  /*для заполнения всплывающего окна */\n\n  const currentStateData = useSelector(state => state.WindowCreateNewData.stateData);\n  const [flag, setFlag] = useState(false);\n  const [typeRequest, setTypeRequest] = useState(null);\n\n  const windowOpen = () => {\n    setFlag(!flag);\n  };\n  /*определение по какой строке таблицы был клик */\n\n\n  const handlerTableRowUID = (event, data) => {\n    event.preventDefault();\n    stateTable.map((obj, index) => {\n      if (obj.uid === data) {\n        console.log(\"index \", index);\n        dispatch(saveDataStore(obj));\n      }\n    });\n  };\n\n  const openWindowAddData = () => {\n    setTypeRequest('post');\n    windowOpen();\n  };\n\n  const openWindowUpdateData = () => {\n    setTypeRequest('put');\n    windowOpen();\n  };\n  /*заглушка на кнопку*/\n\n\n  const handlerClick = () => {\n    console.log('click');\n  };\n\n  const handlerWindowClose = () => {\n    windowOpen();\n    let nullState = {};\n    Object.keys(currentStateData).map(key => nullState[key] = '');\n    dispatch(saveDataStore({ ...nullState\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classname: \"\",\n    nameHeader: \"\\u0412\\u044B\\u0432\\u043E\\u0434 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 Eltype Classe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ConsoleButton, {\n    classname: \"\",\n    name1: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C\",\n    title1: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C\",\n    onclick1: () => {\n      dispatch(startGetRequestServer());\n    },\n    name2: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\",\n    title2: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\",\n    onclick2: openWindowAddData,\n    name3: \"\\u0412\\u043D\\u0435\\u0441\\u0442\\u0438 \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\",\n    title3: \"\\u0412\\u043D\\u0435\\u0441\\u0442\\u0438 \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\",\n    onclick3: openWindowUpdateData,\n    name4: \"\\u0422\\u043E\\u043B\\u044C\\u043A\\u043E \\u0430\\u043A\\u0442\\u0438\\u0432\\u043D\\u044B\\u0435\",\n    title4: \"\\u0422\\u043E\\u043B\\u044C\\u043A\\u043E \\u0430\\u043A\\u0442\\u0438\\u0432\\u043D\\u044B\\u0435\",\n    onclick4: handlerClick,\n    name5: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\",\n    title5: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\",\n    onclick5: handlerClick,\n    type: \"button\",\n    tabindex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TableList, {\n    columnName: Object.keys(stateTable[0]),\n    dataTable: stateTable,\n    onclick: (event, data) => handlerTableRowUID(event, data),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), flag ? /*#__PURE__*/React.createElement(ContEditWindow, {\n    typeRequestServer: typeRequest,\n    handlerClose: handlerWindowClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }) : null);\n}\n\nexport default connect()(EltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/EltypeClass.js"],"names":["React","useState","useEffect","connect","useDispatch","useSelector","ConsoleButton","TableList","HeaderDictionary","ContEditWindow","startGetRequestServer","saveDataStore","EltypeClass","props","dispatch","stateTable","state","stateTable_EltypeClass","currentStateData","WindowCreateNewData","stateData","flag","setFlag","typeRequest","setTypeRequest","windowOpen","handlerTableRowUID","event","data","preventDefault","map","obj","index","uid","console","log","openWindowAddData","openWindowUpdateData","handlerClick","handlerWindowClose","nullState","Object","keys","key"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AAEA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAEA,SAASC,qBAAT,QAAsC,qDAAtC;AACA,SAAQC,aAAR,QAA4B,mEAA5B;;AAEA,SAASC,WAAT,CAAsBC,KAAtB,EAA4B;AAExB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AAEA;;AACAF,EAAAA,SAAS,CAAE,MAAI;AACXY,IAAAA,QAAQ,CAACJ,qBAAqB,EAAtB,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA;;AACA,QAAMK,UAAU,GAAGV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,sBAAhB,CAA9B;AAEA;;AACA,QAAMC,gBAAgB,GAAGb,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACG,mBAAN,CAA0BC,SAApC,CAApC;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACsB,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,IAAD,CAA9C;;AAEA,QAAMwB,UAAU,GAAG,MAAI;AACnBH,IAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AACH,GAFD;AAIA;;;AACA,QAAMK,kBAAkB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAe;AACtCD,IAAAA,KAAK,CAACE,cAAN;AAEAd,IAAAA,UAAU,CAACe,GAAX,CAAgB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC5B,UAAID,GAAG,CAACE,GAAJ,KAAYL,IAAhB,EAAqB;AACjBM,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,KAAtB;AACAlB,QAAAA,QAAQ,CAACH,aAAa,CAACoB,GAAD,CAAd,CAAR;AACH;AACJ,KALD;AAMH,GATD;;AAUA,QAAMK,iBAAiB,GAAG,MAAI;AAC1BZ,IAAAA,cAAc,CAAC,MAAD,CAAd;AACAC,IAAAA,UAAU;AACb,GAHD;;AAIA,QAAMY,oBAAoB,GAAG,MAAI;AAC7Bb,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAC,IAAAA,UAAU;AACb,GAHD;AAIA;;;AACA,QAAMa,YAAY,GAAG,MAAI;AACrBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,GAFD;;AAGA,QAAMI,kBAAkB,GAAG,MAAI;AAC3Bd,IAAAA,UAAU;AACV,QAAIe,SAAS,GAAG,EAAhB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYxB,gBAAZ,EAA8BY,GAA9B,CAAmCa,GAAD,IAAQH,SAAS,CAACG,GAAD,CAAT,GAAiB,EAA3D;AACA7B,IAAAA,QAAQ,CAACH,aAAa,CAAC,EAAC,GAAG6B;AAAJ,KAAD,CAAd,CAAR;AACH,GALD;;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AACQ,IAAA,SAAS,EAAE,EADnB;AAEQ,IAAA,UAAU,EAAE,mFAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAMI,oBAAC,aAAD;AACQ,IAAA,SAAS,EAAG,EADpB;AAGQ,IAAA,KAAK,EAAG,kDAHhB;AAIQ,IAAA,MAAM,EAAG,kDAJjB;AAKQ,IAAA,QAAQ,EAAE,MAAM;AAAE1B,MAAAA,QAAQ,CAACJ,qBAAqB,EAAtB,CAAR;AAAkC,KAL5D;AAQQ,IAAA,KAAK,EAAG,kDARhB;AASQ,IAAA,MAAM,EAAG,kDATjB;AAUQ,IAAA,QAAQ,EAAI0B,iBAVpB;AAYQ,IAAA,KAAK,EAAG,6FAZhB;AAaQ,IAAA,MAAM,EAAG,6FAbjB;AAcQ,IAAA,QAAQ,EAAIC,oBAdpB;AAgBQ,IAAA,KAAK,EAAG,uFAhBhB;AAiBQ,IAAA,MAAM,EAAG,uFAjBjB;AAkBQ,IAAA,QAAQ,EAAIC,YAlBpB;AAoBQ,IAAA,KAAK,EAAG,4CApBhB;AAqBQ,IAAA,MAAM,EAAG,4CArBjB;AAsBQ,IAAA,QAAQ,EAAIA,YAtBpB;AAwBQ,IAAA,IAAI,EAAG,QAxBf;AAyBQ,IAAA,QAAQ,EAAG,IAzBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,eAmCI,oBAAC,SAAD;AACQ,IAAA,UAAU,EAAEG,MAAM,CAACC,IAAP,CAAY3B,UAAU,CAAC,CAAD,CAAtB,CADpB;AAEQ,IAAA,SAAS,EAAIA,UAFrB;AAGQ,IAAA,OAAO,EAAI,CAACY,KAAD,EAAQC,IAAR,KAAiBF,kBAAkB,CAACC,KAAD,EAAQC,IAAR,CAHtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnCJ,EA0CIP,IAAI,gBACJ,oBAAC,cAAD;AACQ,IAAA,iBAAiB,EAAIE,WAD7B;AAEQ,IAAA,YAAY,EAAIgB,kBAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADI,GAIH,IA9CL,CADJ;AAoDH;;AAED,eAAepC,OAAO,GAAGS,WAAH,CAAtB","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\r\nimport TableList from '../../components/Table/TableList';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport ContEditWindow from '../EditWindow/ContEditWindow'\r\n\r\nimport { startGetRequestServer } from '../../store/EltypeClasse/actions/actionEltypeClasse';\r\nimport {saveDataStore} from '../../store/windowCreateNewData/actions/actionWindowCreateNewData'\r\n\r\nfunction EltypeClass (props){\r\n    \r\n    const dispatch = useDispatch();\r\n    \r\n    /* после загрузки GET запрос на сервер и перерисовка таблицы */\r\n    useEffect( ()=>{\r\n        dispatch(startGetRequestServer());\r\n    }, [])\r\n    \r\n    /*для заполнения таблицы */\r\n    const stateTable = useSelector(state => state.stateTable_EltypeClass);\r\n    \r\n    /*для заполнения всплывающего окна */\r\n    const currentStateData = useSelector(state => state.WindowCreateNewData.stateData);\r\n  \r\n    const [flag, setFlag] = useState(false);\r\n    const [typeRequest, setTypeRequest] = useState(null);\r\n    \r\n    const windowOpen = ()=>{\r\n        setFlag(!flag);\r\n    }\r\n    \r\n    /*определение по какой строке таблицы был клик */\r\n    const handlerTableRowUID = (event, data)=>{\r\n        event.preventDefault();\r\n        \r\n        stateTable.map( (obj, index) => {\r\n            if (obj.uid === data){\r\n                console.log(\"index \", index);\r\n                dispatch(saveDataStore(obj));\r\n            }\r\n        })\r\n    }\r\n    const openWindowAddData = ()=>{\r\n        setTypeRequest('post');\r\n        windowOpen();\r\n    }\r\n    const openWindowUpdateData = ()=>{\r\n        setTypeRequest('put');\r\n        windowOpen();\r\n    }\r\n    /*заглушка на кнопку*/\r\n    const handlerClick = ()=>{\r\n        console.log('click');\r\n    }\r\n    const handlerWindowClose = ()=>{\r\n        windowOpen();\r\n        let nullState = {};\r\n        Object.keys(currentStateData).map((key)=> nullState[key] = '');\r\n        dispatch(saveDataStore({...nullState}));\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            <HeaderDictionary \r\n                    classname= \"\"\r\n                    nameHeader= \"Вывод данных Eltype Classe\"\r\n                 />\r\n        \r\n            <ConsoleButton\r\n                    classname = \"\"\r\n\r\n                    name1 = \"Обновить\"\r\n                    title1 = \"Обновить\"\r\n                    onclick1={() => { dispatch(startGetRequestServer())}}\r\n\r\n\r\n                    name2 = \"Добавить\"\r\n                    title2 = \"Добавить\"\r\n                    onclick2 = {openWindowAddData}\r\n\r\n                    name3 = \"Внести изменения\"\r\n                    title3 = \"Внести изменения\"\r\n                    onclick3 = {openWindowUpdateData}\r\n\r\n                    name4 = \"Только активные\"\r\n                    title4 = \"Только активные\"\r\n                    onclick4 = {handlerClick}\r\n\r\n                    name5 = \"Удалить\"\r\n                    title5 = \"Удалить\"\r\n                    onclick5 = {handlerClick}\r\n\r\n                    type = \"button\"\r\n                    tabindex = \"-1\"\r\n\r\n                />\r\n                    \r\n            <TableList \r\n                    columnName={Object.keys(stateTable[0])}\r\n                    dataTable = {stateTable}\r\n                    onclick = {(event, data) => handlerTableRowUID(event, data)}\r\n                />\r\n        \r\n        {\r\n            flag?\r\n            <ContEditWindow \r\n                    typeRequestServer = {typeRequest}\r\n                    handlerClose = {handlerWindowClose}/>\r\n            :null\r\n        \r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(EltypeClass)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}