{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\User\\\\CompareUser.js\";\nimport React, { useEffect } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport HeaderCompare from '../../components/Header/HeaderCompare';\nimport TableList from '../../components/Table/TableList';\nimport WarningCompare from '../../components/WarningWindow/WarningCompare';\nimport ContextMenuCompare from '../../components/ContextMenuWindow/ContextMenuCompare';\nimport { sortingCompareArr } from '../../store/User/actions/actionsCompareUser';\nimport { saveDataStore } from '../../store/BasisReport/actions/actionFocusData';\nimport { saveTypeRequest, saveNameWindow } from '../../store/User/actions/actionEditWindowUser';\nimport { changeAdressOpenTable } from '../../store/User/actions/actionsLinksUser';\nimport { clearCompareArr, deleteDataCompareArr } from '../../store/User/actions/actionsCompareUser';\nimport { changeFlagOpenCompareWindow } from '../../store/User/actions/actionsFlagsUser';\nimport { addDescription } from \"../../store/Description/actionsDescription\";\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\n\nfunction CompareUser(props) {\n  const dispatch = useDispatch();\n  const compareArr = useSelector(state => state.stateCompareUser); // массив строк, избранных для сравнения\n\n  const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\n\n  const links = useSelector(state => state.stateLinksUser); //список ссылок для переходов между окнами\n\n  const visibleNameСolumns = useSelector(state => state.stateInputEditWindowUser.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\n\n  const typeDataColumns = useSelector(state => state.stateInputEditWindowUser.typeData); // тип данных значений, заполняющих колонки\n\n  const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll); // разрешен ли пользователем показ подсказок\n\n  const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга)\n\n  const flagOpenCompareWindow = useSelector(state => state.stateFlagsUser.flagOpenCompareWindow); // флаг открытия таблицы сравнения\n  //переключение цветового решения приложения\n\n  const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\n  const staleSelect = useSelector(state => state.stateStyle.styleSelect);\n\n  const focusNull = () => {\n    dispatch(saveDataStore({\n      \"uid\": \"\",\n      \"login\": \"\",\n      \"name\": \"\",\n      \"password\": \"\",\n      \"isDeleted\": false,\n      \"isSuperUser\": false,\n      \"docInfo\": [],\n      \"projectAuthorU\": [],\n      \"projectUpdaterU\": [],\n      \"userProjects\": []\n    }));\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const hendlerClearCompareArr = () => {\n    dispatch(clearCompareArr());\n    dispatch(changeFlagOpenCompareWindow(false)); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase));\n  };\n\n  const hendlerDeleteContext = () => {\n    dispatch(deleteDataCompareArr(focusData, compareArr)); // удалить из массива сравнений\n    //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\n\n    focusNull();\n  };\n\n  const hendlerCloseWindow = () => {\n    dispatch(changeFlagOpenCompareWindow(false)); //закрываем окно и поэтому обнуляем хранение фокуса:\n\n    focusNull(); // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\n\n    dispatch(changeAdressOpenTable(links.linkBase));\n  };\n\n  const stateConsoleButton = [{\n    text: \"Внести изменения\",\n    name: 'edit',\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить из базы данных\",\n    name: 'delete',\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Убрать из сравнения\",\n    name: 'deleteList',\n    icon: \"fa fa-times-circle\",\n    onclick: hendlerDeleteContext,\n    data: focusData,\n    link: links.linkCompare\n  }, {\n    text: \"Очистить список сравнений\",\n    name: 'clear',\n    icon: \"fa fa-minus-square-o\",\n    onclick: hendlerClearCompareArr,\n    link: links.linkBase\n  }, {\n    text: \"Назад\",\n    name: 'back',\n    icon: \"fa fa-share\",\n    onclick: hendlerCloseWindow,\n    link: links.linkBase\n  }];\n\n  const haveDescription = dataStateConsoleButton => {\n    //добавляем подсказки на кнопки консоли\n    if (flagEmployDescription === true) {\n      let aboutDescription = {};\n      dataStateConsoleButton.map(obj => {\n        aboutDescription[obj.name] = [obj.text];\n      });\n      dispatch(addDescription(aboutDescription, arrDescription));\n    }\n\n    ;\n  }; //логика добавления контекстного меню через hoc\n\n\n  const CompareTableWithContextMenu = withContextMenuWindow(TableList, ContextMenuCompare, stateConsoleButton, \"ContextMenuWindow\");\n  useEffect(() => {\n    haveDescription(stateConsoleButton);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: stateStylesAll[staleSelect].dataBaseContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(HeaderCompare, {\n    classnameHeaderContainer: stateStylesAll[staleSelect].dataBaseHeaderContainer,\n    classnameHeader: stateStylesAll[staleSelect].dataBaseHeaderHeader,\n    classnameWrapper: stateStylesAll[staleSelect].dataBaseHeaderConsole,\n    stateConsoleButton: stateConsoleButton,\n    classnameDescription: stateStylesAll[staleSelect].descriptionButton,\n    nameBase: \"\\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    nameHeader: \"\\u0421\\u0440\\u0430\\u0432\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u0431\\u0440\\u0430\\u043D\\u043D\\u043E\\u0435\",\n    hendlerCloseWindow: hendlerCloseWindow,\n    to: links.linkBase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }), compareArr.length > 1 ? /*#__PURE__*/React.createElement(CompareTableWithContextMenu, {\n    classname: stateStylesAll[staleSelect].dataBaseTableContainer,\n    colorRowTableBackground: stateStylesAll[staleSelect].rowTableBackground,\n    colorFocusRowBackground: stateStylesAll[staleSelect].focusRowBackground,\n    flagOpenCompareWindow: flagOpenCompareWindow,\n    stateTable: compareArr,\n    dataTable: compareArr,\n    CountRow: compareArr.length + 1,\n    onclickDelete: hendlerDeleteContext,\n    visibleNameСolumns: visibleNameСolumns,\n    typeDataColumns: typeDataColumns,\n    funcSorting: data => dispatch(sortingCompareArr(data)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(WarningCompare, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 23\n    }\n  }));\n}\n\nexport default connect()(CompareUser);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/User/CompareUser.js"],"names":["React","useEffect","connect","useDispatch","useSelector","HeaderCompare","TableList","WarningCompare","ContextMenuCompare","sortingCompareArr","saveDataStore","saveTypeRequest","saveNameWindow","changeAdressOpenTable","clearCompareArr","deleteDataCompareArr","changeFlagOpenCompareWindow","addDescription","withContextMenuWindow","CompareUser","props","dispatch","compareArr","state","stateCompareUser","focusData","links","stateLinksUser","visibleNameСolumns","stateInputEditWindowUser","nameСolumnsTableList","typeDataColumns","typeData","flagEmployDescription","stateFlagsAll","employDescriptionAll","arrDescription","stateDescription","flagOpenCompareWindow","stateFlagsUser","stateStylesAll","stateStyle","stylesAll","staleSelect","styleSelect","focusNull","hendlerOpenWindow","nameWindow","typeRequest","hendlerClearCompareArr","linkBase","hendlerDeleteContext","hendlerCloseWindow","stateConsoleButton","text","name","icon","onclick","link","linkEditWindow","linkWindowConfirmDeleting","data","linkCompare","haveDescription","dataStateConsoleButton","aboutDescription","map","obj","CompareTableWithContextMenu","dataBaseContainer","dataBaseHeaderContainer","dataBaseHeaderHeader","dataBaseHeaderConsole","descriptionButton","length","dataBaseTableContainer","rowTableBackground","focusRowBackground"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport HeaderCompare from '../../components/Header/HeaderCompare';\r\nimport TableList from '../../components/Table/TableList';\r\nimport WarningCompare from '../../components/WarningWindow/WarningCompare';\r\nimport ContextMenuCompare from '../../components/ContextMenuWindow/ContextMenuCompare';\r\nimport { sortingCompareArr } from '../../store/User/actions/actionsCompareUser';\r\n\r\nimport {\r\n    saveDataStore\r\n} from '../../store/BasisReport/actions/actionFocusData';\r\nimport {\r\n    saveTypeRequest,\r\n    saveNameWindow\r\n} from '../../store/User/actions/actionEditWindowUser';\r\n\r\nimport { changeAdressOpenTable } from '../../store/User/actions/actionsLinksUser';\r\n\r\nimport {\r\n    clearCompareArr,\r\n    deleteDataCompareArr\r\n} from '../../store/User/actions/actionsCompareUser';\r\nimport {\r\n    changeFlagOpenCompareWindow\r\n} from '../../store/User/actions/actionsFlagsUser';\r\n\r\nimport { addDescription } from \"../../store/Description/actionsDescription\";\r\n\r\nimport withContextMenuWindow from '../../hoc/withContextMenuWindow';\r\n\r\n\r\nfunction CompareUser(props) {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const compareArr = useSelector(state => state.stateCompareUser); // массив строк, избранных для сравнения\r\n\r\n    const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\r\n\r\n    const links = useSelector(state => state.stateLinksUser); //список ссылок для переходов между окнами\r\n\r\n    const visibleNameСolumns = useSelector(state => state.stateInputEditWindowUser.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\r\n\r\n    const typeDataColumns = useSelector(state => state.stateInputEditWindowUser.typeData); // тип данных значений, заполняющих колонки\r\n\r\n    const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll) // разрешен ли пользователем показ подсказок\r\n\r\n    const arrDescription = useSelector(state => state.stateDescription); // массив подсказок из store (пока без кнопок консоли, заполнится после рединга)\r\n\r\n    const flagOpenCompareWindow = useSelector(state => state.stateFlagsUser.flagOpenCompareWindow); // флаг открытия таблицы сравнения\r\n\r\n    //переключение цветового решения приложения\r\n    const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\r\n    const staleSelect = useSelector(state => state.stateStyle.styleSelect);\r\n\r\n    const focusNull = () => {\r\n        dispatch(saveDataStore({\r\n            \"uid\": \"\",\r\n            \"login\": \"\",\r\n            \"name\": \"\",\r\n            \"password\": \"\",\r\n            \"isDeleted\": false,\r\n            \"isSuperUser\": false,\r\n            \"docInfo\": [],\r\n            \"projectAuthorU\": [],\r\n            \"projectUpdaterU\": [],\r\n            \"userProjects\": []\r\n        }));\r\n    }\r\n\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n\r\n    const hendlerClearCompareArr = () => {\r\n        dispatch(clearCompareArr());\r\n        dispatch(changeFlagOpenCompareWindow(false));\r\n        // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n        dispatch(changeAdressOpenTable(links.linkBase));\r\n    }\r\n    \r\n    const hendlerDeleteContext = () => {\r\n        dispatch(deleteDataCompareArr(focusData, compareArr)); // удалить из массива сравнений\r\n        //удаляем из списка сравнений и поэтому обнуляем хранение фокуса:\r\n        focusNull();\r\n    }\r\n\r\n    const hendlerCloseWindow = () => {\r\n            dispatch(changeFlagOpenCompareWindow(false));\r\n            //закрываем окно и поэтому обнуляем хранение фокуса:\r\n            focusNull();\r\n            // изменяем ссылку перенаправления на активную таблицу для закрытия вспомогательных окон:\r\n            dispatch(changeAdressOpenTable(links.linkBase));\r\n    }\r\n\r\n\r\n    const stateConsoleButton = [\r\n\r\n        {\r\n            text: \"Внести изменения\",\r\n            name: 'edit',\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Удалить из базы данных\",\r\n            name: 'delete',\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Убрать из сравнения\",\r\n            name: 'deleteList',\r\n            icon: \"fa fa-times-circle\",\r\n            onclick: hendlerDeleteContext,\r\n            data: focusData,\r\n            link: links.linkCompare\r\n        },\r\n        {\r\n            text: \"Очистить список сравнений\",\r\n            name: 'clear',\r\n            icon: \"fa fa-minus-square-o\",\r\n            onclick: hendlerClearCompareArr,\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Назад\",\r\n            name: 'back',\r\n            icon: \"fa fa-share\",\r\n            onclick: hendlerCloseWindow,\r\n            link: links.linkBase\r\n        }\r\n    ];\r\n\r\n    const haveDescription = (dataStateConsoleButton) => {\r\n        //добавляем подсказки на кнопки консоли\r\n        if (flagEmployDescription === true) {\r\n            let aboutDescription = {};\r\n            dataStateConsoleButton.map((obj) => {\r\n                aboutDescription[obj.name] = [obj.text];\r\n            });\r\n            dispatch(addDescription(aboutDescription, arrDescription));\r\n        };\r\n    }\r\n\r\n    //логика добавления контекстного меню через hoc\r\n    const CompareTableWithContextMenu = withContextMenuWindow(TableList, ContextMenuCompare, stateConsoleButton, \"ContextMenuWindow\");\r\n\r\n    useEffect(() => {\r\n        haveDescription(stateConsoleButton);\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <div className={stateStylesAll[staleSelect].dataBaseContainer}>\r\n\r\n            <HeaderCompare\r\n                classnameHeaderContainer={stateStylesAll[staleSelect].dataBaseHeaderContainer}\r\n                classnameHeader={stateStylesAll[staleSelect].dataBaseHeaderHeader}\r\n                classnameWrapper={stateStylesAll[staleSelect].dataBaseHeaderConsole}\r\n                stateConsoleButton={stateConsoleButton}\r\n                classnameDescription={stateStylesAll[staleSelect].descriptionButton}\r\n                nameBase=\"Классы для Типов связей и Типов сущностей\"\r\n                nameHeader=\"Сравнить избранное\"\r\n                hendlerCloseWindow={hendlerCloseWindow}\r\n                to={links.linkBase}\r\n            />\r\n\r\n            {\r\n                (compareArr.length > 1) ?\r\n                    <CompareTableWithContextMenu\r\n                        classname={stateStylesAll[staleSelect].dataBaseTableContainer}\r\n                        colorRowTableBackground={stateStylesAll[staleSelect].rowTableBackground}\r\n                        colorFocusRowBackground={stateStylesAll[staleSelect].focusRowBackground}\r\n\r\n                        flagOpenCompareWindow={flagOpenCompareWindow}\r\n\r\n                        stateTable={compareArr}\r\n                        dataTable={compareArr}\r\n                        CountRow={compareArr.length + 1}\r\n                        onclickDelete={hendlerDeleteContext}\r\n                        visibleNameСolumns={visibleNameСolumns}\r\n                        typeDataColumns={typeDataColumns}\r\n                        funcSorting={(data)=> dispatch(sortingCompareArr(data))}\r\n                    />\r\n                    : <WarningCompare />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(CompareUser)"]},"metadata":{},"sourceType":"module"}