{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\hoc\\\\withSearchTypeSelect.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\"; //import { sortingTable } from '../store/BasisReport/actions/actionBasisReport';\n//import {\n//    getDataPageRowTable,\n//    sortingList\n//} from '../store/BasisReport/actions/actionsFlagsBasisReport';\n//import { sortBase } from '../functions/Sort';\n//import { focusRowColorBackground } from '../functions/focusRowColorBackground';\n\nconst mapStateToProps = state => {\n  return {//focusData: state.focusData,\n    //countRow: state.stateFlagsBasisReport.countRowTable, // количество строк на отображаемой странице\n    //numberList: state.stateFlagsBasisReport.numberList //номер отображаемого листа\n  };\n};\n\nconst mapDispatchToProps = {//    sortingTable,\n  //    getDataPageRowTable,\n  //sortingList\n};\n\nconst withSearchTypeSelect = Component => {\n  class ComponentWithSearchTypeSelect extends React.Component {\n    constructor(...args) {\n      super(...args);\n\n      this.hendlerSearchTypeSelect = (event, name) => {};\n    }\n\n    componentDidMount() {}\n\n    render() {\n      let props = { ...this.props,\n        onclick: this.hendlerSearchTypeSelect\n      };\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }\n      }));\n    }\n\n  }\n\n  return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSearchTypeSelect);\n};\n\nexport default withSearchTypeSelect; //const hendlerSortList = (event, sortKey) => {\n//    let data = sortBase(sortKey, dataTable); //сотрируем только открытый лист, база остается несортированной\n//    dispatch(sortingList(data)); //сохраняем и перерисовываем открытый лист\n//}\n//const hendlerSortCompare = (event, sortKey) => {\n//    let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\n//    dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \n//}","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/hoc/withSearchTypeSelect.js"],"names":["React","connect","mapStateToProps","state","mapDispatchToProps","withSearchTypeSelect","Component","ComponentWithSearchTypeSelect","hendlerSearchTypeSelect","event","name","componentDidMount","render","props","onclick"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO,CACH;AACA;AACA;AAHG,GAAP;AAKH,CAND;;AAOA,MAAMC,kBAAkB,GAAG,CACvB;AACA;AACA;AAHuB,CAA3B;;AAMA,MAAMC,oBAAoB,GAAIC,SAAD,IAAe;AAGxC,QAAMC,6BAAN,SAA4CP,KAAK,CAACM,SAAlD,CAA4D;AAAA;AAAA;;AAAA,WAExDE,uBAFwD,GAE9B,CAACC,KAAD,EAAQC,IAAR,KAAiB,CAE1C,CAJuD;AAAA;;AAMxDC,IAAAA,iBAAiB,GAAG,CACnB;;AAEDC,IAAAA,MAAM,GAAG;AACL,UAAIC,KAAK,GAAG,EACR,GAAG,KAAKA,KADA;AAERC,QAAAA,OAAO,EAAE,KAAKN;AAFN,OAAZ;AAIA,0BACI,oBAAC,SAAD,oBAAeK,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AAGH;;AAjBuD;;AAmB5D,SAAOZ,OAAO,CAACC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CG,6BAA7C,CAAP;AACH,CAvBD;;AAwBA,eAAeF,oBAAf,C,CAiBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\n//import { sortingTable } from '../store/BasisReport/actions/actionBasisReport';\r\n//import {\r\n//    getDataPageRowTable,\r\n//    sortingList\r\n//} from '../store/BasisReport/actions/actionsFlagsBasisReport';\r\n//import { sortBase } from '../functions/Sort';\r\n\r\n//import { focusRowColorBackground } from '../functions/focusRowColorBackground';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        //focusData: state.focusData,\r\n        //countRow: state.stateFlagsBasisReport.countRowTable, // количество строк на отображаемой странице\r\n        //numberList: state.stateFlagsBasisReport.numberList //номер отображаемого листа\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    //    sortingTable,\r\n    //    getDataPageRowTable,\r\n    //sortingList\r\n}\r\n\r\nconst withSearchTypeSelect = (Component) => {\r\n\r\n \r\n    class ComponentWithSearchTypeSelect extends React.Component {\r\n\r\n        hendlerSearchTypeSelect = (event, name) => {\r\n            \r\n        }\r\n\r\n        componentDidMount() {\r\n        }\r\n\r\n        render() {\r\n            let props = {\r\n                ...this.props,\r\n                onclick: this.hendlerSearchTypeSelect,\r\n            }\r\n            return (\r\n                <Component {...props} />\r\n                )\r\n        }\r\n    }\r\n    return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSearchTypeSelect)\r\n}\r\nexport default withSearchTypeSelect\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//const hendlerSortList = (event, sortKey) => {\r\n//    let data = sortBase(sortKey, dataTable); //сотрируем только открытый лист, база остается несортированной\r\n//    dispatch(sortingList(data)); //сохраняем и перерисовываем открытый лист\r\n//}\r\n//const hendlerSortCompare = (event, sortKey) => {\r\n\r\n//    let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\r\n//    dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \r\n//}\r\n"]},"metadata":{},"sourceType":"module"}