{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\hoc\\\\withSort.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { sortingTable } from '../../store/EltypeClass/actions/actionEltypeClass';\nimport { getDataPageRowTable, sortingList } from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\nimport { sortingCompareArr } from '../store/EltypeClass/actions/actions�ompareEltypeClass';\n\nconst mapStateToProps = state => {\n  return {\n    countRow: state.stateFlagsEltypeClass.countRowTable,\n    // ���������� ����� �� ������������ ��������\n    numberList: state.stateFlagsEltypeClass.numberList //����� ������������� �����\n\n  };\n};\n\nconst mapDispatchToProps = {\n  sortingTable,\n  getDataPageRowTable,\n  sortingList,\n  sortingCompareArr\n};\n\nconst withSort = (Component, dataSort, typeSort) => {\n  class ComponentWithSort extends React.Component {\n    constructor(...args) {\n      super(...args);\n\n      this.sortBase = (sortKey, base) => {\n        const data = base;\n\n        if (typeof data[0][sortKey] == 'boolean') {\n          //���� ��� �������\n          const compare = function (a, b) {\n            let x;\n            let y;\n\n            if (a[sortKey] == true) {\n              x = 1;\n            } else {\n              x = 0;\n            }\n\n            ;\n\n            if (b[sortKey] == true) {\n              y = 1;\n            } else {\n              y = 0;\n            }\n\n            ;\n            return y - x;\n          };\n\n          data.sort(compare);\n        } else {\n          data.sort((a, b) => a[sortKey].localeCompare(b[sortKey]));\n        }\n\n        ;\n        return data;\n      };\n\n      this.hendlerSort = (event, sortKey) => {\n        let data = this.sortBase(sortKey, dataSort); // ��������� ��� ����, ���������� �� �������\n\n        if (typeSort == \"SortAll\") {\n          this.props.sortingTable(data); // ��������� ��������������� ���� � ���������\n\n          this.props.getDataPageRowTable(data, this.props.countRow, this.props.numberList); // ����� ������ ��� �����, ������� ������� � ������ ������ �� ��������\n        }\n\n        if (typeSort == \"SortActivList\") {\n          this.props.sortingList(data); //��������� � �������������� �������� ����\n        }\n\n        if (typeSort == \"SortCompareTable\") {\n          this.props.sortingCompareArr(data); //��������� � �������������� ������ ���������\n        }\n      };\n    }\n\n    render() {\n      let props = { ...this.props,\n        onclickSort: this.hendlerSort\n      };\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }));\n    }\n\n  }\n\n  return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort);\n};\n\nexport default withSort; //const hendlerSortList = (event, sortKey) => {\n//    let data = sortBase(sortKey, dataTable); //��������� ������ �������� ����, ���� �������� ���������������\n//    dispatch(sortingList(data)); //��������� � �������������� �������� ����\n//}\n//const hendlerSortCompare = (event, sortKey) => {\n//    let data = sortBase(sortKey, compareArr); //��������� ������ ������ ��� ���������\n//    dispatch(sortingCompareArr(data)); //��������� � ��������� ��������������� ������ � �������������� \n//}","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/hoc/withSort.js"],"names":["React","connect","sortingTable","getDataPageRowTable","sortingList","sortingCompareArr","mapStateToProps","state","countRow","stateFlagsEltypeClass","countRowTable","numberList","mapDispatchToProps","withSort","Component","dataSort","typeSort","ComponentWithSort","sortBase","sortKey","base","data","compare","a","b","x","y","sort","localeCompare","hendlerSort","event","props","render","onclickSort"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { sortingTable } from '../../store/EltypeClass/actions/actionEltypeClass';\r\nimport { getDataPageRowTable, sortingList } from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\nimport { sortingCompareArr} from '../store/EltypeClass/actions/actions�ompareEltypeClass';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        countRow: state.stateFlagsEltypeClass.countRowTable, // ���������� ����� �� ������������ ��������\r\n        numberList: state.stateFlagsEltypeClass.numberList //����� ������������� �����\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    sortingTable,\r\n    getDataPageRowTable,\r\n    sortingList,\r\n    sortingCompareArr\r\n}\r\n\r\n\r\nconst withSort = (Component, dataSort, typeSort) => {\r\n\r\n \r\n    class ComponentWithSort extends React.Component {\r\n\r\n        sortBase = (sortKey, base) => {\r\n                const data = base;\r\n\r\n                if (typeof data[0][sortKey] == 'boolean') { //���� ��� �������\r\n                    const compare = function (a, b) {\r\n                        let x;\r\n                        let y;\r\n                        if (a[sortKey] == true) { x = 1 } else { x = 0 };\r\n                        if (b[sortKey] == true) { y = 1 } else { y = 0 };\r\n                        return y - x;\r\n                    };\r\n                    data.sort(compare);\r\n                } else {\r\n                    data.sort((a, b) => a[sortKey].localeCompare(b[sortKey]))\r\n                };\r\n                return data\r\n            }\r\n\r\n        hendlerSort = (event, sortKey) => {\r\n            let data = this.sortBase(sortKey, dataSort); // ��������� ��� ����, ���������� �� �������\r\n\r\n            if (typeSort == \"SortAll\") {\r\n                        this.props.sortingTable(data); // ��������� ��������������� ���� � ���������\r\n                        this.props.getDataPageRowTable(data, this.props.countRow, this.props.numberList); // ����� ������ ��� �����, ������� ������� � ������ ������ �� ��������\r\n            }\r\n            if (typeSort == \"SortActivList\") {\r\n                this.props.sortingList(data); //��������� � �������������� �������� ����\r\n            }\r\n            if (typeSort == \"SortCompareTable\") {\r\n                this.props.sortingCompareArr(data); //��������� � �������������� ������ ���������\r\n            }\r\n        }\r\n\r\n        render() {\r\n            let props = {\r\n                ...this.props,\r\n                onclickSort: this.hendlerSort,\r\n            }\r\n            return (\r\n                <Component {...props} />\r\n                )\r\n        }\r\n    }\r\n    return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort)\r\n}\r\nexport default withSort\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//const hendlerSortList = (event, sortKey) => {\r\n//    let data = sortBase(sortKey, dataTable); //��������� ������ �������� ����, ���� �������� ���������������\r\n//    dispatch(sortingList(data)); //��������� � �������������� �������� ����\r\n//}\r\n//const hendlerSortCompare = (event, sortKey) => {\r\n\r\n//    let data = sortBase(sortKey, compareArr); //��������� ������ ������ ��� ���������\r\n//    dispatch(sortingCompareArr(data)); //��������� � ��������� ��������������� ������ � �������������� \r\n//}\r\n"]},"metadata":{},"sourceType":"module"}