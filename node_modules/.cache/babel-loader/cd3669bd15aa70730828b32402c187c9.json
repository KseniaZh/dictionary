{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\User\\\\User.js\";\nimport React from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport Basis from '../Basis/Basis';\nimport { startUser_GET_RequestServer } from '../../store/User/actions/actionUser';\nimport { saveDataStore } from '../../store/BasisReport/actions/actionFocusData';\nimport { saveTypeRequest, saveNameWindow } from '../../store/User/actions/actionEditWindowUser';\nimport { changeFlagOpenCompareWindow } from '../../store/User/actions/actionsFlagsUser';\nimport { changeAdressOpenTable } from '../../store/User/actions/actionsLinksUser';\nimport { addDataCompareArr } from '../../store/User/actions/actionsCompareUser';\n\nfunction User(props) {\n  const dispatch = useDispatch();\n  const visibleNameСolumns = useSelector(state => state.stateInputEditWindowUser.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\n\n  const searchСolumnsName = useSelector(state => state.stateInputEditWindowUser.searchСolumnsName); // объект с разрешением отображения поиска в колонках в таблице\n\n  const searchKey = useSelector(state => state.stateInputEditWindowUser.searchKey); // ключ для типа поиска в окошке в шапке таблицы\n\n  const typeDataColumns = useSelector(state => state.stateInputEditWindowUser.typeData); // тип данных значений, заполняющих колонки\n\n  const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\n\n  const compareArr = useSelector(state => state.stateCompareUser); // массив строк, избранных для сравнения\n\n  const links = useSelector(state => state.stateLinksUser); //список ссылок для переходов между окнами\n\n  const flagOpenCompareWindow = useSelector(state => state.stateFlagsUser.flagOpenCompareWindow);\n\n  const funcStartGetRequestServer = () => dispatch(startUser_GET_RequestServer());\n\n  const focusNull = () => {\n    dispatch(saveDataStore({\n      \"uid\": \"\",\n      \"login\": \"\",\n      \"name\": \"\",\n      \"password\": \"\",\n      \"isDeleted\": false,\n      \"isSuperUser\": false,\n      \"docInfo\": [],\n      \"projectAuthorU\": [],\n      \"projectUpdaterU\": [],\n      \"userProjects\": []\n    }));\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const hendlerAddCompareData = () => {\n    if (focusData.uid === '' || focusData.uid === null || focusData.uid === undefined) {\n      return;\n    }\n\n    ;\n    dispatch(addDataCompareArr(focusData, compareArr));\n  };\n\n  const hendlerOpenCompareWindow = () => {\n    dispatch(changeFlagOpenCompareWindow(true));\n    focusNull();\n    dispatch(changeAdressOpenTable(links.linkCompare));\n  };\n\n  const stateConsoleButton = [{\n    text: \"Обновить\",\n    name: 'update',\n    icon: \"fa fa-download fa-lg\",\n    onclick: funcStartGetRequestServer,\n    link: links.linkBase\n  }, {\n    text: \"Добавить новые данные\",\n    name: 'add',\n    icon: \"fa fa-plus fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Внести изменения\",\n    name: 'edit',\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить\",\n    name: 'delete',\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Сравнить\",\n    name: 'compare',\n    icon: \"fa fa-balance-scale\",\n    onclick: hendlerOpenCompareWindow,\n    link: links.linkCompare\n  }, {\n    text: \"Добавить к сравнению\",\n    name: 'addCompare',\n    icon: \"fa fa-filter fa-lg\",\n    onclick: hendlerAddCompareData,\n    link: links.linkBase\n  }];\n\n  const hendlerClearSearchInput = event => {\n    const SearchBaseName = document.getElementById('SearchBaseName');\n\n    if (event.target.tagName !== \"INPUT\") {\n      SearchBaseName.value = '';\n    }\n  };\n\n  useEffect(() => {\n    funcStartGetRequestServer();\n    document.addEventListener('click', hendlerClearSearchInput);\n    return () => {\n      document.removeEventListener('click', hendlerClearSearchInput);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(Basis, {\n    stateConsoleButton: stateConsoleButton,\n    focusNull: focusNull,\n    visibleNameСolumns: visibleNameСolumns,\n    searchСolumnsName: searchСolumnsName,\n    searchKey: searchKey,\n    typeDataColumns: typeDataColumns,\n    flagOpenCompareWindow: flagOpenCompareWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default connect()(User);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/User/User.js"],"names":["React","connect","useDispatch","useSelector","Basis","startUser_GET_RequestServer","saveDataStore","saveTypeRequest","saveNameWindow","changeFlagOpenCompareWindow","changeAdressOpenTable","addDataCompareArr","User","props","dispatch","visibleNameСolumns","state","stateInputEditWindowUser","nameСolumnsTableList","searchСolumnsName","searchKey","typeDataColumns","typeData","focusData","compareArr","stateCompareUser","links","stateLinksUser","flagOpenCompareWindow","stateFlagsUser","funcStartGetRequestServer","focusNull","hendlerOpenWindow","nameWindow","typeRequest","hendlerAddCompareData","uid","undefined","hendlerOpenCompareWindow","linkCompare","stateConsoleButton","text","name","icon","onclick","link","linkBase","linkEditWindow","linkWindowConfirmDeleting","hendlerClearSearchInput","event","SearchBaseName","document","getElementById","target","tagName","value","useEffect","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport Basis from '../Basis/Basis';\r\n\r\nimport {\r\n    startUser_GET_RequestServer,\r\n} from '../../store/User/actions/actionUser';\r\nimport {\r\n    saveDataStore\r\n} from '../../store/BasisReport/actions/actionFocusData';\r\nimport {\r\n    saveTypeRequest,\r\n    saveNameWindow\r\n} from '../../store/User/actions/actionEditWindowUser';\r\n\r\nimport {\r\n    changeFlagOpenCompareWindow\r\n} from '../../store/User/actions/actionsFlagsUser';\r\n\r\nimport { changeAdressOpenTable } from '../../store/User/actions/actionsLinksUser';\r\n\r\nimport { addDataCompareArr } from '../../store/User/actions/actionsCompareUser';\r\n\r\n\r\n\r\nfunction User(props) {\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const visibleNameСolumns = useSelector(state => state.stateInputEditWindowUser.nameСolumnsTableList); // наименования ключей для заполнения колонок в таблице\r\n\r\n    const searchСolumnsName = useSelector(state => state.stateInputEditWindowUser.searchСolumnsName); // объект с разрешением отображения поиска в колонках в таблице\r\n\r\n    const searchKey = useSelector(state => state.stateInputEditWindowUser.searchKey); // ключ для типа поиска в окошке в шапке таблицы\r\n\r\n    const typeDataColumns = useSelector(state => state.stateInputEditWindowUser.typeData); // тип данных значений, заполняющих колонки\r\n \r\n    const focusData = useSelector(state => state.focusData); // фокус. запомнить данные выбранной строки\r\n\r\n    const compareArr = useSelector(state => state.stateCompareUser); // массив строк, избранных для сравнения\r\n\r\n    const links = useSelector(state => state.stateLinksUser); //список ссылок для переходов между окнами\r\n\r\n    const flagOpenCompareWindow = useSelector(state => state.stateFlagsUser.flagOpenCompareWindow);\r\n\r\n\r\n    const funcStartGetRequestServer = () => dispatch(startUser_GET_RequestServer());\r\n\r\n    const focusNull = () => {\r\n        dispatch(saveDataStore({\r\n                                    \"uid\": \"\",\r\n                                    \"login\": \"\",\r\n                                    \"name\": \"\",\r\n                                    \"password\": \"\",\r\n                                    \"isDeleted\": false,\r\n                                    \"isSuperUser\": false,\r\n                                    \"docInfo\": [],\r\n                                    \"projectAuthorU\": [],\r\n                                    \"projectUpdaterU\": [],\r\n                                    \"userProjects\": []\r\n                            }));\r\n    }\r\n\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n\r\n    const hendlerAddCompareData = () => {\r\n        if (focusData.uid === '' || focusData.uid === null || focusData.uid === undefined) {\r\n            return\r\n        };\r\n        dispatch(addDataCompareArr(focusData, compareArr));\r\n    }\r\n\r\n    const hendlerOpenCompareWindow = () => {\r\n        dispatch(changeFlagOpenCompareWindow(true)); \r\n        focusNull();\r\n        dispatch(changeAdressOpenTable(links.linkCompare)); \r\n    }\r\n\r\n    const stateConsoleButton = [\r\n        {\r\n            text: \"Обновить\",\r\n            name: 'update',\r\n            icon: \"fa fa-download fa-lg\",\r\n            onclick: funcStartGetRequestServer,\r\n            link: links.linkBase\r\n        },\r\n        {\r\n            text: \"Добавить новые данные\",\r\n            name: 'add',\r\n            icon: \"fa fa-plus fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Внести изменения\",\r\n            name: 'edit',\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n        },\r\n        {\r\n            text: \"Удалить\",\r\n            name: 'delete',\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n        },\r\n        {\r\n            text: \"Сравнить\",\r\n            name: 'compare',\r\n            icon: \"fa fa-balance-scale\",\r\n            onclick: hendlerOpenCompareWindow,\r\n            link: links.linkCompare\r\n        },\r\n        {\r\n            text: \"Добавить к сравнению\",\r\n            name: 'addCompare',\r\n            icon: \"fa fa-filter fa-lg\",\r\n            onclick: hendlerAddCompareData,\r\n            link: links.linkBase\r\n        }\r\n    ];\r\n\r\n    const hendlerClearSearchInput = event => {\r\n        const SearchBaseName = document.getElementById('SearchBaseName');\r\n        if (event.target.tagName !== \"INPUT\") {\r\n                SearchBaseName.value = '';\r\n            }\r\n    }\r\n\r\n    useEffect(() => {\r\n        funcStartGetRequestServer();\r\n        document.addEventListener('click', hendlerClearSearchInput);\r\n\r\n        return () => {\r\n            document.removeEventListener('click', hendlerClearSearchInput);\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <Basis\r\n            stateConsoleButton={stateConsoleButton}\r\n            focusNull={focusNull}\r\n            visibleNameСolumns={visibleNameСolumns}\r\n            searchСolumnsName={searchСolumnsName}\r\n            searchKey={searchKey}\r\n            typeDataColumns={typeDataColumns}\r\n            flagOpenCompareWindow={flagOpenCompareWindow}\r\n        />\r\n    )\r\n}\r\n\r\nexport default connect()(User)"]},"metadata":{},"sourceType":"module"}