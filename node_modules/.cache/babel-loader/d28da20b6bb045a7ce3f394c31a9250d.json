{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\Personalize\\\\Personalize.js\";\nimport React from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport Checkbox from '../../UserInterface/Input/Checkbox';\nimport { employDescriptionAll } from '../../store/Flags/actionsFlags';\nimport Select from '../../UserInterface/Select/Select';\nimport { changeStyleSelect } from '../../store/Style/actionsStyle';\nimport { linkLoginAuthChange } from '../Navigation/Main';\nimport ButtonLink from '../../UserInterface/Buttons/Button/ButtonLink';\n\nfunction Personalize(props) {\n  const persona = useSelector(state => state.stateAuthorization.user.name);\n  const login = useSelector(state => state.stateAuthorization.user.login); //переключение цветового решения приложения\n\n  const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\n  const styleSelect = useSelector(state => state.stateStyle.styleSelect);\n  const keysStyle = Object.keys(stateStylesAll);\n\n  const hendlerStylesSelect = event => {\n    event.preventDefault();\n    if (event.target.tagName !== 'SELECT') return;\n    dispatch(changeStyleSelect(event.target.value));\n  }; //переключение подсказок во всем приложении\n\n\n  const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll);\n  const dispatch = useDispatch();\n\n  const inputChecked = flag => {\n    if (flag === true) {\n      return \"checked\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const HendlerHaveDescription = event => {\n    if (event.target.type === \"checkbox\") {\n      dispatch(employDescriptionAll(!flagEmployDescription));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: stateStylesAll[styleSelect].personalize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"\\u041F\\u0435\\u0440\\u0441\\u043E\\u043D\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, persona), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, \"\\u043B\\u043E\\u0433\\u0438\\u043D: \", login)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    id: \"styleSelect\",\n    onchange: hendlerStylesSelect,\n    value: styleSelect,\n    tabindex: \"1\",\n    arrOptionSelect: keysStyle,\n    label: \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u0446\\u0432\\u0435\\u0442\\u043E\\u0432\\u043E\\u0435 \\u043E\\u0444\\u043E\\u0440\\u043C\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0438\\u043D\\u0442\\u0435\\u0440\\u0444\\u0435\\u0439\\u0441\\u0430\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Checkbox, {\n    label: \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u044B\\u0432\\u0430\\u0442\\u044C \\u0432\\u0441\\u043F\\u043B\\u044B\\u0432\\u0430\\u044E\\u0449\\u0438\\u0435 \\u043F\\u043E\\u0434\\u0441\\u043A\\u0430\\u0437\\u043A\\u0438\",\n    id: \"haveDescription\",\n    type: \"checkbox\",\n    onchange: HendlerHaveDescription,\n    checked: inputChecked(flagEmployDescription),\n    classNameLabel: \"\",\n    classNameCheckbox: stateStylesAll[styleSelect].beautifulCheckbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ButtonLink, {\n    onclick: () => console.log('Открыть окно смены пароля LoginAuthСhange'),\n    to: linkLoginAuthChange,\n    name: \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n    icon: \"fa fa-user-secret\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }));\n}\n\nexport default connect()(Personalize);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/Personalize/Personalize.js"],"names":["React","connect","useDispatch","useSelector","Checkbox","employDescriptionAll","Select","changeStyleSelect","linkLoginAuthChange","ButtonLink","Personalize","props","persona","state","stateAuthorization","user","name","login","stateStylesAll","stateStyle","stylesAll","styleSelect","keysStyle","Object","keys","hendlerStylesSelect","event","preventDefault","target","tagName","dispatch","value","flagEmployDescription","stateFlagsAll","inputChecked","flag","HendlerHaveDescription","type","personalize","beautifulCheckbox","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport Checkbox from '../../UserInterface/Input/Checkbox';\r\nimport { employDescriptionAll } from '../../store/Flags/actionsFlags';\r\nimport Select from '../../UserInterface/Select/Select';\r\nimport { changeStyleSelect } from '../../store/Style/actionsStyle';\r\nimport { linkLoginAuthChange } from '../Navigation/Main';\r\nimport ButtonLink from '../../UserInterface/Buttons/Button/ButtonLink';\r\n\r\nfunction Personalize(props) {\r\n\r\n    const persona = useSelector(state => state.stateAuthorization.user.name);\r\n    const login = useSelector(state => state.stateAuthorization.user.login);\r\n\r\n    //переключение цветового решения приложения\r\n    const stateStylesAll = useSelector(state => state.stateStyle.stylesAll);\r\n    const styleSelect = useSelector(state => state.stateStyle.styleSelect);\r\n    const keysStyle = Object.keys(stateStylesAll);\r\n\r\n\r\n    const hendlerStylesSelect = (event) => {\r\n        event.preventDefault();\r\n        if (event.target.tagName !== 'SELECT') return;\r\n        dispatch(changeStyleSelect(event.target.value));\r\n    }\r\n\r\n    //переключение подсказок во всем приложении\r\n    const flagEmployDescription = useSelector(state => state.stateFlagsAll.employDescriptionAll);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const inputChecked = flag => {\r\n        if (flag === true) {\r\n            return \"checked\"\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n    const HendlerHaveDescription = (event) => {\r\n        if (event.target.type === \"checkbox\") {\r\n            dispatch(employDescriptionAll(!flagEmployDescription));\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={stateStylesAll[styleSelect].personalize}>\r\n            <div>\r\n                <h2>Персонализация</h2>\r\n                <h3>{persona}</h3>\r\n                <h3>логин: {login}</h3>\r\n\r\n            </div>\r\n                <div>\r\n                    <Select\r\n                        id=\"styleSelect\"\r\n                        onchange={hendlerStylesSelect}\r\n                        value={styleSelect}\r\n                        tabindex='1'\r\n                        arrOptionSelect={keysStyle}\r\n                        label=\"Выбрать цветовое оформление интерфейса\"\r\n                     />\r\n                </div>\r\n                <Checkbox\r\n                    label=\"Показывать всплывающие подсказки\"\r\n                    id=\"haveDescription\"\r\n                    type='checkbox'\r\n\r\n                    onchange={HendlerHaveDescription}\r\n                    checked={inputChecked(flagEmployDescription)}\r\n                    classNameLabel=''\r\n                    classNameCheckbox={stateStylesAll[styleSelect].beautifulCheckbox}\r\n                />\r\n                <ButtonLink\r\n                    onclick={()=>console.log('Открыть окно смены пароля LoginAuthСhange')}\r\n                    to={linkLoginAuthChange}\r\n                    name=\"Изменить пароль\"\r\n                    icon=\"fa fa-user-secret\"\r\n                />\r\n\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default connect()(Personalize)"]},"metadata":{},"sourceType":"module"}