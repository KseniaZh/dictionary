{"ast":null,"code":"import { takeEvery, select, put, call } from 'redux-saga/effects';\nimport { getRequestServer } from '../../store/serverViewType/actions/actionViewType';\nimport { url_POST } from \"../../constans/url\";\nimport { START_POST_REQUEST } from '../../store/windowCreateNewData/types'; //import {GET_REQUEST} from '../../store/serverViewType/types';\n//import {newDataFromServer} from '../../containers/EditWindow/ContEditWindow'\n\nexport function* workerStart_POST_RequestServer() {\n  const stateSendServer = yield select(state => state.WindowCreateNewData.stateData);\n  stateSendServer.uid = Number(stateSendServer.uid);\n  console.log(\"Результат запроса state\", stateSendServer);\n\n  try {\n    const data = yield call(fetch(url_POST, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(stateSendServer)\n    }).then(response => response.json()));\n    yield put(getRequestServer(data));\n  } catch (error) {\n    alert('workerStart_POST_RequestServer error ', error);\n  }\n}\nexport function* watchStart_POST_RequestServer() {\n  yield takeEvery(START_POST_REQUEST, workerStart_POST_RequestServer);\n}","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/sagas/ViewType/sagasNewDataViewType.js"],"names":["takeEvery","select","put","call","getRequestServer","url_POST","START_POST_REQUEST","workerStart_POST_RequestServer","stateSendServer","state","WindowCreateNewData","stateData","uid","Number","console","log","data","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","error","alert","watchStart_POST_RequestServer"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAAQC,gBAAR,QAA+B,mDAA/B;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,SAAQC,kBAAR,QAAiC,uCAAjC,C,CACA;AACA;;AAEA,OAAO,UAAUC,8BAAV,GAA0C;AAE7C,QAAMC,eAAe,GAAG,MAAMP,MAAM,CAAEQ,KAAK,IAAIA,KAAK,CAACC,mBAAN,CAA0BC,SAArC,CAApC;AAEAH,EAAAA,eAAe,CAACI,GAAhB,GAAsBC,MAAM,CAACL,eAAe,CAACI,GAAjB,CAA5B;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAa,yBAAb,EAAwCP,eAAxC;;AAEA,MAAI;AAEA,UAAMQ,IAAI,GAAG,MAAMb,IAAI,CAACc,KAAK,CAAEZ,QAAF,EAAW;AAEhCa,MAAAA,MAAM,EAAE,MAFwB;AAGhCC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgB;AAFX,OAHuB;AAOhCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAef,eAAf;AAP0B,KAAX,CAAL,CASfgB,IATe,CASVC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EATF,CAAD,CAAvB;AAYA,UAAMxB,GAAG,CAACE,gBAAgB,CAACY,IAAD,CAAjB,CAAT;AAEH,GAhBD,CAgBE,OAAOW,KAAP,EAAc;AACZC,IAAAA,KAAK,CAAC,uCAAD,EAA0CD,KAA1C,CAAL;AACH;AAEJ;AAED,OAAO,UAAUE,6BAAV,GAAyC;AAE5C,QAAM7B,SAAS,CAACM,kBAAD,EAAqBC,8BAArB,CAAf;AAEH","sourcesContent":["import { takeEvery, select, put, call } from 'redux-saga/effects';\r\nimport {getRequestServer} from '../../store/serverViewType/actions/actionViewType';\r\nimport {url_POST} from \"../../constans/url\"\r\nimport {START_POST_REQUEST} from '../../store/windowCreateNewData/types';\r\n//import {GET_REQUEST} from '../../store/serverViewType/types';\r\n//import {newDataFromServer} from '../../containers/EditWindow/ContEditWindow'\r\n\r\nexport function* workerStart_POST_RequestServer(){\r\n    \r\n    const stateSendServer = yield select( state => state.WindowCreateNewData.stateData);\r\n        \r\n    stateSendServer.uid = Number(stateSendServer.uid);\r\n        \r\n    console.log (\"Результат запроса state\", stateSendServer);\r\n    \r\n    try {\r\n        \r\n        const data = yield call(fetch( url_POST,{\r\n                \r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                body: JSON.stringify(stateSendServer)\r\n                })\r\n                .then(response => response.json())\r\n            );\r\n        \r\n        yield put(getRequestServer(data));\r\n         \r\n    } catch (error) {\r\n        alert('workerStart_POST_RequestServer error ', error);\r\n    }\r\n \r\n}\r\n\r\nexport function* watchStart_POST_RequestServer(){\r\n    \r\n    yield takeEvery(START_POST_REQUEST, workerStart_POST_RequestServer)\r\n\r\n}"]},"metadata":{},"sourceType":"module"}