{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\hoc\\\\withSearch.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { rowFocus_Coffee } from '../styles/const_color'; //import { sortingTable } from '../store/EltypeClass/actions/actionEltypeClass';\n//import { getDataPageRowTable, sortingList } from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\n//import { sortingCompareArr } from '../store/EltypeClass/actions/actionsCompareEltypeClass';\n//import { focusRowColorBackground } from '../functions/focusRowColorBackground';\n//const mapStateToProps = (state) => {\n//    return {\n//        activList: state.stateFlagsEltypeClass.dataListTable, // отображаемый лист\n//        compareArr: state.compareDataEltypeClass, // массив строк, избранных для сравнения\n//        focusData: state.createDataEltypeClass.stateData,\n//        countRow: state.stateFlagsEltypeClass.countRowTable, // количество строк на отображаемой странице\n//        numberList: state.stateFlagsEltypeClass.numberList //номер отображаемого листа\n//    }\n//}\n//const mapDispatchToProps = {\n//        sortingTable,\n//        getDataPageRowTable,\n//        sortingList,\n//        sortingCompareArr\n//}\n\nconst withSearch = (Component, data) => {\n  class ComponentWithSort extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.hendlerSearch = event => {\n        event.preventDefault();\n\n        if (event.target.value === '') {\n          return;\n        }\n\n        ; //если пусто, выходим\n\n        let num; // номер выбранного объекта в массиве\n\n        let numRowOnPage; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\n\n        data.map((obj, index) => {\n          if (obj.name === event.target.value) {\n            num = index + 1;\n            numRowOnPage = index + 1;\n            dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\n          }\n        }); //поиск номера страницы\n\n        let i = countRow;\n        let numList = 1;\n\n        if (num === undefined) {\n          return;\n        }\n\n        ; //если пусто, выходим\n\n        while (i < num) {\n          i = i + countRow;\n          numRowOnPage = numRowOnPage - countRow;\n          numList++;\n        }\n\n        dispatch(changeNumberList(numList)); //сохраняем номер\n\n        dispatch(getDataPageRowTable(stateTable, countRow, numList)); // загружаем выбранный лист\n\n        tablebodyBackgroundClear();\n        let tablebody = document.querySelector('tbody');\n        tablebody.children[numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\n\n        tablebody.children[numRowOnPage - 1].children[1].focus();\n      };\n    }\n\n    componentDidMount() {}\n\n    render() {\n      let props = { ...this.props,\n        onchange: this.hendlerSearch\n      };\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }\n      }));\n    }\n\n  }\n\n  return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort);\n};\n\nexport default withSort; //const hendlerSortList = (event, sortKey) => {\n//    let data = sortBase(sortKey, dataTable); //сотрируем только открытый лист, база остается несортированной\n//    dispatch(sortingList(data)); //сохраняем и перерисовываем открытый лист\n//}\n//const hendlerSortCompare = (event, sortKey) => {\n//    let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\n//    dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \n//}","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/hoc/withSearch.js"],"names":["React","connect","rowFocus_Coffee","withSearch","Component","data","ComponentWithSort","constructor","props","hendlerSearch","event","preventDefault","target","value","num","numRowOnPage","map","obj","index","name","dispatch","saveDataStore","i","countRow","numList","undefined","changeNumberList","getDataPageRowTable","stateTable","tablebodyBackgroundClear","tablebody","document","querySelector","children","style","background","focus","componentDidMount","render","onchange","mapStateToProps","mapDispatchToProps","withSort"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,uBAAhC,C,CAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AAGpC,QAAMC,iBAAN,SAAgCN,KAAK,CAACI,SAAtC,CAAgD;AAC5CG,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YAAMA,KAAN;;AADe,WAGnBC,aAHmB,GAGFC,KAAD,IAAW;AACvBA,QAAAA,KAAK,CAACC,cAAN;;AACA,YAAID,KAAK,CAACE,MAAN,CAAaC,KAAb,KAAuB,EAA3B,EAA+B;AAAE;AAAQ;;AAAA,SAFlB,CAEoB;;AAE3C,YAAIC,GAAJ,CAJuB,CAId;;AACT,YAAIC,YAAJ,CALuB,CAKL;;AAElBV,QAAAA,IAAI,CAACW,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAErB,cAAID,GAAG,CAACE,IAAJ,KAAaT,KAAK,CAACE,MAAN,CAAaC,KAA9B,EAAqC;AACjCC,YAAAA,GAAG,GAAGI,KAAK,GAAG,CAAd;AACAH,YAAAA,YAAY,GAAGG,KAAK,GAAG,CAAvB;AACAE,YAAAA,QAAQ,CAACC,aAAa,CAACJ,GAAD,CAAd,CAAR,CAHiC,CAGH;AACjC;AACJ,SAPD,EAPuB,CAevB;;AACA,YAAIK,CAAC,GAAGC,QAAR;AACA,YAAIC,OAAO,GAAG,CAAd;;AACA,YAAIV,GAAG,KAAKW,SAAZ,EAAuB;AAAE;AAAQ;;AAAA,SAlBV,CAkBY;;AAEnC,eAAOH,CAAC,GAAGR,GAAX,EAAgB;AACZQ,UAAAA,CAAC,GAAGA,CAAC,GAAGC,QAAR;AACAR,UAAAA,YAAY,GAAGA,YAAY,GAAGQ,QAA9B;AACAC,UAAAA,OAAO;AACV;;AAEDJ,QAAAA,QAAQ,CAACM,gBAAgB,CAACF,OAAD,CAAjB,CAAR,CA1BuB,CA0Bc;;AACrCJ,QAAAA,QAAQ,CAACO,mBAAmB,CAACC,UAAD,EAAaL,QAAb,EAAuBC,OAAvB,CAApB,CAAR,CA3BuB,CA2BsC;;AAE7DK,QAAAA,wBAAwB;AAExB,YAAIC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAhB;AACAF,QAAAA,SAAS,CAACG,QAAV,CAAmBlB,YAAY,GAAG,CAAlC,EAAqCmB,KAArC,CAA2CC,UAA3C,GAAwDjC,eAAxD,CAhCuB,CAgCkD;;AACzE4B,QAAAA,SAAS,CAACG,QAAV,CAAmBlB,YAAY,GAAG,CAAlC,EAAqCkB,QAArC,CAA8C,CAA9C,EAAiDG,KAAjD;AACH,OArCkB;AAElB;;AAqCDC,IAAAA,iBAAiB,GAAG,CAEnB;;AAEDC,IAAAA,MAAM,GAAG;AACL,UAAI9B,KAAK,GAAG,EACR,GAAG,KAAKA,KADA;AAER+B,QAAAA,QAAQ,EAAE,KAAK9B;AAFP,OAAZ;AAIA,0BACI,oBAAC,SAAD,oBAAeD,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AAGH;;AApD2C;;AAsDhD,SAAOP,OAAO,CAACuC,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CnC,iBAA7C,CAAP;AACH,CA1DD;;AA2DA,eAAeoC,QAAf,C,CAiBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { rowFocus_Coffee } from '../styles/const_color';\r\n\r\n//import { sortingTable } from '../store/EltypeClass/actions/actionEltypeClass';\r\n//import { getDataPageRowTable, sortingList } from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\n//import { sortingCompareArr } from '../store/EltypeClass/actions/actionsCompareEltypeClass';\r\n\r\n//import { focusRowColorBackground } from '../functions/focusRowColorBackground';\r\n\r\n//const mapStateToProps = (state) => {\r\n//    return {\r\n//        activList: state.stateFlagsEltypeClass.dataListTable, // отображаемый лист\r\n//        compareArr: state.compareDataEltypeClass, // массив строк, избранных для сравнения\r\n//        focusData: state.createDataEltypeClass.stateData,\r\n//        countRow: state.stateFlagsEltypeClass.countRowTable, // количество строк на отображаемой странице\r\n//        numberList: state.stateFlagsEltypeClass.numberList //номер отображаемого листа\r\n//    }\r\n//}\r\n//const mapDispatchToProps = {\r\n//        sortingTable,\r\n//        getDataPageRowTable,\r\n//        sortingList,\r\n//        sortingCompareArr\r\n//}\r\n\r\nconst withSearch = (Component, data) => {\r\n\r\n \r\n    class ComponentWithSort extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n        }\r\n        hendlerSearch = (event) => {\r\n            event.preventDefault();\r\n            if (event.target.value === '') { return }; //если пусто, выходим\r\n\r\n            let num; // номер выбранного объекта в массиве\r\n            let numRowOnPage; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\r\n\r\n            data.map((obj, index) => {\r\n\r\n                if (obj.name === event.target.value) {\r\n                    num = index + 1;\r\n                    numRowOnPage = index + 1;\r\n                    dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\r\n                }\r\n            });\r\n            //поиск номера страницы\r\n            let i = countRow;\r\n            let numList = 1;\r\n            if (num === undefined) { return }; //если пусто, выходим\r\n\r\n            while (i < num) {\r\n                i = i + countRow;\r\n                numRowOnPage = numRowOnPage - countRow;\r\n                numList++;\r\n            }\r\n\r\n            dispatch(changeNumberList(numList)); //сохраняем номер\r\n            dispatch(getDataPageRowTable(stateTable, countRow, numList));// загружаем выбранный лист\r\n\r\n            tablebodyBackgroundClear();\r\n\r\n            let tablebody = document.querySelector('tbody');\r\n            tablebody.children[numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\r\n            tablebody.children[numRowOnPage - 1].children[1].focus();\r\n        }\r\n\r\n        componentDidMount() {\r\n\r\n        }\r\n\r\n        render() {\r\n            let props = {\r\n                ...this.props,\r\n                onchange: this.hendlerSearch\r\n            }\r\n            return (\r\n                <Component {...props} />\r\n                )\r\n        }\r\n    }\r\n    return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort)\r\n}\r\nexport default withSort\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//const hendlerSortList = (event, sortKey) => {\r\n//    let data = sortBase(sortKey, dataTable); //сотрируем только открытый лист, база остается несортированной\r\n//    dispatch(sortingList(data)); //сохраняем и перерисовываем открытый лист\r\n//}\r\n//const hendlerSortCompare = (event, sortKey) => {\r\n\r\n//    let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\r\n//    dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \r\n//}\r\n"]},"metadata":{},"sourceType":"module"}