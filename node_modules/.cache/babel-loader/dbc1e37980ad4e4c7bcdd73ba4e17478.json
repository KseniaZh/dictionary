{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\hoc\\\\withSearchTypeSelect.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { changeSearchKey } from '../store/User/actions/actionEditWindowUser';\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = {\n  changeSearchKey\n};\n\nconst withSearchTypeSelect = Component => {\n  class ComponentWithSearchTypeSelect extends React.Component {\n    constructor(...args) {\n      super(...args);\n\n      this.hendlerSearchTypeSelect = (event, name) => {\n        this.props.changeSearchKey(name);\n      };\n    }\n\n    render() {\n      let props = { ...this.props,\n        onclick: this.hendlerSearchTypeSelect\n      };\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }\n      }));\n    }\n\n  }\n\n  return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSearchTypeSelect);\n};\n\nexport default withSearchTypeSelect; //const hendlerSortList = (event, sortKey) => {\n//    let data = sortBase(sortKey, dataTable); //сотрируем только открытый лист, база остается несортированной\n//    dispatch(sortingList(data)); //сохраняем и перерисовываем открытый лист\n//}\n//const hendlerSortCompare = (event, sortKey) => {\n//    let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\n//    dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \n//}","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/hoc/withSearchTypeSelect.js"],"names":["React","connect","changeSearchKey","mapStateToProps","state","mapDispatchToProps","withSearchTypeSelect","Component","ComponentWithSearchTypeSelect","hendlerSearchTypeSelect","event","name","props","render","onclick"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,4CAAhC;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO,EAAP;AAEH,CAHD;;AAIA,MAAMC,kBAAkB,GAAG;AACvBH,EAAAA;AADuB,CAA3B;;AAIA,MAAMI,oBAAoB,GAAIC,SAAD,IAAe;AAExC,QAAMC,6BAAN,SAA4CR,KAAK,CAACO,SAAlD,CAA4D;AAAA;AAAA;;AAAA,WAExDE,uBAFwD,GAE9B,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACvC,aAAKC,KAAL,CAAWV,eAAX,CAA2BS,IAA3B;AACH,OAJuD;AAAA;;AAKxDE,IAAAA,MAAM,GAAG;AACL,UAAID,KAAK,GAAG,EACR,GAAG,KAAKA,KADA;AAERE,QAAAA,OAAO,EAAE,KAAKL;AAFN,OAAZ;AAIA,0BACI,oBAAC,SAAD,oBAAeG,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AAGH;;AAbuD;;AAe5D,SAAOX,OAAO,CAACE,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CG,6BAA7C,CAAP;AACH,CAlBD;;AAmBA,eAAeF,oBAAf,C,CAiBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { changeSearchKey } from '../store/User/actions/actionEditWindowUser';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    changeSearchKey\r\n}\r\n\r\nconst withSearchTypeSelect = (Component) => {\r\n\r\n    class ComponentWithSearchTypeSelect extends React.Component {\r\n\r\n        hendlerSearchTypeSelect = (event, name) => {\r\n            this.props.changeSearchKey(name);\r\n        }\r\n        render() {\r\n            let props = {\r\n                ...this.props,\r\n                onclick: this.hendlerSearchTypeSelect,\r\n            }\r\n            return (\r\n                <Component {...props} />\r\n                )\r\n        }\r\n    }\r\n    return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSearchTypeSelect)\r\n}\r\nexport default withSearchTypeSelect\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//const hendlerSortList = (event, sortKey) => {\r\n//    let data = sortBase(sortKey, dataTable); //сотрируем только открытый лист, база остается несортированной\r\n//    dispatch(sortingList(data)); //сохраняем и перерисовываем открытый лист\r\n//}\r\n//const hendlerSortCompare = (event, sortKey) => {\r\n\r\n//    let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\r\n//    dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \r\n//}\r\n"]},"metadata":{},"sourceType":"module"}