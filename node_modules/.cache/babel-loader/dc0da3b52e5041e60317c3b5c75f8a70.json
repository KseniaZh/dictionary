{"ast":null,"code":"import { takeEvery, select, put, call } from 'redux-saga/effects';\nimport { getRequestServer } from '../../store/serverViewType/actions/actionViewType';\nimport { url_POST } from \"../../constans/url\";\nimport { START_POST_REQUEST } from '../../store/windowCreateNewData/types';\nimport { GET_REQUEST } from '../../store/serverViewType/types'; //import {newDataFromServer} from '../../containers/EditWindow/ContEditWindow'\n\nconst url = \"http://localhost:5000/api/ViewType/add\";\nexport function fetchData(bodySendServer) {\n  console.log('Это fetch POST');\n  return;\n  fetch(url_POST, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(bodySendServer)\n  }).then(response => response.json()).catch(err => console.log(err));\n}\nexport function RequestData(data) {\n  console.log('Это RequestData', data);\n  getRequestServer(data);\n}\nexport function* workerStart_POST_RequestServer() {\n  console.log('workerStart_POST_RequestServer ');\n\n  try {\n    //        const data = yield call(fetchData);\n    const stateSendServer = yield select(state => state.WindowCreateNewData.stateData);\n    stateSendServer.uid = Number(stateSendServer.uid);\n    console.log(\"Результат запроса state\", stateSendServer);\n    const data = yield call(fetch(\"http://localhost:5000/api/ViewType/add\", {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(stateSendServer)\n    }));\n    console.log(\"Результ POST \", data);\n    yield put(RequestData, data);\n  } catch (error) {\n    alert('workerStart_POST_RequestServer error ', error);\n  }\n}\nexport function* watchStart_POST_RequestServer() {\n  yield takeEvery(START_POST_REQUEST, workerStart_POST_RequestServer);\n}","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/sagas/ViewType/sagasNewDataViewType.js"],"names":["takeEvery","select","put","call","getRequestServer","url_POST","START_POST_REQUEST","GET_REQUEST","url","fetchData","bodySendServer","console","log","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","catch","err","RequestData","data","workerStart_POST_RequestServer","stateSendServer","state","WindowCreateNewData","stateData","uid","Number","error","alert","watchStart_POST_RequestServer"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,IAAjC,QAA6C,oBAA7C;AACA,SAAQC,gBAAR,QAA+B,mDAA/B;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,SAAQC,kBAAR,QAAiC,uCAAjC;AACA,SAAQC,WAAR,QAA0B,kCAA1B,C,CACA;;AAIA,MAAMC,GAAG,GAAG,wCAAZ;AAEA,OAAO,SAASC,SAAT,CAAmBC,cAAnB,EAAkC;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAEA;AACIC,EAAAA,KAAK,CAAER,QAAF,EAAW;AACRS,IAAAA,MAAM,EAAE,MADA;AAERC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFD;AAMRC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,cAAf;AANE,GAAX,CAAL,CAQCU,IARD,CAQMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARlB,EASCC,KATD,CASOC,GAAG,IAAIb,OAAO,CAACC,GAAR,CAAYY,GAAZ,CATd;AAUP;AACD,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA0B;AAC7Bf,EAAAA,OAAO,CAACC,GAAR,CAAa,iBAAb,EAAgCc,IAAhC;AACAtB,EAAAA,gBAAgB,CAACsB,IAAD,CAAhB;AACH;AAED,OAAO,UAAUC,8BAAV,GAA0C;AAE7ChB,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;;AAEA,MAAI;AAER;AAEQ,UAAMgB,eAAe,GAAG,MAAM3B,MAAM,CAAE4B,KAAK,IAAIA,KAAK,CAACC,mBAAN,CAA0BC,SAArC,CAApC;AAEAH,IAAAA,eAAe,CAACI,GAAhB,GAAsBC,MAAM,CAACL,eAAe,CAACI,GAAjB,CAA5B;AAEArB,IAAAA,OAAO,CAACC,GAAR,CAAa,yBAAb,EAAwCgB,eAAxC;AAEA,UAAMF,IAAI,GAAG,MAAMvB,IAAI,CAACU,KAAK,CAAC,wCAAD,EAA0C;AAC/DC,MAAAA,MAAM,EAAE,MADuD;AAE/DC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgB;AAFX,OAFsD;AAM/DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeS,eAAf;AANyD,KAA1C,CAAN,CAAvB;AASAjB,IAAAA,OAAO,CAACC,GAAR,CAAa,eAAb,EAA8Bc,IAA9B;AAEA,UAAMxB,GAAG,CAACuB,WAAD,EAAcC,IAAd,CAAT;AAGH,GAxBD,CAwBE,OAAOQ,KAAP,EAAc;AACZC,IAAAA,KAAK,CAAC,uCAAD,EAA0CD,KAA1C,CAAL;AACH;AAEJ;AAED,OAAO,UAAUE,6BAAV,GAAyC;AAE5C,QAAMpC,SAAS,CAACM,kBAAD,EAAqBqB,8BAArB,CAAf;AAEH","sourcesContent":["import { takeEvery, select, put, call } from 'redux-saga/effects';\r\nimport {getRequestServer} from '../../store/serverViewType/actions/actionViewType';\r\nimport {url_POST} from \"../../constans/url\"\r\nimport {START_POST_REQUEST} from '../../store/windowCreateNewData/types';\r\nimport {GET_REQUEST} from '../../store/serverViewType/types';\r\n//import {newDataFromServer} from '../../containers/EditWindow/ContEditWindow'\r\n\r\n\r\n\r\nconst url = \"http://localhost:5000/api/ViewType/add\"\r\n\r\nexport function fetchData(bodySendServer){\r\n    console.log('Это fetch POST')\r\n\r\n    return\r\n        fetch( url_POST,{\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                body: JSON.stringify(bodySendServer)\r\n                })\r\n        .then(response => response.json())\r\n        .catch(err => console.log(err))\r\n}\r\nexport function RequestData(data){\r\n    console.log( 'Это RequestData', data);\r\n    getRequestServer(data);\r\n}\r\n\r\nexport function* workerStart_POST_RequestServer(){\r\n     \r\n    console.log('workerStart_POST_RequestServer ');\r\n    \r\n    try {\r\n        \r\n//        const data = yield call(fetchData);\r\n        \r\n        const stateSendServer = yield select( state => state.WindowCreateNewData.stateData);\r\n        \r\n        stateSendServer.uid = Number(stateSendServer.uid);\r\n        \r\n        console.log (\"Результат запроса state\", stateSendServer);\r\n        \r\n        const data = yield call(fetch(\"http://localhost:5000/api/ViewType/add\",{\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                body: JSON.stringify(stateSendServer)\r\n                }));\r\n        \r\n        console.log (\"Результ POST \", data);\r\n        \r\n        yield put(RequestData, data);\r\n        \r\n        \r\n    } catch (error) {\r\n        alert('workerStart_POST_RequestServer error ', error);\r\n    }\r\n \r\n}\r\n\r\nexport function* watchStart_POST_RequestServer(){\r\n    \r\n    yield takeEvery(START_POST_REQUEST, workerStart_POST_RequestServer)\r\n\r\n}"]},"metadata":{},"sourceType":"module"}