{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\hoc\\\\withSortEC.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { sortingTable } from '../store/EltypeClass/actions/actionEltypeClass';\nimport { getDataPageRowTable, sortingList } from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\nimport { sortingCompareArr } from '../store/EltypeClass/actions/actionsCompareEltypeClass';\nimport { sortBase } from '../functions/Sort';\n\nconst mapStateToProps = state => {\n  return {\n    activList: state.stateFlagsEltypeClass.dataListTable,\n    // отображаемый лист\n    compareArr: state.compareDataEltypeClass,\n    // массив строк, избранных для сравнения\n    focusData: state.createDataEltypeClass.stateData,\n    countRow: state.stateFlagsEltypeClass.countRowTable,\n    // количество строк на отображаемой странице\n    numberList: state.stateFlagsEltypeClass.numberList //номер отображаемого листа\n\n  };\n};\n\nconst mapDispatchToProps = {\n  sortingTable,\n  getDataPageRowTable,\n  sortingList,\n  sortingCompareArr\n};\n\nconst withSort = (Component, dataSort, typeSort) => {\n  class ComponentWithSort extends React.Component {\n    constructor(...args) {\n      super(...args);\n\n      this.hendlerSort = (event, sortKey) => {\n        let data = sortBase(sortKey, dataSort); // сортируем данные \n\n        if (typeSort === \"SortAll\") {\n          this.props.sortingTable(data); // сохраняем отсортированную базу в хранилище\n\n          this.props.getDataPageRowTable(data, this.props.countRow, this.props.numberList); // затем меняем вид листа, который выведен в данный момент на страницу\n        }\n\n        if (typeSort === \"SortActivList\") {\n          this.props.sortingList(data); //сохраняем и перерисовываем открытый лист\n        }\n\n        if (typeSort === \"SortCompareTable\") {\n          this.props.sortingCompareArr(data); //сохраняем и перерисовываем массив сравнений\n        }\n      };\n    }\n\n    render() {\n      let props = { ...this.props,\n        onclick: this.hendlerSort\n      };\n      return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }\n      }));\n    }\n\n  }\n\n  return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort);\n};\n\nexport default withSort; //const hendlerSortList = (event, sortKey) => {\n//    let data = sortBase(sortKey, dataTable); //сотрируем только открытый лист, база остается несортированной\n//    dispatch(sortingList(data)); //сохраняем и перерисовываем открытый лист\n//}\n//const hendlerSortCompare = (event, sortKey) => {\n//    let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\n//    dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \n//}","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/hoc/withSortEC.js"],"names":["React","connect","sortingTable","getDataPageRowTable","sortingList","sortingCompareArr","sortBase","mapStateToProps","state","activList","stateFlagsEltypeClass","dataListTable","compareArr","compareDataEltypeClass","focusData","createDataEltypeClass","stateData","countRow","countRowTable","numberList","mapDispatchToProps","withSort","Component","dataSort","typeSort","ComponentWithSort","hendlerSort","event","sortKey","data","props","render","onclick"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,YAAT,QAA6B,gDAA7B;AACA,SAASC,mBAAT,EAA8BC,WAA9B,QAAiD,sDAAjD;AACA,SAASC,iBAAT,QAAkC,wDAAlC;AACA,SAASC,QAAT,QAAyB,mBAAzB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHC,IAAAA,SAAS,EAAED,KAAK,CAACE,qBAAN,CAA4BC,aADpC;AACmD;AACtDC,IAAAA,UAAU,EAAEJ,KAAK,CAACK,sBAFf;AAEuC;AAC1CC,IAAAA,SAAS,EAAEN,KAAK,CAACO,qBAAN,CAA4BC,SAHpC;AAIHC,IAAAA,QAAQ,EAAET,KAAK,CAACE,qBAAN,CAA4BQ,aAJnC;AAIkD;AACrDC,IAAAA,UAAU,EAAEX,KAAK,CAACE,qBAAN,CAA4BS,UALrC,CAKgD;;AALhD,GAAP;AAOH,CARD;;AASA,MAAMC,kBAAkB,GAAG;AACnBlB,EAAAA,YADmB;AAEnBC,EAAAA,mBAFmB;AAGnBC,EAAAA,WAHmB;AAInBC,EAAAA;AAJmB,CAA3B;;AAOA,MAAMgB,QAAQ,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,QAAtB,KAAmC;AAGhD,QAAMC,iBAAN,SAAgCzB,KAAK,CAACsB,SAAtC,CAAgD;AAAA;AAAA;;AAAA,WAE5CI,WAF4C,GAE9B,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC9B,YAAIC,IAAI,GAAGvB,QAAQ,CAACsB,OAAD,EAAUL,QAAV,CAAnB,CAD8B,CACU;;AAExC,YAAIC,QAAQ,KAAK,SAAjB,EAA4B;AAChB,eAAKM,KAAL,CAAW5B,YAAX,CAAwB2B,IAAxB,EADgB,CACe;;AAC/B,eAAKC,KAAL,CAAW3B,mBAAX,CAA+B0B,IAA/B,EAAqC,KAAKC,KAAL,CAAWb,QAAhD,EAA0D,KAAKa,KAAL,CAAWX,UAArE,EAFgB,CAEkE;AAC7F;;AACD,YAAIK,QAAQ,KAAK,eAAjB,EAAkC;AACtB,eAAKM,KAAL,CAAW1B,WAAX,CAAuByB,IAAvB,EADsB,CACQ;AACzC;;AACD,YAAIL,QAAQ,KAAK,kBAAjB,EAAqC;AACzB,eAAKM,KAAL,CAAWzB,iBAAX,CAA6BwB,IAA7B,EADyB,CACW;AAC/C;AACJ,OAf2C;AAAA;;AAiB5CE,IAAAA,MAAM,GAAG;AACL,UAAID,KAAK,GAAG,EACR,GAAG,KAAKA,KADA;AAERE,QAAAA,OAAO,EAAE,KAAKN;AAFN,OAAZ;AAIA,0BACI,oBAAC,SAAD,oBAAeI,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ;AAGH;;AAzB2C;;AA2BhD,SAAO7B,OAAO,CAACM,eAAD,EAAkBa,kBAAlB,CAAP,CAA6CK,iBAA7C,CAAP;AACH,CA/BD;;AAgCA,eAAeJ,QAAf,C,CAiBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { sortingTable } from '../store/EltypeClass/actions/actionEltypeClass';\r\nimport { getDataPageRowTable, sortingList } from '../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\nimport { sortingCompareArr } from '../store/EltypeClass/actions/actionsCompareEltypeClass';\r\nimport { sortBase } from '../functions/Sort';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        activList: state.stateFlagsEltypeClass.dataListTable, // отображаемый лист\r\n        compareArr: state.compareDataEltypeClass, // массив строк, избранных для сравнения\r\n        focusData: state.createDataEltypeClass.stateData,\r\n        countRow: state.stateFlagsEltypeClass.countRowTable, // количество строк на отображаемой странице\r\n        numberList: state.stateFlagsEltypeClass.numberList //номер отображаемого листа\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n        sortingTable,\r\n        getDataPageRowTable,\r\n        sortingList,\r\n        sortingCompareArr\r\n}\r\n\r\nconst withSort = (Component, dataSort, typeSort) => {\r\n\r\n \r\n    class ComponentWithSort extends React.Component {\r\n\r\n        hendlerSort = (event, sortKey) => {\r\n            let data = sortBase(sortKey, dataSort); // сортируем данные \r\n\r\n            if (typeSort === \"SortAll\") {\r\n                        this.props.sortingTable(data); // сохраняем отсортированную базу в хранилище\r\n                        this.props.getDataPageRowTable(data, this.props.countRow, this.props.numberList); // затем меняем вид листа, который выведен в данный момент на страницу\r\n            }\r\n            if (typeSort === \"SortActivList\") {\r\n                        this.props.sortingList(data); //сохраняем и перерисовываем открытый лист\r\n            }\r\n            if (typeSort === \"SortCompareTable\") {\r\n                        this.props.sortingCompareArr(data); //сохраняем и перерисовываем массив сравнений\r\n            }\r\n        }\r\n\r\n        render() {\r\n            let props = {\r\n                ...this.props,\r\n                onclick: this.hendlerSort,\r\n            }\r\n            return (\r\n                <Component {...props} />\r\n                )\r\n        }\r\n    }\r\n    return connect(mapStateToProps, mapDispatchToProps)(ComponentWithSort)\r\n}\r\nexport default withSort\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//const hendlerSortList = (event, sortKey) => {\r\n//    let data = sortBase(sortKey, dataTable); //сотрируем только открытый лист, база остается несортированной\r\n//    dispatch(sortingList(data)); //сохраняем и перерисовываем открытый лист\r\n//}\r\n//const hendlerSortCompare = (event, sortKey) => {\r\n\r\n//    let data = sortBase(sortKey, compareArr); //сотрируем только массив для сравнения\r\n//    dispatch(sortingCompareArr(data)); //сохраняем в хранилище отсортированный массив и перерисовываем \r\n//}\r\n"]},"metadata":{},"sourceType":"module"}