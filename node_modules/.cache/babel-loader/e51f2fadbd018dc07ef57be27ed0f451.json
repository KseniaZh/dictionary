{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\EltypeClass.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\nimport TableList from '../../components/Table/TableListEltypeClass';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\nimport { startGetRequestServerEltypeClass, saveDataStore, saveTypeRequest, saveNameWindow, sortingTable } from '../../store/EltypeClass/actions/actionEltypeClass';\nimport { changeCountRowTable, getCounterPagesTable, changeNumberList, getDataPageRowTable, sortingList } from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\nimport { changeAdressOpenTable } from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\nimport { addDataCompareArr } from '../../store/EltypeClass/actions/actionsСompareEltypeClass';\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../../styles/const_color';\n\nfunction EltypeClass(props) {\n  const dispatch = useDispatch();\n  const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\n  const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\n\n  const dataTable = useSelector(state => state.stateFlagsEltypeClass.dataListTable); // отображаемый лист\n\n  const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // общее количество листов в таблице\n\n  const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\n\n  const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\n\n  const focusData = useSelector(state => state.createDataEltypeClass.stateData); // фокус. запомнить данные выбранной строки\n\n  const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\n\n  const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\n\n  const tablebodyBackgroundClear = () => {\n    let tablebody = document.getElementById('tablebody');\n\n    for (let child of tablebody.children) {\n      child.style.background = tablebodyBackground_Coffee; //убираем цвет ранее выбранной строки\n    }\n\n    ;\n  };\n\n  const focusNull = () => {\n    tablebodyBackgroundClear();\n    dispatch(saveDataStore({\n      uid: \"\",\n      name: \"\",\n      isDeleted: false,\n      isTemplate: false\n    }));\n  }; //правая кнопка мыши открывает контестное меню\n\n\n  const [flagOpenContextMenuWindow, setFlagOpenContextMenuWindow] = useState({\n    flag: false,\n    clientX: '',\n    clientY: ''\n  });\n\n  const handlerTableRowUID = (event, data) => {\n    //фокус на строку\n    event.preventDefault();\n    let tr; //строка выбранной ячейки\n\n    if (event.target.parentElement.tagName == 'TR') {\n      tr = event.target.parentElement;\n    } else if (event.target.parentElement.tagName == 'TD') {\n      tr = event.target.parentElement.parentElement;\n    }\n\n    tr.children[1].focus();\n    tablebodyBackgroundClear();\n    tr.style.background = rowFocus_Coffee;\n    stateTable.map((obj, index) => {\n      if (obj.uid === data) {\n        dispatch(saveDataStore(obj)); // сохранить в хранилище\n      }\n    });\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const HendlerOnMouseover = () => {};\n\n  const HendlerOnMouseLeave = () => {};\n\n  const [flagCountRow, setFlagCoutnRow] = useState(false);\n\n  const hendlerInputOpen = () => {\n    setFlagCoutnRow(true);\n  };\n\n  const hendlerChangeCountRow = event => {\n    event.preventDefault();\n    dispatch(changeCountRowTable(event.target.value));\n    dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\n\n    if (numberList != 1) {\n      focusNull(); // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные\n    }\n\n    ;\n  };\n\n  const hendlerInputSave = () => {\n    setFlagCoutnRow(false);\n    dispatch(getCounterPagesTable(stateTable, countRow));\n    dispatch(getDataPageRowTable(stateTable, countRow, numberList));\n  }; //после выбора страницы приходит ее номер\n  // в хранилище собираем новую страницу\n  // в хранилище сохраняем номер страницы\n\n\n  const hendlerOpenPagesTable = num => {\n    dispatch(getDataPageRowTable(stateTable, countRow, num));\n    dispatch(changeNumberList(num));\n    focusNull(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\n  };\n\n  const hendlerAddCompareData = () => {\n    dispatch(addDataCompareArr(focusData, compareArr));\n  };\n\n  const hendlerOpenCompareWindow = () => {\n    dispatch(addDataCompareArr(focusData, compareArr)); //добавить выделенную строку в сравнение\n\n    focusNull();\n    dispatch(changeAdressOpenTable(links.linkCompare));\n  };\n\n  const hendlerSortBase = (event, sortKey) => {\n    //сортируем всю базу\n    const data = stateTable;\n\n    if (typeof data[0][sortKey] == 'boolean') {\n      //если это чекбокс\n      const compare = function (a, b) {\n        let x;\n        let y;\n\n        if (a[sortKey] == true) {\n          x = 1;\n        } else {\n          x = 0;\n        }\n\n        ;\n\n        if (b[sortKey] == true) {\n          y = 1;\n        } else {\n          y = 0;\n        }\n\n        ;\n        return y - x;\n      };\n\n      data.sort(compare);\n    } else {\n      data.sort((a, b) => a[sortKey].localeCompare(b[sortKey]));\n    }\n\n    dispatch(sortingTable(data)); // сначала сотрируем всю базу данных\n\n    dispatch(getDataPageRowTable(data, countRow, numberList)); // затем меняем вид листа, который выведен в данный момент на страницу\n  };\n\n  const hendlerSortList = (event, sortKey) => {\n    //сотрируем только открытый лист, база остается несортированной\n    const data = dataTable;\n\n    if (typeof data[0][sortKey] == 'boolean') {\n      //если это чекбокс\n      const compare = function (a, b) {\n        let x;\n        let y;\n\n        if (a[sortKey] == true) {\n          x = 1;\n        } else {\n          x = 0;\n        }\n\n        ;\n\n        if (b[sortKey] == true) {\n          y = 1;\n        } else {\n          y = 0;\n        }\n\n        ;\n        return y - x;\n      };\n\n      data.sort(compare);\n    } else {\n      data.sort((a, b) => {\n        return a[sortKey].localeCompare(b[sortKey]);\n      });\n    }\n\n    dispatch(sortingList(data)); //сотрируем только открытый лист, база остается несортированной\n  }; //  const [flagOpenInputSearch, setFlagOpenInputSearch] = useState(false);\n  //const hendlerOpenInputSearch = () => {\n  //    setFlagOpenInputSearch(true);\n  //}\n  //const hendlerCloseInputSearch = () => {\n  //    setFlagOpenInputSearch(false);\n  //}\n\n\n  const hendlerSearchBase = event => {\n    event.preventDefault();\n\n    if (event.target.value == '') {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    let num; // номер выбранного объекта в массиве\n\n    let numRowOnPage; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\n\n    stateTable.map((obj, index) => {\n      if (obj.name == event.target.value) {\n        num = index + 1;\n        numRowOnPage = index + 1;\n        dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\n      }\n    }); //поиск номера страницы\n\n    let i = countRow;\n    let numList = 1;\n\n    if (num == undefined) {\n      return;\n    }\n\n    ; //если пусто, выходим\n\n    while (i < num) {\n      i = i + countRow;\n      numRowOnPage = numRowOnPage - countRow;\n      numList++;\n    }\n\n    dispatch(changeNumberList(numList)); //сохраняем номер\n\n    dispatch(getDataPageRowTable(stateTable, countRow, numList)); // загружаем выбранный лист\n\n    tablebodyBackgroundClear();\n    let tablebody = document.getElementById('tablebody');\n    tablebody.children[numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\n\n    tablebody.children[numRowOnPage - 1].children[1].focus();\n  };\n\n  useEffect(() => {\n    dispatch(startGetRequestServerEltypeClass());\n\n    document.oncontextmenu = function (event) {\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      if (event.target.tagName == 'TD') {\n        setFlagOpenContextMenuWindow({\n          flag: true,\n          clientX: event.clientX,\n          clientY: event.clientY\n        });\n      }\n\n      ;\n    };\n\n    const SearchBaseName = document.getElementById('SearchBaseName');\n\n    document.onclick = function (event) {\n      event.preventDefault();\n      setFlagOpenContextMenuWindow({\n        flag: false,\n        clientX: '',\n        clientY: ''\n      });\n\n      if (event.target.tagName != \"INPUT\") {\n        SearchBaseName.value = '';\n      }\n    };\n\n    document.onscroll = function () {\n      setFlagOpenContextMenuWindow({\n        flag: false,\n        clientX: '',\n        clientY: ''\n      });\n    };\n  }, []);\n  const stateConsoleButton = [{\n    text: \"Обновить\",\n    icon: \"fa fa-download fa-lg\",\n    onclick: () => {\n      dispatch(startGetRequestServerEltypeClass());\n    }\n  }, {\n    text: \"Добавить новые данные\",\n    icon: \"fa fa-plus fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Внести изменения\",\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\n    link: links.linkEditWindow\n  }, {\n    text: \"Удалить\",\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {},\n    link: links.linkWindowConfirmDeleting\n  }, {\n    text: \"Сравнить\",\n    icon: \"fa fa-balance-scale\",\n    onclick: hendlerOpenCompareWindow,\n    link: links.linkCompare\n  }, {\n    text: \"Добавить к сравнению\",\n    icon: \"fa fa-filter fa-lg\",\n    onclick: () => hendlerAddCompareData()\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__header__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButton, {\n    classnameWrapper: \"DataBase__header__console\",\n    stateConsoleButton: stateConsoleButton,\n    onmouseover: HendlerOnMouseover,\n    onmouseleave: HendlerOnMouseLeave,\n    tabindex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classname: \"DataBase__header__header\",\n    nameHeader: \"\\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    dataBase: stateTable,\n    onchangeSearch: event => hendlerSearchBase(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 21\n    }\n  })), stateLoading ? /*#__PURE__*/React.createElement(AwaitLoading, {\n    classname: \"Loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(TableList, {\n    classname: \"DataBase__table__container\",\n    classnameConsoleCountRow: \"ConsoleCountRow\",\n    classnameButtonConsoleCountPow: \"PersonalizeButton\",\n    columnName: Object.keys(stateTable[0]),\n    dataTable: dataTable,\n    onclick: (event, data) => handlerTableRowUID(event, data),\n    onclickSortBase: (event, keyName) => hendlerSortBase(event, keyName),\n    onclickSortList: (event, keyName) => hendlerSortList(event, keyName),\n    onclickInputOpen: hendlerInputOpen,\n    onclickInputSave: hendlerInputSave,\n    onclickOpenPagesTable: numButton => hendlerOpenPagesTable(numButton),\n    flagCountRow: flagCountRow,\n    onchangeCountRow: event => hendlerChangeCountRow(event),\n    CountRow: countRow,\n    counterPages: counterPages,\n    focusUid: focusData.uid,\n    numberActivList: numberList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 25\n    }\n  }), flagOpenContextMenuWindow.flag ? /*#__PURE__*/React.createElement(ContextMenuWindow, {\n    stateConsoleButton: stateConsoleButton,\n    classname: \"ContextMenuWindow\",\n    clientX: flagOpenContextMenuWindow.clientX,\n    clientY: flagOpenContextMenuWindow.clientY,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 25\n    }\n  }) : null);\n}\n\nexport default connect()(EltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/EltypeClass.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","ConsoleButton","TableList","HeaderDictionary","ContextMenuWindow","AwaitLoading","startGetRequestServerEltypeClass","saveDataStore","saveTypeRequest","saveNameWindow","sortingTable","changeCountRowTable","getCounterPagesTable","changeNumberList","getDataPageRowTable","sortingList","changeAdressOpenTable","addDataCompareArr","tablebodyBackground_Coffee","rowFocus_Coffee","EltypeClass","props","dispatch","stateLoading","state","stateFlagsEltypeClass","loading","stateTable","stateTableEltypeClass","dataTable","dataListTable","counterPages","counterPagesTable","countRow","countRowTable","numberList","focusData","createDataEltypeClass","stateData","compareArr","compareDataEltypeClass","links","stateLinksEltypeClass","tablebodyBackgroundClear","tablebody","document","getElementById","child","children","style","background","focusNull","uid","name","isDeleted","isTemplate","flagOpenContextMenuWindow","setFlagOpenContextMenuWindow","flag","clientX","clientY","handlerTableRowUID","event","data","preventDefault","tr","target","parentElement","tagName","focus","map","obj","index","hendlerOpenWindow","nameWindow","typeRequest","HendlerOnMouseover","HendlerOnMouseLeave","flagCountRow","setFlagCoutnRow","hendlerInputOpen","hendlerChangeCountRow","value","hendlerInputSave","hendlerOpenPagesTable","num","hendlerAddCompareData","hendlerOpenCompareWindow","linkCompare","hendlerSortBase","sortKey","compare","a","b","x","y","sort","localeCompare","hendlerSortList","hendlerSearchBase","numRowOnPage","i","numList","undefined","oncontextmenu","defaultPrevented","SearchBaseName","onclick","onscroll","stateConsoleButton","text","icon","link","linkEditWindow","linkWindowConfirmDeleting","Object","keys","keyName","numButton"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\r\nimport TableList from '../../components/Table/TableListEltypeClass';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport ContextMenuWindow from '../../components/ContextMenuWindow/ContextMenuWindow';\r\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\r\n\r\nimport {\r\n        startGetRequestServerEltypeClass,\r\n        saveDataStore,\r\n        saveTypeRequest,\r\n        saveNameWindow,\r\n        sortingTable\r\n } from '../../store/EltypeClass/actions/actionEltypeClass';\r\n\r\nimport {\r\n        changeCountRowTable,\r\n        getCounterPagesTable,\r\n        changeNumberList,\r\n        getDataPageRowTable,\r\n        sortingList\r\n} from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\n\r\nimport { changeAdressOpenTable } from '../../store/EltypeClass/actions/actionsLinksEltypeClass';\r\n\r\nimport { addDataCompareArr } from '../../store/EltypeClass/actions/actionsСompareEltypeClass';\r\n\r\nimport { tablebodyBackground_Coffee, rowFocus_Coffee } from '../../styles/const_color';\r\n\r\n\r\n\r\n\r\nfunction EltypeClass(props) {\r\n\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\r\n\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\r\n\r\n    const dataTable = useSelector(state => state.stateFlagsEltypeClass.dataListTable); // отображаемый лист\r\n\r\n    const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // общее количество листов в таблице\r\n\r\n    const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\r\n\r\n    const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\r\n\r\n    const focusData = useSelector(state => state.createDataEltypeClass.stateData); // фокус. запомнить данные выбранной строки\r\n\r\n    const compareArr = useSelector(state => state.compareDataEltypeClass); // массив строк, избранных для сравнения\r\n\r\n    const links = useSelector(state => state.stateLinksEltypeClass); //список ссылок для переходов между окнами\r\n\r\n\r\n    const tablebodyBackgroundClear = () => {\r\n        let tablebody = document.getElementById('tablebody');\r\n        for (let child of tablebody.children) {\r\n            child.style.background = tablebodyBackground_Coffee;//убираем цвет ранее выбранной строки\r\n        };\r\n    }\r\n    const focusNull = () => {\r\n        tablebodyBackgroundClear();\r\n        dispatch(saveDataStore({\r\n                                uid: \"\",\r\n                                name: \"\",\r\n                                isDeleted: false,\r\n                                isTemplate: false\r\n                            }));\r\n    }\r\n\r\n    //правая кнопка мыши открывает контестное меню\r\n    const [flagOpenContextMenuWindow, setFlagOpenContextMenuWindow] = useState({\r\n                                                                                    flag: false,\r\n                                                                                    clientX: '',\r\n                                                                                    clientY: ''\r\n                                                                                });\r\n\r\n    const handlerTableRowUID = (event, data)=>{ //фокус на строку\r\n        event.preventDefault();\r\n\r\n        let tr; //строка выбранной ячейки\r\n        if (event.target.parentElement.tagName == 'TR') {\r\n            tr = event.target.parentElement;\r\n        } else if (event.target.parentElement.tagName == 'TD') {\r\n            tr = event.target.parentElement.parentElement; \r\n        }\r\n        tr.children[1].focus();\r\n\r\n        tablebodyBackgroundClear();\r\n        tr.style.background = rowFocus_Coffee;\r\n\r\n        stateTable.map( (obj, index) => {\r\n            if (obj.uid === data){\r\n                dispatch(saveDataStore(obj)); // сохранить в хранилище\r\n            }\r\n        })\r\n    }\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n    const HendlerOnMouseover = () => {\r\n\r\n    }\r\n    const HendlerOnMouseLeave = () => {\r\n\r\n    }\r\n\r\n    const [flagCountRow, setFlagCoutnRow] = useState(false);\r\n\r\n\r\n    const hendlerInputOpen = () => {\r\n        setFlagCoutnRow(true);\r\n    }\r\n\r\n    const hendlerChangeCountRow = (event) => {\r\n            event.preventDefault();\r\n            dispatch(changeCountRowTable(event.target.value));\r\n            dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\r\n            if (numberList != 1) {\r\n                      focusNull();  // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные\r\n                  };\r\n    }\r\n\r\n    const hendlerInputSave = () => {\r\n\r\n        setFlagCoutnRow(false);\r\n        dispatch(getCounterPagesTable(stateTable, countRow));\r\n        dispatch(getDataPageRowTable(stateTable, countRow, numberList));\r\n    }\r\n    //после выбора страницы приходит ее номер\r\n    // в хранилище собираем новую страницу\r\n    // в хранилище сохраняем номер страницы\r\n    const hendlerOpenPagesTable = (num) => {\r\n\r\n        dispatch(getDataPageRowTable(stateTable, countRow, num));\r\n        dispatch(changeNumberList(num));\r\n        focusNull(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\r\n    }\r\n\r\n    const hendlerAddCompareData = () => {\r\n        dispatch(addDataCompareArr(focusData, compareArr));\r\n    }\r\n\r\n    const hendlerOpenCompareWindow = () => {\r\n        dispatch(addDataCompareArr(focusData, compareArr)); //добавить выделенную строку в сравнение\r\n        focusNull();\r\n        dispatch(changeAdressOpenTable(links.linkCompare));\r\n    }\r\n\r\n\r\n    const hendlerSortBase = (event, sortKey) => {\r\n    //сортируем всю базу\r\n        const data = stateTable;\r\n\r\n        if (typeof data[0][sortKey] == 'boolean') { //если это чекбокс\r\n            const compare = function (a, b) {\r\n                let x;\r\n                let y;\r\n                if (a[sortKey] == true) { x = 1 } else { x = 0 };\r\n                if (b[sortKey] == true) { y = 1 } else { y = 0 };\r\n                return y - x;\r\n            };\r\n            data.sort(compare);\r\n        } else {\r\n            data.sort((a, b) => a[sortKey].localeCompare(b[sortKey]) )\r\n        }\r\n\r\n        dispatch(sortingTable(data)); // сначала сотрируем всю базу данных\r\n        dispatch(getDataPageRowTable(data, countRow, numberList)); // затем меняем вид листа, который выведен в данный момент на страницу\r\n\r\n    }\r\n\r\n\r\n    const hendlerSortList = (event, sortKey) => {\r\n    //сотрируем только открытый лист, база остается несортированной\r\n        const data = dataTable;\r\n\r\n        if (typeof data[0][sortKey] == 'boolean') { //если это чекбокс\r\n            const compare = function (a, b) {\r\n                let x;\r\n                let y;\r\n                if (a[sortKey] == true) { x = 1 } else { x = 0 };\r\n                if (b[sortKey] == true) { y = 1 } else { y = 0 };\r\n                return y - x;\r\n            };\r\n            data.sort(compare);\r\n        } else {\r\n                data.sort((a, b) => {\r\n                    return a[sortKey].localeCompare(b[sortKey])\r\n                })\r\n        }\r\n        dispatch(sortingList(data)); //сотрируем только открытый лист, база остается несортированной\r\n    }\r\n\r\n  //  const [flagOpenInputSearch, setFlagOpenInputSearch] = useState(false);\r\n\r\n    //const hendlerOpenInputSearch = () => {\r\n    //    setFlagOpenInputSearch(true);\r\n    //}\r\n    //const hendlerCloseInputSearch = () => {\r\n    //    setFlagOpenInputSearch(false);\r\n    //}\r\n    const hendlerSearchBase = (event) => {\r\n        event.preventDefault();\r\n        if (event.target.value == '') { return }; //если пусто, выходим\r\n\r\n        let num; // номер выбранного объекта в массиве\r\n        let numRowOnPage; // номер строки объекта на отображаемой странице (в дальнейшем выделим цветом)\r\n    \r\n        stateTable.map((obj, index) => {\r\n\r\n            if (obj.name == event.target.value) {\r\n                num = index + 1;\r\n                numRowOnPage = index +1;\r\n                dispatch(saveDataStore(obj)); // сохранить фокус в хранилище\r\n            }\r\n        });\r\n            //поиск номера страницы\r\n            let i = countRow;\r\n            let numList = 1;\r\n            if (num == undefined) { return }; //если пусто, выходим\r\n\r\n            while (i < num) {\r\n                i = i + countRow;\r\n                numRowOnPage = numRowOnPage - countRow;\r\n                numList++;\r\n        }\r\n\r\n        dispatch(changeNumberList(numList)); //сохраняем номер\r\n        dispatch(getDataPageRowTable(stateTable, countRow, numList));// загружаем выбранный лист\r\n\r\n        tablebodyBackgroundClear();\r\n\r\n        let tablebody = document.getElementById('tablebody');\r\n        tablebody.children[numRowOnPage - 1].style.background = rowFocus_Coffee; // выделяем цветом\r\n        tablebody.children[numRowOnPage - 1].children[1].focus();\r\n    }\r\n\r\n    \r\n\r\n useEffect(() => {\r\n     dispatch(startGetRequestServerEltypeClass());\r\n\r\n     document.oncontextmenu = function (event) {\r\n         if (event.defaultPrevented) return;\r\n         event.preventDefault();\r\n         if (event.target.tagName == 'TD') {\r\n             setFlagOpenContextMenuWindow({\r\n                 flag: true,\r\n                 clientX: event.clientX,\r\n                 clientY: event.clientY\r\n             });\r\n         };\r\n\r\n     };\r\n\r\n     const SearchBaseName = document.getElementById('SearchBaseName');\r\n     document.onclick = function (event) {\r\n         event.preventDefault();\r\n         setFlagOpenContextMenuWindow({\r\n             flag: false,\r\n             clientX: '',\r\n             clientY: ''\r\n         });\r\n         if (event.target.tagName != \"INPUT\") {\r\n\r\n             SearchBaseName.value = '';\r\n         }\r\n     };\r\n     document.onscroll = function () {\r\n         setFlagOpenContextMenuWindow({\r\n             flag: false,\r\n             clientX: '',\r\n             clientY: ''\r\n         });\r\n     };\r\n\r\n    }, [])\r\n\r\n\r\n    const stateConsoleButton = [\r\n        {\r\n            text: \"Обновить\",\r\n            icon: \"fa fa-download fa-lg\",\r\n            onclick: () => { dispatch(startGetRequestServerEltypeClass()) }\r\n            },\r\n        {\r\n            text: \"Добавить новые данные\",\r\n            icon: \"fa fa-plus fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\"),\r\n            link: links.linkEditWindow\r\n            },\r\n        {\r\n            text: \"Внести изменения\",\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\"),\r\n            link: links.linkEditWindow\r\n            },\r\n        {\r\n            text: \"Удалить\",\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => { },\r\n            link: links.linkWindowConfirmDeleting\r\n            },\r\n        {\r\n            text: \"Сравнить\",\r\n            icon: \"fa fa-balance-scale\",\r\n            onclick: hendlerOpenCompareWindow,\r\n            link: links.linkCompare\r\n        },\r\n        {\r\n            text: \"Добавить к сравнению\",\r\n            icon: \"fa fa-filter fa-lg\",\r\n            onclick: () => hendlerAddCompareData()\r\n        }\r\n    ];\r\n\r\n    \r\n    return (\r\n        <div className=\"DataBase__container\">\r\n \r\n                <div className=\"DataBase__header__container\">\r\n                    <ConsoleButton\r\n                            classnameWrapper=\"DataBase__header__console\"\r\n                            stateConsoleButton = {stateConsoleButton}\r\n                            onmouseover={HendlerOnMouseover}\r\n                            onmouseleave={HendlerOnMouseLeave}\r\n                            tabindex=\"-1\"\r\n                            />\r\n\r\n                    <HeaderDictionary\r\n                            classname=\"DataBase__header__header\"\r\n                            nameHeader=\"Классы для Типов связей и Типов сущностей\"\r\n                            dataBase={stateTable}\r\n                            onchangeSearch={(event) => hendlerSearchBase(event)}\r\n\r\n                        />\r\n                </div>\r\n                {\r\n                    stateLoading?\r\n                        <AwaitLoading\r\n                                classname=\"Loading\"\r\n                        />\r\n                       :<TableList\r\n                                classname=\"DataBase__table__container\"\r\n                                classnameConsoleCountRow='ConsoleCountRow'\r\n                                classnameButtonConsoleCountPow=\"PersonalizeButton\"\r\n                                columnName={Object.keys(stateTable[0])}\r\n                                dataTable={dataTable}\r\n                                onclick={(event, data) => handlerTableRowUID(event, data)}\r\n                                onclickSortBase={(event, keyName) => hendlerSortBase(event, keyName)}\r\n                                onclickSortList={(event, keyName) => hendlerSortList(event, keyName)}\r\n                                onclickInputOpen={hendlerInputOpen}\r\n                                onclickInputSave={hendlerInputSave}\r\n                                onclickOpenPagesTable={(numButton) => hendlerOpenPagesTable(numButton)}\r\n                                flagCountRow={flagCountRow}\r\n                                onchangeCountRow={(event) => hendlerChangeCountRow(event)}\r\n                                CountRow={countRow}\r\n                                counterPages={counterPages}\r\n                                focusUid={focusData.uid}\r\n                                numberActivList={numberList}\r\n                        /> \r\n                }\r\n                {\r\n                    flagOpenContextMenuWindow.flag ?\r\n                        <ContextMenuWindow\r\n                            stateConsoleButton={stateConsoleButton}\r\n                            classname=\"ContextMenuWindow\"\r\n                            clientX={flagOpenContextMenuWindow.clientX}\r\n                            clientY={flagOpenContextMenuWindow.clientY}\r\n                        />\r\n                        : null\r\n                }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default connect()(EltypeClass)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}