{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\EltypeClass.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\nimport TableList from '../../components/Table/TableListEltypeClass';\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\nimport { startGetRequestServerEltypeClass, saveDataStore, saveTypeRequest, saveNameWindow } from '../../store/EltypeClass/actions/actionEltypeClass';\nimport { linkEditWindowEltypeClass } from '../Navigation/Main';\nimport { linkWindowConfirmDeleting } from '../Navigation/Main';\n\nfunction EltypeClass(props) {\n  const linkAddressWindowEdit = linkEditWindowEltypeClass;\n  const linkAddressWindowDelete = linkWindowConfirmDeleting;\n  const dispatch = useDispatch();\n  const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\n  const stateTable = useSelector(state => state.stateTableEltypeClass);\n  const length = useSelector(state => state.stateTableEltypeClass.length) + 1;\n\n  const handlerTableRowUID = (event, data) => {\n    event.preventDefault();\n    stateTable.map((obj, index) => {\n      if (obj.uid === data) {\n        console.log(\"index \", index);\n        dispatch(saveDataStore(obj));\n      }\n    });\n  };\n\n  const hendlerOpenWindow = (nameWindow, typeRequest) => {\n    dispatch(saveTypeRequest(typeRequest));\n    dispatch(saveNameWindow(nameWindow));\n  };\n\n  const HendlerOnMouseover = () => {};\n\n  const HendlerOnMouseLeave = () => {};\n\n  const [flagCountRow, setFlagCoutnRow] = useState(false);\n  const [countRow, setChangeCountRow] = useState(10);\n\n  const countPagesTable = () => {\n    let sumRow = length;\n    console.log(\"ДЛИНА МАССИВА\", sumRow + '  ' + countRow);\n    let i = 0;\n\n    while (sumRow >= countRow) {\n      sumRow = sumRow - countRow;\n      i++;\n      console.log(\"ДЛИНА sumRow\", sumRow);\n    }\n\n    if (sumRow <= 0) {\n      return i;\n    } else {\n      i++;\n      return i;\n    }\n  };\n\n  const [counterPages, setCounterPades] = useState(countPagesTable());\n\n  const hendlerInputOpen = () => {\n    setFlagCoutnRow(true);\n  };\n\n  const hendlerChangeCountRow = event => {\n    event.preventDefault();\n    setChangeCountRow(event.target.value);\n  };\n\n  const hendlerInputSave = () => {\n    setFlagCoutnRow(false);\n    setCounterPades(countPagesTable());\n  };\n\n  useEffect(() => {\n    dispatch(startGetRequestServerEltypeClass());\n    setCounterPades(countPagesTable());\n  }, []);\n  const stateConsoleButton = [{\n    text: \"Обновить\",\n    icon: \"fa fa-download fa-lg\",\n    onclick: () => {\n      dispatch(startGetRequestServerEltypeClass());\n    }\n  }, {\n    text: \"Добавить новые данные\",\n    icon: \"fa fa-plus fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\")\n  }, {\n    text: \"Внести изменения\",\n    icon: \"fa fa-pencil-square-o fa-lg\",\n    onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\")\n  }, {\n    text: \"Удалить\",\n    icon: \"fa fa-times fa-lg\",\n    onclick: () => {}\n  }, {\n    text: \"Показать только активные\",\n    icon: \"fa fa-filter fa-lg\",\n    onclick: () => console.log('click')\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"DataBase__header__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleButton, {\n    classnameWrapper: \"DataBase__header__console\",\n    linkWindowEdit: linkAddressWindowEdit,\n    linkWindowConfirmDeleting: linkAddressWindowDelete,\n    stateConsoleButton: stateConsoleButton,\n    onmouseover: HendlerOnMouseover,\n    onmouseleave: HendlerOnMouseLeave,\n    tabindex: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(HeaderDictionary, {\n    classname: \"DataBase__header__header\",\n    nameHeader: \"\\u041A\\u043B\\u0430\\u0441\\u0441\\u044B \\u0434\\u043B\\u044F \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0432\\u044F\\u0437\\u0435\\u0439 \\u0438 \\u0422\\u0438\\u043F\\u043E\\u0432 \\u0441\\u0443\\u0449\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  })), stateLoading ? /*#__PURE__*/React.createElement(AwaitLoading, {\n    classname: \"Loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(TableList, {\n    classname: \"DataBase__table__container\",\n    classnameConsoleCountRow: \"ConsoleCountRow\",\n    classnameButtonConsoleCountPow: \"PersonalizeButton\",\n    columnName: Object.keys(stateTable[0]),\n    dataTable: stateTable,\n    onclick: (event, data) => handlerTableRowUID(event, data),\n    onclickInputOpen: hendlerInputOpen,\n    onclickInputSave: hendlerInputSave,\n    flagCountRow: flagCountRow,\n    onchange: hendlerChangeCountRow,\n    CountRow: countRow,\n    counterPages: counterPages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 25\n    }\n  }));\n}\n\nexport default connect()(EltypeClass);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/EltypeClass.js"],"names":["React","useEffect","useState","connect","useDispatch","useSelector","ConsoleButton","TableList","HeaderDictionary","AwaitLoading","startGetRequestServerEltypeClass","saveDataStore","saveTypeRequest","saveNameWindow","linkEditWindowEltypeClass","linkWindowConfirmDeleting","EltypeClass","props","linkAddressWindowEdit","linkAddressWindowDelete","dispatch","stateLoading","state","stateFlagsEltypeClass","loading","stateTable","stateTableEltypeClass","length","handlerTableRowUID","event","data","preventDefault","map","obj","index","uid","console","log","hendlerOpenWindow","nameWindow","typeRequest","HendlerOnMouseover","HendlerOnMouseLeave","flagCountRow","setFlagCoutnRow","countRow","setChangeCountRow","countPagesTable","sumRow","i","counterPages","setCounterPades","hendlerInputOpen","hendlerChangeCountRow","target","value","hendlerInputSave","stateConsoleButton","text","icon","onclick","Object","keys"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AAEA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,OAAOC,SAAP,MAAsB,6CAAtB;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AACA,OAAOC,YAAP,MAAyB,+CAAzB;AAEA,SACQC,gCADR,EAEQC,aAFR,EAGQC,eAHR,EAIQC,cAJR,QAKO,mDALP;AAOA,SAASC,yBAAT,QAA0C,oBAA1C;AACA,SAASC,yBAAT,QAA0C,oBAA1C;;AAIA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAExB,QAAMC,qBAAqB,GAAGJ,yBAA9B;AACA,QAAMK,uBAAuB,GAAGJ,yBAAhC;AAEA,QAAMK,QAAQ,GAAGhB,WAAW,EAA5B;AAEA,QAAMiB,YAAY,GAAGhB,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACC,qBAAN,CAA4BC,OAAtC,CAAhC;AAEA,QAAMC,UAAU,GAAGpB,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACI,qBAAhB,CAA9B;AAEA,QAAMC,MAAM,GAAGtB,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACI,qBAAN,CAA4BC,MAAtC,CAAX,GAA2D,CAA1E;;AAEA,QAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAe;AACtCD,IAAAA,KAAK,CAACE,cAAN;AAEAN,IAAAA,UAAU,CAACO,GAAX,CAAgB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC5B,UAAID,GAAG,CAACE,GAAJ,KAAYL,IAAhB,EAAqB;AACjBM,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,KAAtB;AACAd,QAAAA,QAAQ,CAACT,aAAa,CAACsB,GAAD,CAAd,CAAR;AACH;AACJ,KALD;AAMH,GATD;;AAUA,QAAMK,iBAAiB,GAAG,CAACC,UAAD,EAAaC,WAAb,KAA6B;AACnDpB,IAAAA,QAAQ,CAACR,eAAe,CAAC4B,WAAD,CAAhB,CAAR;AACApB,IAAAA,QAAQ,CAACP,cAAc,CAAC0B,UAAD,CAAf,CAAR;AACH,GAHD;;AAIA,QAAME,kBAAkB,GAAG,MAAM,CAEhC,CAFD;;AAGA,QAAMC,mBAAmB,GAAG,MAAM,CAEjC,CAFD;;AAIA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkC1C,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAAC2C,QAAD,EAAWC,iBAAX,IAAgC5C,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAM6C,eAAe,GAAG,MAAM;AAE1B,QAAIC,MAAM,GAAGrB,MAAb;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BW,MAAM,GAAG,IAAT,GAAgBH,QAA7C;AACA,QAAII,CAAC,GAAG,CAAR;;AACA,WAAOD,MAAM,IAAIH,QAAjB,EAA2B;AACvBG,MAAAA,MAAM,GAAGA,MAAM,GAAGH,QAAlB;AACAI,MAAAA,CAAC;AACDb,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BW,MAA5B;AACH;;AAED,QAAIA,MAAM,IAAI,CAAd,EAAiB;AACb,aAAOC,CAAP;AACH,KAFD,MAEO;AACHA,MAAAA,CAAC;AACD,aAAOA,CAAP;AACH;AACJ,GAjBD;;AAmBA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCjD,QAAQ,CAAC6C,eAAe,EAAhB,CAAhD;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC3BR,IAAAA,eAAe,CAAC,IAAD,CAAf;AACH,GAFD;;AAMA,QAAMS,qBAAqB,GAAIxB,KAAD,IAAW;AACjCA,IAAAA,KAAK,CAACE,cAAN;AACAe,IAAAA,iBAAiB,CAACjB,KAAK,CAACyB,MAAN,CAAaC,KAAd,CAAjB;AACP,GAHD;;AAKA,QAAMC,gBAAgB,GAAG,MAAM;AAEvBZ,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAO,IAAAA,eAAe,CAACJ,eAAe,EAAhB,CAAf;AACH,GAJL;;AAOH9C,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,QAAQ,CAACV,gCAAgC,EAAjC,CAAR;AACAyC,IAAAA,eAAe,CAACJ,eAAe,EAAhB,CAAf;AACA,GAHK,EAGH,EAHG,CAAT;AAMG,QAAMU,kBAAkB,GAAG,CACvB;AACIC,IAAAA,IAAI,EAAE,UADV;AAEIC,IAAAA,IAAI,EAAE,sBAFV;AAGIC,IAAAA,OAAO,EAAE,MAAM;AAAExC,MAAAA,QAAQ,CAACV,gCAAgC,EAAjC,CAAR;AAA8C;AAHnE,GADuB,EAMvB;AACIgD,IAAAA,IAAI,EAAE,uBADV;AAEIC,IAAAA,IAAI,EAAE,kBAFV;AAGIC,IAAAA,OAAO,EAAE,MAAMtB,iBAAiB,CAAC,cAAD,EAAiB,MAAjB;AAHpC,GANuB,EAWvB;AACIoB,IAAAA,IAAI,EAAE,kBADV;AAEIC,IAAAA,IAAI,EAAE,6BAFV;AAGIC,IAAAA,OAAO,EAAE,MAAMtB,iBAAiB,CAAC,kBAAD,EAAqB,KAArB;AAHpC,GAXuB,EAgBvB;AACIoB,IAAAA,IAAI,EAAE,SADV;AAEIC,IAAAA,IAAI,EAAE,mBAFV;AAGIC,IAAAA,OAAO,EAAE,MAAM,CAAE;AAHrB,GAhBuB,EAqBvB;AACIF,IAAAA,IAAI,EAAE,0BADV;AAEIC,IAAAA,IAAI,EAAE,oBAFV;AAGIC,IAAAA,OAAO,EAAE,MAAMxB,OAAO,CAACC,GAAR,CAAY,OAAZ;AAHnB,GArBuB,CAA3B;AA4BA,sBACI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEQ;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AACQ,IAAA,gBAAgB,EAAC,2BADzB;AAGQ,IAAA,cAAc,EAAEnB,qBAHxB;AAIQ,IAAA,yBAAyB,EAAEC,uBAJnC;AAMQ,IAAA,kBAAkB,EAAIsC,kBAN9B;AAQQ,IAAA,WAAW,EAAEhB,kBARrB;AASQ,IAAA,YAAY,EAAEC,mBATtB;AAWQ,IAAA,QAAQ,EAAC,IAXjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAgBI,oBAAC,gBAAD;AACQ,IAAA,SAAS,EAAC,0BADlB;AAEQ,IAAA,UAAU,EAAC,0NAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBJ,CAFR,EAwBYrB,YAAY,gBACR,oBAAC,YAAD;AACQ,IAAA,SAAS,EAAC,SADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADQ,gBAIR,oBAAC,SAAD;AACQ,IAAA,SAAS,EAAC,4BADlB;AAEQ,IAAA,wBAAwB,EAAC,iBAFjC;AAGQ,IAAA,8BAA8B,EAAC,mBAHvC;AAIQ,IAAA,UAAU,EAAEwC,MAAM,CAACC,IAAP,CAAYrC,UAAU,CAAC,CAAD,CAAtB,CAJpB;AAKQ,IAAA,SAAS,EAAEA,UALnB;AAMQ,IAAA,OAAO,EAAE,CAACI,KAAD,EAAQC,IAAR,KAAiBF,kBAAkB,CAACC,KAAD,EAAQC,IAAR,CANpD;AAOQ,IAAA,gBAAgB,EAAEsB,gBAP1B;AAQQ,IAAA,gBAAgB,EAAEI,gBAR1B;AASQ,IAAA,YAAY,EAAEb,YATtB;AAUQ,IAAA,QAAQ,EAAEU,qBAVlB;AAWQ,IAAA,QAAQ,EAAER,QAXlB;AAYQ,IAAA,YAAY,EAAEK,YAZtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BhB,CADJ;AAgDH;;AAED,eAAe/C,OAAO,GAAGa,WAAH,CAAtB","sourcesContent":["import React, { useEffect, useState} from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport ConsoleButton from '../../components/ConsoleButton/ConsoleButton';\r\nimport TableList from '../../components/Table/TableListEltypeClass';\r\nimport HeaderDictionary from '../../components/Header/HeaderDictionary';\r\nimport AwaitLoading from '../../UserInterface/AwaitLoading/AwaitLoading';\r\n\r\nimport {\r\n        startGetRequestServerEltypeClass,\r\n        saveDataStore,\r\n        saveTypeRequest,\r\n        saveNameWindow\r\n} from '../../store/EltypeClass/actions/actionEltypeClass';\r\n\r\nimport { linkEditWindowEltypeClass } from '../Navigation/Main';\r\nimport { linkWindowConfirmDeleting } from '../Navigation/Main';\r\n\r\n\r\n\r\nfunction EltypeClass(props) {\r\n\r\n    const linkAddressWindowEdit = linkEditWindowEltypeClass;\r\n    const linkAddressWindowDelete = linkWindowConfirmDeleting;\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const stateLoading = useSelector(state => state.stateFlagsEltypeClass.loading);\r\n\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass);\r\n\r\n    const length = useSelector(state => state.stateTableEltypeClass.length) + 1;\r\n\r\n    const handlerTableRowUID = (event, data)=>{\r\n        event.preventDefault();\r\n        \r\n        stateTable.map( (obj, index) => {\r\n            if (obj.uid === data){\r\n                console.log(\"index \", index);\r\n                dispatch(saveDataStore(obj));\r\n            }\r\n        })\r\n    }\r\n    const hendlerOpenWindow = (nameWindow, typeRequest) => {\r\n        dispatch(saveTypeRequest(typeRequest));\r\n        dispatch(saveNameWindow(nameWindow));\r\n    }\r\n    const HendlerOnMouseover = () => {\r\n\r\n    }\r\n    const HendlerOnMouseLeave = () => {\r\n\r\n    }\r\n\r\n    const [flagCountRow, setFlagCoutnRow] = useState(false);\r\n    const [countRow, setChangeCountRow] = useState(10);\r\n\r\n    const countPagesTable = () => {\r\n\r\n        let sumRow = length;\r\n        console.log(\"ДЛИНА МАССИВА\", sumRow + '  ' + countRow)\r\n        let i = 0;\r\n        while (sumRow >= countRow) {\r\n            sumRow = sumRow - countRow;\r\n            i++;\r\n            console.log(\"ДЛИНА sumRow\", sumRow )\r\n        }\r\n\r\n        if (sumRow <= 0) {\r\n            return i;\r\n        } else {\r\n            i++;\r\n            return i;\r\n        }\r\n    };\r\n\r\n    const [counterPages, setCounterPades] = useState(countPagesTable());\r\n\r\n    const hendlerInputOpen = () => {\r\n        setFlagCoutnRow(true);\r\n    }\r\n\r\n\r\n\r\n    const hendlerChangeCountRow = (event) => {\r\n            event.preventDefault();\r\n            setChangeCountRow(event.target.value);\r\n    }\r\n\r\n    const hendlerInputSave = () => {\r\n\r\n            setFlagCoutnRow(false);\r\n            setCounterPades(countPagesTable());\r\n        }\r\n\r\n\r\n useEffect(() => {\r\n     dispatch(startGetRequestServerEltypeClass());\r\n     setCounterPades(countPagesTable());\r\n    }, [])\r\n\r\n\r\n    const stateConsoleButton = [\r\n        {\r\n            text: \"Обновить\",\r\n            icon: \"fa fa-download fa-lg\",\r\n            onclick: () => { dispatch(startGetRequestServerEltypeClass()) }\r\n            },\r\n        {\r\n            text: \"Добавить новые данные\",\r\n            icon: \"fa fa-plus fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Новые данные\", \"post\")\r\n            },\r\n        {\r\n            text: \"Внести изменения\",\r\n            icon: \"fa fa-pencil-square-o fa-lg\",\r\n            onclick: () => hendlerOpenWindow(\"Внести изменения\", \"put\")\r\n            },\r\n        {\r\n            text: \"Удалить\",\r\n            icon: \"fa fa-times fa-lg\",\r\n            onclick: () => {}\r\n            },\r\n        {\r\n            text: \"Показать только активные\",\r\n            icon: \"fa fa-filter fa-lg\",\r\n            onclick: () => console.log('click')\r\n            }\r\n    ];\r\n    \r\n    return (\r\n        <div className=\"DataBase__container\">\r\n \r\n                <div className=\"DataBase__header__container\">\r\n                    <ConsoleButton\r\n                            classnameWrapper=\"DataBase__header__console\"\r\n\r\n                            linkWindowEdit={linkAddressWindowEdit}\r\n                            linkWindowConfirmDeleting={linkAddressWindowDelete}\r\n        \r\n                            stateConsoleButton = {stateConsoleButton}\r\n\r\n                            onmouseover={HendlerOnMouseover}\r\n                            onmouseleave={HendlerOnMouseLeave}\r\n\r\n                            tabindex=\"-1\"\r\n\r\n                            />\r\n\r\n                    <HeaderDictionary\r\n                            classname=\"DataBase__header__header\"\r\n                            nameHeader=\"Классы для Типов связей и Типов сущностей\"\r\n                        />\r\n                </div>\r\n                {\r\n                    stateLoading?\r\n                        <AwaitLoading\r\n                                classname=\"Loading\"\r\n                        />\r\n                       :<TableList\r\n                                classname=\"DataBase__table__container\"\r\n                                classnameConsoleCountRow='ConsoleCountRow'\r\n                                classnameButtonConsoleCountPow=\"PersonalizeButton\"\r\n                                columnName={Object.keys(stateTable[0])}\r\n                                dataTable={stateTable}\r\n                                onclick={(event, data) => handlerTableRowUID(event, data)}\r\n                                onclickInputOpen={hendlerInputOpen}\r\n                                onclickInputSave={hendlerInputSave}\r\n                                flagCountRow={flagCountRow}\r\n                                onchange={hendlerChangeCountRow}\r\n                                CountRow={countRow}\r\n                                counterPages={counterPages}\r\n                        /> \r\n                }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default connect()(EltypeClass)\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}