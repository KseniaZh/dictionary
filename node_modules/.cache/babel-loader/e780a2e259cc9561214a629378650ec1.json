{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u041E\\u0431\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435\\\\React\\\\projects\\\\react-dictionary\\\\src\\\\containers\\\\baseEltypeClass\\\\FooterTable.js\";\nimport React, { useState } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport CountRowForPage from '../../components/FooterTable/ConsoleOpenActivList';\nimport ConsoleOpenActivList from '../../components/FooterTable/CountRowForPage';\nimport { changeDataButtonOpenInput, changeCountRowTable, getCounterPagesTable, changeNumberList, getDataPageRowTable, changeActivArrNumberPagesFooterTable } from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\n\nfunction FooterTable(props) {\n  const dispatch = useDispatch();\n  const dataButtonOpenInput = useSelector(state => state.stateFlagsEltypeClass.dataButtonOpenInput);\n  const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\n\n  const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\n\n  const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // количество листов в таблице всего\n\n  const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\n\n  const activArrNumberPages = useSelector(state => state.stateFlagsEltypeClass.activArrNumberPagesFooterTable); //предлагаемый на выбор массив из 3х кнопок в консоли переключения отображаемых листов таблицы\n\n  const [inputValue, setInputValue] = useState(countRow); // значение в интуре\n\n  const hendlerButtonInputOpen = () => {\n    if (dataButtonOpenInput.flag === false) {\n      dispatch(changeDataButtonOpenInput({\n        flag: true,\n        icon: \"fa fa-floppy-o\",\n        name: \"SaveChangeCountRow\"\n      }));\n    }\n\n    ;\n\n    if (dataButtonOpenInput.flag === true) {\n      dispatch(changeDataButtonOpenInput({\n        flag: false,\n        icon: \"fa fa-pencil\",\n        name: \"OpenInputChangeCountRow\"\n      }));\n      dispatch(changeCountRowTable(inputValue)); // количество строк на странице\n\n      dispatch(getCounterPagesTable(stateTable, inputValue)); // количество листов в таблице всего\n\n      dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\n\n      dispatch(getDataPageRowTable(stateTable, inputValue, 1)); // из stateTable выбираем строки для загрузки листа\n\n      dispatch(changeActivArrNumberPagesFooterTable(1, inputValue, activArrNumberPages, stateTable)); //измениям консоль выбора активной страницы в футере\n\n      if (numberList !== 1) {\n        props.func(); // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные focus\n      }\n\n      ;\n    }\n  };\n\n  const hendlerChangeInputValue = event => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n  }; //после выбора страницы приходит ее номер, в хранилище собираем новую страницу, в хранилище сохраняем номер страницы\n\n\n  const hendlerOpenPagesTable = num => {\n    dispatch(getDataPageRowTable(stateTable, countRow, num)); // из stateTable выбираем строки для загрузки листа\n\n    dispatch(changeNumberList(num)); // сохраняем номер выбранного листа\n\n    props.func(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\n\n    dispatch(changeActivArrNumberPagesFooterTable(num, inputValue, activArrNumberPages, stateTable)); //измениям консоль выбора активной страницы в футере\n  };\n\n  const hendlerChangeButtonConsole = num => {\n    dispatch(changeActivArrNumberPagesFooterTable(num, inputValue, activArrNumberPages, stateTable)); //переключение стрелками консоли выбора активной страницы в футере\n  };\n\n  console.log('dataButtonOpenInput ', dataButtonOpenInput);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: props.classname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConsoleOpenActivList, {\n    func: props.func,\n    counterPages: counterPages,\n    activArrNumberPages: activArrNumberPages,\n    numberActivList: numberList,\n    onclickOpenPagesTable: hendlerOpenPagesTable,\n    onclickChangeButtonConsole: hendlerChangeButtonConsole,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CountRowForPage, {\n    func: props.func,\n    classname: props.classnameButtonConsoleCountRow,\n    CountRow: countRow,\n    length: stateTable.length,\n    dataButtonOpenInput: dataButtonOpenInput,\n    onclickButtonInputOpen: hendlerButtonInputOpen,\n    inputValue: inputValue,\n    onchangeInputValue: hendlerChangeInputValue,\n    classname: props.classname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default connect()(FooterTable);","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/containers/baseEltypeClass/FooterTable.js"],"names":["React","useState","connect","useDispatch","useSelector","CountRowForPage","ConsoleOpenActivList","changeDataButtonOpenInput","changeCountRowTable","getCounterPagesTable","changeNumberList","getDataPageRowTable","changeActivArrNumberPagesFooterTable","FooterTable","props","dispatch","dataButtonOpenInput","state","stateFlagsEltypeClass","stateTable","stateTableEltypeClass","countRow","countRowTable","counterPages","counterPagesTable","numberList","activArrNumberPages","activArrNumberPagesFooterTable","inputValue","setInputValue","hendlerButtonInputOpen","flag","icon","name","func","hendlerChangeInputValue","event","preventDefault","target","value","hendlerOpenPagesTable","num","hendlerChangeButtonConsole","console","log","classname","classnameButtonConsoleCountRow","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport CountRowForPage from '../../components/FooterTable/ConsoleOpenActivList';\r\nimport ConsoleOpenActivList from '../../components/FooterTable/CountRowForPage';\r\n\r\nimport {\r\n    changeDataButtonOpenInput,\r\n    changeCountRowTable,\r\n    getCounterPagesTable,\r\n    changeNumberList,\r\n    getDataPageRowTable,\r\n    changeActivArrNumberPagesFooterTable\r\n} from '../../store/EltypeClass/actions/actionsFlagsEltypeClass';\r\n\r\n\r\nfunction FooterTable(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const dataButtonOpenInput = useSelector(state => state.stateFlagsEltypeClass.dataButtonOpenInput);\r\n    const stateTable = useSelector(state => state.stateTableEltypeClass); //ВСЯ база\r\n    const countRow = useSelector(state => state.stateFlagsEltypeClass.countRowTable); // количество строк на отображаемой странице\r\n    const counterPages = useSelector(state => state.stateFlagsEltypeClass.counterPagesTable); // количество листов в таблице всего\r\n    const numberList = useSelector(state => state.stateFlagsEltypeClass.numberList); //номер отображаемого листа\r\n    const activArrNumberPages = useSelector(state => state.stateFlagsEltypeClass.activArrNumberPagesFooterTable); //предлагаемый на выбор массив из 3х кнопок в консоли переключения отображаемых листов таблицы\r\n\r\n\r\n    const [inputValue, setInputValue] = useState(countRow); // значение в интуре\r\n\r\n    const hendlerButtonInputOpen = () => {\r\n\r\n        if (dataButtonOpenInput.flag === false) {\r\n            dispatch(changeDataButtonOpenInput({\r\n                flag: true,\r\n                icon: \"fa fa-floppy-o\",\r\n                name: \"SaveChangeCountRow\"\r\n            }));\r\n        };\r\n        if (dataButtonOpenInput.flag === true) {\r\n            dispatch(changeDataButtonOpenInput({\r\n                flag: false,\r\n                icon: \"fa fa-pencil\",\r\n                name: \"OpenInputChangeCountRow\"\r\n            }));\r\n            dispatch(changeCountRowTable(inputValue)); // количество строк на странице\r\n            dispatch(getCounterPagesTable(stateTable, inputValue)); // количество листов в таблице всего\r\n            dispatch(changeNumberList(1)); // при изменении к-ва строк на странице всегда возвращаемся на страницу №1, если это не надо, убрать эту строку, но может появляться путой лист\r\n            dispatch(getDataPageRowTable(stateTable, inputValue, 1)); // из stateTable выбираем строки для загрузки листа\r\n            dispatch(changeActivArrNumberPagesFooterTable(1, inputValue, activArrNumberPages, stateTable)); //измениям консоль выбора активной страницы в футере\r\n            if (numberList !== 1) {\r\n                props.func();  // переходим на страницу 1, фокус теряется, поэтому в хранилище обнуляем данные focus\r\n            };\r\n\r\n        }\r\n\r\n    }\r\n    const hendlerChangeInputValue = (event) => {\r\n        event.preventDefault();\r\n        setInputValue(event.target.value);\r\n    }\r\n\r\n    //после выбора страницы приходит ее номер, в хранилище собираем новую страницу, в хранилище сохраняем номер страницы\r\n    const hendlerOpenPagesTable = (num) => {\r\n\r\n        dispatch(getDataPageRowTable(stateTable, countRow, num)); // из stateTable выбираем строки для загрузки листа\r\n        dispatch(changeNumberList(num)); // сохраняем номер выбранного листа\r\n        props.func(); // при переходе на другую страницу фокус теряется, поэтому в хранилище обнуляем данные\r\n        dispatch(changeActivArrNumberPagesFooterTable(num, inputValue, activArrNumberPages, stateTable)); //измениям консоль выбора активной страницы в футере\r\n    }\r\n\r\n    const hendlerChangeButtonConsole = (num) => {\r\n        dispatch(changeActivArrNumberPagesFooterTable(num, inputValue, activArrNumberPages, stateTable)); //переключение стрелками консоли выбора активной страницы в футере\r\n    }\r\n\r\n    console.log('dataButtonOpenInput ', dataButtonOpenInput)\r\n\r\n    return (\r\n\r\n        <div className={props.classname}>\r\n\r\n            <ConsoleOpenActivList\r\n                func={props.func}\r\n                counterPages={counterPages}\r\n                activArrNumberPages={activArrNumberPages}\r\n                numberActivList={numberList}\r\n                onclickOpenPagesTable={hendlerOpenPagesTable}\r\n                onclickChangeButtonConsole={hendlerChangeButtonConsole}\r\n            />\r\n               \r\n            <CountRowForPage\r\n                func={props.func}\r\n                classname={props.classnameButtonConsoleCountRow}\r\n                CountRow={countRow}\r\n                length={stateTable.length}\r\n                dataButtonOpenInput={dataButtonOpenInput}\r\n                onclickButtonInputOpen={hendlerButtonInputOpen}\r\n                inputValue={inputValue}\r\n                onchangeInputValue={hendlerChangeInputValue}\r\n                classname={props.classname}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(FooterTable)"]},"metadata":{},"sourceType":"module"}