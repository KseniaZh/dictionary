{"ast":null,"code":"import { SHOW_LOADER, COUNTER_PAGES_TABLE, COUNT_ROW_TABLE, PAGE_ROW_TABLE, CHANGE_NUMBER_LIST, ARR_NUMBER_ROW_LIST } from \"../types\";\nexport const loadingShow = data => {\n  return {\n    type: SHOW_LOADER,\n    payload: data\n  };\n};\nexport const getCounterPagesTable = (dataFromServer, countRowTable) => {\n  let sumRow = dataFromServer.length + 1;\n  let i = 0;\n\n  while (sumRow >= countRowTable) {\n    sumRow = sumRow - countRowTable;\n    i++;\n  }\n\n  if (sumRow <= 0) {\n    return {\n      type: COUNTER_PAGES_TABLE,\n      payload: i\n    };\n  } else {\n    i++;\n    return {\n      type: COUNTER_PAGES_TABLE,\n      payload: i\n    };\n  }\n}; //export const changeCountRowTable = (data) => {\n//    return {\n//        type: COUNT_ROW_TABLE,\n//        payload: data\n//    }\n//}\n\nexport const changeNumberList = data => {\n  return {\n    type: CHANGE_NUMBER_LIST,\n    payload: data\n  };\n};\nexport const getDataPageRowTable = (dataFromServer, countRow, num) => {\n  let activeRowMin = countRow * (num - 1) + 1;\n  let activeRowMax = countRow * num;\n  let dataList = [];\n  dataFromServer.map((obj, index) => {\n    let number = index + 1;\n\n    if (number >= activeRowMin && number <= activeRowMax) {\n      dataList.push(obj);\n    }\n\n    ;\n  });\n  return {\n    type: PAGE_ROW_TABLE,\n    payload: dataList\n  };\n};\nexport const getArrNumberRowList = (dataFromServer, countRow, num) => {\n  let activeRowMin = countRow * (num - 1) + 1;\n  let activeRowMax = countRow * num;\n  let numbersList = [];\n  dataFromServer.map((obj, index) => {\n    let number = index + 1;\n\n    if (number >= activeRowMin && number <= activeRowMax) {\n      numbersList.push(number);\n    }\n\n    ;\n  });\n  return {\n    type: ARR_NUMBER_ROW_LIST,\n    payload: numbersList\n  };\n};","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/store/EltypeClass/actions/actionsFlagsEltypeClass.js"],"names":["SHOW_LOADER","COUNTER_PAGES_TABLE","COUNT_ROW_TABLE","PAGE_ROW_TABLE","CHANGE_NUMBER_LIST","ARR_NUMBER_ROW_LIST","loadingShow","data","type","payload","getCounterPagesTable","dataFromServer","countRowTable","sumRow","length","i","changeNumberList","getDataPageRowTable","countRow","num","activeRowMin","activeRowMax","dataList","map","obj","index","number","push","getArrNumberRowList","numbersList"],"mappings":"AAAA,SACIA,WADJ,EAEIC,mBAFJ,EAGIC,eAHJ,EAIIC,cAJJ,EAKIC,kBALJ,EAMIC,mBANJ,QAO2B,UAP3B;AASA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AAEjC,SAAO;AACHC,IAAAA,IAAI,EAAER,WADH;AAEHS,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CANM;AAQP,OAAO,MAAMG,oBAAoB,GAAG,CAACC,cAAD,EAAiBC,aAAjB,KAAmC;AAEnE,MAAIC,MAAM,GAAGF,cAAc,CAACG,MAAf,GAAwB,CAArC;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAOF,MAAM,IAAID,aAAjB,EAAgC;AAC5BC,IAAAA,MAAM,GAAGA,MAAM,GAAGD,aAAlB;AACAG,IAAAA,CAAC;AACJ;;AAED,MAAIF,MAAM,IAAI,CAAd,EAAiB;AACb,WAAO;AACHL,MAAAA,IAAI,EAAEP,mBADH;AAEHQ,MAAAA,OAAO,EAAEM;AAFN,KAAP;AAIH,GALD,MAKO;AACHA,IAAAA,CAAC;AAED,WAAO;AACHP,MAAAA,IAAI,EAAEP,mBADH;AAEHQ,MAAAA,OAAO,EAAEM;AAFN,KAAP;AAIH;AACJ,CAvBM,C,CA0BP;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAIT,IAAD,IAAU;AAEtC,SAAO;AACHC,IAAAA,IAAI,EAAEJ,kBADH;AAEHK,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CANM;AAQP,OAAO,MAAMU,mBAAmB,GAAG,CAACN,cAAD,EAAiBO,QAAjB,EAA2BC,GAA3B,KAAmC;AAElE,MAAIC,YAAY,GAAGF,QAAQ,IAAIC,GAAG,GAAG,CAAV,CAAR,GAAuB,CAA1C;AACA,MAAIE,YAAY,GAAGH,QAAQ,GAAGC,GAA9B;AAEA,MAAIG,QAAQ,GAAG,EAAf;AAEAX,EAAAA,cAAc,CAACY,GAAf,CAAmB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC/B,QAAIC,MAAM,GAAGD,KAAK,GAAG,CAArB;;AACA,QAAIC,MAAM,IAAIN,YAAV,IAA0BM,MAAM,IAAIL,YAAxC,EAAsD;AAClDC,MAAAA,QAAQ,CAACK,IAAT,CAAcH,GAAd;AACH;;AAAA;AACJ,GALD;AAMI,SAAO;AACHhB,IAAAA,IAAI,EAAEL,cADH;AAEHM,IAAAA,OAAO,EAAEa;AAFN,GAAP;AAIP,CAjBM;AAkBP,OAAO,MAAMM,mBAAmB,GAAG,CAACjB,cAAD,EAAiBO,QAAjB,EAA2BC,GAA3B,KAAmC;AAElE,MAAIC,YAAY,GAAGF,QAAQ,IAAIC,GAAG,GAAG,CAAV,CAAR,GAAuB,CAA1C;AACA,MAAIE,YAAY,GAAGH,QAAQ,GAAGC,GAA9B;AAEA,MAAIU,WAAW,GAAG,EAAlB;AAEAlB,EAAAA,cAAc,CAACY,GAAf,CAAmB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC/B,QAAIC,MAAM,GAAGD,KAAK,GAAG,CAArB;;AACA,QAAIC,MAAM,IAAIN,YAAV,IAA0BM,MAAM,IAAIL,YAAxC,EAAsD;AAClDQ,MAAAA,WAAW,CAACF,IAAZ,CAAiBD,MAAjB;AACH;;AAAA;AACJ,GALD;AAMA,SAAO;AACHlB,IAAAA,IAAI,EAAEH,mBADH;AAEHI,IAAAA,OAAO,EAAEoB;AAFN,GAAP;AAIH,CAjBM","sourcesContent":["import {\r\n    SHOW_LOADER,\r\n    COUNTER_PAGES_TABLE,\r\n    COUNT_ROW_TABLE,\r\n    PAGE_ROW_TABLE,\r\n    CHANGE_NUMBER_LIST,\r\n    ARR_NUMBER_ROW_LIST\r\n                    } from \"../types\";\r\n\r\nexport const loadingShow = (data) => {\r\n\r\n    return {\r\n        type: SHOW_LOADER,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const getCounterPagesTable = (dataFromServer, countRowTable) => {\r\n\r\n    let sumRow = dataFromServer.length + 1;\r\n    let i = 0;\r\n\r\n    while (sumRow >= countRowTable) {\r\n        sumRow = sumRow - countRowTable;\r\n        i++;\r\n    }\r\n\r\n    if (sumRow <= 0) {\r\n        return {\r\n            type: COUNTER_PAGES_TABLE,\r\n            payload: i\r\n        }\r\n    } else {\r\n        i++;\r\n\r\n        return {\r\n            type: COUNTER_PAGES_TABLE,\r\n            payload: i\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//export const changeCountRowTable = (data) => {\r\n\r\n//    return {\r\n//        type: COUNT_ROW_TABLE,\r\n//        payload: data\r\n//    }\r\n//}\r\nexport const changeNumberList = (data) => {\r\n\r\n    return {\r\n        type: CHANGE_NUMBER_LIST,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const getDataPageRowTable = (dataFromServer, countRow, num) => {\r\n\r\n    let activeRowMin = countRow * (num - 1) + 1;\r\n    let activeRowMax = countRow * num;\r\n\r\n    let dataList = [];\r\n\r\n    dataFromServer.map((obj, index) => {\r\n        let number = index + 1;\r\n        if (number >= activeRowMin && number <= activeRowMax) {\r\n            dataList.push(obj);\r\n        };\r\n    })\r\n        return {\r\n            type: PAGE_ROW_TABLE,\r\n            payload: dataList\r\n        }\r\n}\r\nexport const getArrNumberRowList = (dataFromServer, countRow, num) => {\r\n\r\n    let activeRowMin = countRow * (num - 1) + 1;\r\n    let activeRowMax = countRow * num;\r\n\r\n    let numbersList = [];\r\n\r\n    dataFromServer.map((obj, index) => {\r\n        let number = index + 1;\r\n        if (number >= activeRowMin && number <= activeRowMax) {\r\n            numbersList.push(number);\r\n        };\r\n    })\r\n    return {\r\n        type: ARR_NUMBER_ROW_LIST,\r\n        payload: numbersList\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}