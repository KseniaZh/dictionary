{"ast":null,"code":"import { SHOW_LOADER, COUNTER_PAGES_TABLE, COUNT_ROW_TABLE, GET_DATA_LIST_TABLE, CHANGE_NUMBER_LIST_TABLE, SORTING_LIST_TABLE, CHANGE_ACTIV_ARR_NUMBER_PAGES, FLAG_CONTEXT_MENU, FLAG_BUTTON_OPEN_INPUT } from \"../types\";\nexport const loadingShow = data => {\n  return {\n    type: SHOW_LOADER,\n    payload: data\n  };\n};\nexport const changeDataOpenContextMenu = data => {\n  return {\n    type: FLAG_CONTEXT_MENU,\n    payload: data\n  };\n};\nexport const changeDataButtonOpenInput = data => {\n  return {\n    type: FLAG_BUTTON_OPEN_INPUT,\n    payload: data\n  };\n};\nexport const getCounterPagesTable = (dataFromServer, countRowTable) => {\n  // общее количество листов в таблице\n  if (dataFromServer.length <= countRowTable) {\n    return {\n      type: COUNTER_PAGES_TABLE,\n      payload: 1\n    };\n  }\n\n  ;\n  let sumRow = dataFromServer.length;\n  let i = 0;\n\n  while (sumRow >= countRowTable) {\n    sumRow = sumRow - countRowTable;\n    i++;\n  }\n\n  if (sumRow <= 0) {\n    return {\n      type: COUNTER_PAGES_TABLE,\n      payload: i\n    };\n  } else {\n    i++;\n    return {\n      type: COUNTER_PAGES_TABLE,\n      payload: i\n    };\n  }\n};\nexport const changeCountRowTable = data => {\n  //  количество строк на странице\n  return {\n    type: COUNT_ROW_TABLE,\n    payload: data\n  };\n};\nexport const getDataPageRowTable = (dataFromServer, countRow, num) => {\n  //данные для загрузки выбранного листа\n  let activeRowMin = countRow * (num - 1) + 1;\n  let activeRowMax = countRow * num;\n  let dataList = [];\n  dataFromServer.map((obj, index) => {\n    let number = index + 1;\n\n    if (number >= activeRowMin && number <= activeRowMax) {\n      dataList.push(obj);\n    }\n\n    ;\n  });\n  console.log('после выборки строк сохраняем данные для загрузки выбранного листа');\n  return {\n    type: GET_DATA_LIST_TABLE,\n    payload: dataList\n  };\n};\nexport const changeNumberList = number => {\n  //номер выбранного листа\n  return {\n    type: CHANGE_NUMBER_LIST_TABLE,\n    payload: number\n  };\n};\nexport const sortingList = data => {\n  //сотрируем только открытый лист, база остается несортированной\n  return {\n    type: SORTING_LIST_TABLE,\n    payload: data\n  };\n};\nexport const changeActivArrNumberPagesFooterTable = (numberClickButton, countRowTable, oldArr, dataFromServer) => {\n  // считаем количество листов в таблице\n  let counterPages = 0;\n\n  if (dataFromServer.length <= countRowTable) {\n    counterPages = 1;\n  } else {\n    let sumRow = dataFromServer.length;\n    let i = 0;\n\n    while (sumRow >= countRowTable) {\n      sumRow = sumRow - countRowTable;\n      i++;\n    }\n\n    if (sumRow <= 0) {\n      counterPages = i;\n    } else {\n      i++;\n      counterPages = i;\n    }\n  }\n\n  ; //считаем массив\n\n  let activArrNumberPages = [];\n\n  if (numberClickButton === 1) {\n    activArrNumberPages = [1, 2, 3];\n\n    if (counterPages === 1) {\n      activArrNumberPages = [1];\n    } else if (counterPages === 2) {\n      activArrNumberPages = [1, 2];\n    } else if (counterPages === 3) {\n      activArrNumberPages = [1, 2, 3];\n    }\n\n    ;\n  } else if (numberClickButton === counterPages) {\n    activArrNumberPages = [counterPages - 2, counterPages - 1, counterPages];\n  } else if (numberClickButton === 'left') {\n    activArrNumberPages = oldArr.map(num => num - 1);\n  } else if (numberClickButton === 'right') {\n    activArrNumberPages = oldArr.map(num => num + 1);\n  } else {\n    let fullArrNumberPages = [];\n\n    for (let i = 0; i < counterPages; i++) {\n      fullArrNumberPages[i] = i + 1;\n    }\n\n    ;\n    activArrNumberPages = fullArrNumberPages.filter(num => num === numberClickButton || num === numberClickButton - 1 || num === numberClickButton + 1);\n  }\n\n  ;\n\n  if (counterPages === 1) {\n    activArrNumberPages = [1];\n  } else if (counterPages === 2) {\n    activArrNumberPages = [1, 2];\n  } else if (counterPages === 3) {\n    activArrNumberPages = [1, 2, 3];\n  }\n\n  ;\n  return {\n    type: CHANGE_ACTIV_ARR_NUMBER_PAGES,\n    payload: activArrNumberPages\n  };\n};","map":{"version":3,"sources":["D:/Обучение/React/projects/react-dictionary/src/store/BasisReport/actions/actionsFlagsBasisReport.js"],"names":["SHOW_LOADER","COUNTER_PAGES_TABLE","COUNT_ROW_TABLE","GET_DATA_LIST_TABLE","CHANGE_NUMBER_LIST_TABLE","SORTING_LIST_TABLE","CHANGE_ACTIV_ARR_NUMBER_PAGES","FLAG_CONTEXT_MENU","FLAG_BUTTON_OPEN_INPUT","loadingShow","data","type","payload","changeDataOpenContextMenu","changeDataButtonOpenInput","getCounterPagesTable","dataFromServer","countRowTable","length","sumRow","i","changeCountRowTable","getDataPageRowTable","countRow","num","activeRowMin","activeRowMax","dataList","map","obj","index","number","push","console","log","changeNumberList","sortingList","changeActivArrNumberPagesFooterTable","numberClickButton","oldArr","counterPages","activArrNumberPages","fullArrNumberPages","filter"],"mappings":"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","sourcesContent":["import {\r\n    SHOW_LOADER,\r\n    COUNTER_PAGES_TABLE,\r\n    COUNT_ROW_TABLE,\r\n    GET_DATA_LIST_TABLE,\r\n    CHANGE_NUMBER_LIST_TABLE,\r\n    SORTING_LIST_TABLE,\r\n    CHANGE_ACTIV_ARR_NUMBER_PAGES,\r\n    FLAG_CONTEXT_MENU,\r\n    FLAG_BUTTON_OPEN_INPUT\r\n} from \"../types\";\r\n\r\nexport const loadingShow = (data) => {\r\n\r\n    return {\r\n        type: SHOW_LOADER,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const changeDataOpenContextMenu = (data) => {\r\n\r\n    return {\r\n        type: FLAG_CONTEXT_MENU,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const changeDataButtonOpenInput = (data) => {\r\n\r\n    return {\r\n        type: FLAG_BUTTON_OPEN_INPUT,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const getCounterPagesTable = (dataFromServer, countRowTable) => {\r\n    // общее количество листов в таблице\r\n\r\n    if (dataFromServer.length <= countRowTable) {\r\n\r\n        return {\r\n            type: COUNTER_PAGES_TABLE,\r\n            payload: 1\r\n        };\r\n    };\r\n\r\n    let sumRow = dataFromServer.length;\r\n    let i = 0;\r\n\r\n    while (sumRow >= countRowTable ) {\r\n        sumRow = sumRow - countRowTable;\r\n        i++;\r\n    }\r\n\r\n\r\n  if (sumRow <= 0) {\r\n        return {\r\n            type: COUNTER_PAGES_TABLE,\r\n            payload: i\r\n        }\r\n    } else {\r\n        i++;\r\n        return {\r\n            type: COUNTER_PAGES_TABLE,\r\n            payload: i\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const changeCountRowTable = (data) => {\r\n//  количество строк на странице\r\n    return {\r\n        type: COUNT_ROW_TABLE,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const getDataPageRowTable = (dataFromServer, countRow, num) => {\r\n//данные для загрузки выбранного листа\r\n\r\n    let activeRowMin = countRow * (num - 1) + 1;\r\n    let activeRowMax = countRow * num;\r\n\r\n    let dataList = [];\r\n\r\n    dataFromServer.map((obj, index) => {\r\n        let number = index + 1;\r\n        if (number >= activeRowMin && number <= activeRowMax) {\r\n            dataList.push(obj);\r\n        };\r\n    })\r\n    console.log('после выборки строк сохраняем данные для загрузки выбранного листа')\r\n    return {\r\n        type: GET_DATA_LIST_TABLE,\r\n        payload: dataList\r\n    }\r\n}\r\n\r\nexport const changeNumberList = (number) => {\r\n//номер выбранного листа\r\n\r\n    return {\r\n        type: CHANGE_NUMBER_LIST_TABLE,\r\n        payload: number\r\n    }\r\n}\r\n\r\nexport const sortingList = (data) => {\r\n//сотрируем только открытый лист, база остается несортированной\r\n\r\n    return {\r\n        type: SORTING_LIST_TABLE,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const changeActivArrNumberPagesFooterTable = (numberClickButton, countRowTable, oldArr, dataFromServer) => {\r\n\r\n\r\n    // считаем количество листов в таблице\r\n    let counterPages = 0;\r\n\r\n    if (dataFromServer.length <= countRowTable) {\r\n        counterPages = 1;\r\n    } else {\r\n\r\n            let sumRow = dataFromServer.length;\r\n            let i = 0;\r\n\r\n            while (sumRow >= countRowTable) {\r\n                sumRow = sumRow - countRowTable;\r\n                i++;\r\n            }\r\n\r\n            if (sumRow <= 0) {\r\n                counterPages = i;\r\n            } else {\r\n                i++;\r\n                counterPages = i;\r\n            }\r\n    };\r\n    \r\n\r\n    //считаем массив\r\n    let activArrNumberPages = [];\r\n\r\n   if (numberClickButton === 1) {\r\n       activArrNumberPages = [1, 2, 3];\r\n\r\n            if (counterPages === 1) {\r\n                activArrNumberPages = [1];\r\n            } else if (counterPages === 2) {\r\n                activArrNumberPages = [1, 2];\r\n            } else if (counterPages === 3) {\r\n                activArrNumberPages = [1, 2, 3];\r\n            };\r\n\r\n    } else if (numberClickButton === counterPages) {\r\n        activArrNumberPages = [counterPages - 2, counterPages - 1, counterPages];\r\n    } else if (numberClickButton === 'left') {\r\n        activArrNumberPages = oldArr.map(num => num - 1);\r\n    } else if (numberClickButton === 'right') {\r\n        activArrNumberPages = oldArr.map(num => num + 1);\r\n    } else {\r\n        let fullArrNumberPages = [];\r\n        for (let i = 0; i < counterPages; i++) {\r\n            fullArrNumberPages[i] = i + 1;\r\n        };\r\n        activArrNumberPages = fullArrNumberPages.filter(num => (num === numberClickButton || num === (numberClickButton - 1) || num === (numberClickButton + 1)));\r\n    };\r\n\r\n    if (counterPages === 1) {\r\n        activArrNumberPages = [1];\r\n    } else if (counterPages === 2) {\r\n        activArrNumberPages = [1, 2];\r\n    } else if (counterPages === 3) {\r\n        activArrNumberPages = [1, 2, 3];\r\n    };\r\n\r\n    return {\r\n        type: CHANGE_ACTIV_ARR_NUMBER_PAGES,\r\n        payload: activArrNumberPages\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}